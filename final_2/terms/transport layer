{"batchcomplete":"","query":{"normalized":[{"from":"transport_layer","to":"Transport layer"}],"pages":{"146145":{"pageid":146145,"ns":0,"title":"Transport layer","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{refimprove|date=October 2015}}\n{{IPstack}}\nIn [[computer networking]], the '''transport layer''' is a conceptual division of methods in the layered architecture of protocols in the network stack in the [[Internet Protocol Suite]] and the [[Open Systems Interconnection]] (OSI). The protocols of the layer provide host-to-host communication services for applications.<ref>RFC 1122, \u00a71.1.3.</ref> It provides services such as [[connection-oriented communication|connection-oriented]] [[data stream]] support, [[reliability (computer networking)|reliability]], [[flow control (data)|flow control]], and [[multiplexing]].\n\nThe details of implementation and semantics of the Transport Layer of the [[TCP/IP model]] (RFC 1122),<ref>RFC 1122, Requirements for Internet Hosts \u2013 Communication Layers, IETF, R. Braden (Editor), October 1989</ref> which is the foundation of the [[Internet]], and the [[Open Systems Interconnection]] [[OSI model|(OSI) model]] of general networking, are different.{{How|date=October 2016}} In the OSI model the transport layer is most often referred to as '''Layer 4''' or '''L4''', while numbered layers are not used in TCP/IP.\n\nThe best-known transport protocol of TCP/IP is the [[Transmission Control Protocol]] (TCP), and lent its name to the title of the entire suite. It is used for connection-oriented transmissions, whereas the connectionless [[User Datagram Protocol]] (UDP) is used for simpler messaging transmissions. TCP is the more complex protocol, due to its stateful design incorporating reliable transmission and data stream services.  Other prominent protocols in this group are the [[Datagram Congestion Control Protocol]] (DCCP) and the [[Stream Control Transmission Protocol]] (SCTP).\n\n{{OSI model}}\n==Services==\nTransport layer services are conveyed to an application via a programming interface to the transport layer protocols. The services may include the following features:\n* [[Connection-oriented communication]]: It is normally easier for an application to interpret a connection as a [[data stream]] rather than having to deal with the underlying connection-less models, such as the [[datagram]] model of the [[User Datagram Protocol]] (UDP) and of the [[Internet Protocol]] (IP).\n* Same order delivery: The network layer doesn't generally guarantee that packets of data will arrive in the same order that they were sent, but often this is a desirable feature. This is usually done through the use of segment numbering, with the receiver passing them to the application in order. This can cause [[head-of-line blocking]].\n* [[Reliability (computer networking)|Reliability]]: Packets may be lost during transport due to [[network congestion]] and errors. By means of an [[error detection code]], such as a [[checksum]], the transport protocol may check that the data is not corrupted, and verify correct receipt by sending an [[acknowledgement (data networks)|ACK]] or [[Negative-acknowledge character|NACK]] message to the sender. [[Automatic repeat request]] schemes may be used to retransmit lost or corrupted data.\n* [[Flow control (data)|Flow control]]: The rate of data transmission between two nodes must sometimes be managed to prevent a fast sender from transmitting more data than can be supported by the receiving [[data buffer]], causing a buffer overrun. This can also be used to improve efficiency by reducing [[buffer underrun]].\n* [[Congestion avoidance]]: [[Congestion control]] can control traffic entry into a telecommunications network, so as to avoid [[congestive collapse]] by attempting to avoid oversubscription of any of the processing or [[data link|link]] capabilities of the intermediate nodes and networks and taking resource reducing steps, such as reducing the rate of sending [[Packet (information technology)|packets]]. For example, [[automatic repeat request]]s may keep the network in a congested state; this situation can be avoided by adding congestion avoidance to the flow control, including [[slow-start]]. This keeps the bandwidth consumption at a low level in the beginning of the transmission, or after packet retransmission.\n* [[Multiplexing]]: [[TCP and UDP port|Ports]] can provide multiple endpoints on a single node. For example, the name on a postal address is a kind of multiplexing, and distinguishes between different recipients of the same location. Computer applications will each listen for information on their own ports, which enables the use of more than one [[network service]] at the same time. It is part of the transport layer in the [[TCP/IP model]], but of the [[session layer]] in the OSI model.\n\n==Analysis==\nThe transport layer is responsible for delivering data to the appropriate application process on the host computers. This involves [[statistical multiplexing]] of data from different application processes, i.e. forming data packets, and adding source and destination port numbers in the header of each transport layer data packet. Together with the source and destination IP address, the port numbers constitutes a [[network socket]], i.e. an identification address of the process-to-process communication. In the OSI model, this function is supported by the [[session layer]].\n\nSome transport layer protocols, for example TCP, but not UDP, support [[virtual circuit]]s, i.e. provide [[connection oriented]] communication over an underlying packet oriented [[datagram]] network. A byte-stream is delivered while hiding the packet mode communication for the application processes. This involves connection establishment, dividing of the data stream into packets called segments, segment numbering and reordering of out-of order data. \n\nFinally, some transport layer protocols, for example TCP, but not UDP, provide end-to-end reliable communication, i.e. [[error recovery]] by means of [[error detecting code]] and [[automatic repeat request]] (ARQ) protocol. The ARQ protocol also provides [[flow control (data)|flow control]], which may be combined with [[congestion avoidance]]. \n\nUDP is a very simple protocol, and does not provide virtual circuits, nor reliable communication, delegating these functions to the [[application software|application]] program. UDP packets are called [[datagram]]s, rather than segments. \n\nTCP is used for many protocols, including [[HTTP]] web browsing and email transfer. UDP may be used for [[multicasting]] and [[Broadcasting (networking)|broadcasting]], since retransmissions are not possible to a large amount of hosts. UDP typically gives higher [[throughput]] and shorter latency, and is therefore often used for real-time multimedia communication where packet loss occasionally can be accepted, for example IP-TV and IP-telephony, and for online computer games.\n\nMany non-IP-based networks, such as [[X.25]], [[Frame Relay]] and [[Asynchronous Transfer Mode|ATM]], implement the connection-oriented communication at the network or data link layer rather than the transport layer. In X.25, in telephone network modems and in wireless communication systems, reliable node-to-node communication is implemented at lower protocol layers. \n\nThe OSI connection-mode transport layer protocol specification defines five classes of transport protocols: ''TP0'', providing the least error recovery, to ''TP4'', which is designed for less reliable networks.\n\n==Protocols==\nThis list shows some protocols that are commonly placed in the transport layers of the [[Internet protocol suite]], the [[OSI protocols|OSI protocol suite]], [[NetWare]]'s [[IPX/SPX]], [[AppleTalk]], and [[Fibre Channel]].\n\n{{Div col||30em}}\n* ATP, [[AppleTalk|AppleTalk Transaction Protocol]]\n* CUDP, [[Cyclic UDP]]\n* DCCP, [[Datagram Congestion Control Protocol]]\n* FCP, [[Fibre Channel Protocol]]\n* IL, [[IL Protocol]]\n* MPTCP, [[Multipath TCP]]\n* RDP, [[Reliable Datagram Protocol]]\n* RUDP, [[Reliable User Datagram Protocol]]\n* SCTP, [[Stream Control Transmission Protocol]]\n* SPX, [[IPX/SPX|Sequenced Packet Exchange]]\n* SST, [[Structured Stream Transport]]\n* TCP, [[Transmission Control Protocol]]\n* UDP, [[User Datagram Protocol]]\n* [[UDP-Lite]]\n* \u00b5TP, [[Micro Transport Protocol]]\n{{Div col end}}\n\n== {{Anchor|COMPARISON1}}Comparison of transport layer protocols ==\n{| class=\"wikitable\"\n|-\n! Feature Name\n! [[User Datagram Protocol|UDP]]\n! [[UDP-Lite]]\n! [[Transmission Control Protocol|TCP]]\n! [[Multipath TCP]]\n! [[SCTP]]\n! [[DCCP]]\n! [[Reliable User Datagram Protocol|RUDP]]\n|-\n| Packet header size\n| 8 bytes\n| 8 bytes\n| 20\u201360 bytes\n| 50\u201390 bytes\n| 12 bytes\n| 12 or 16 bytes\n| 6+ bytes\n|-\n| Transport layer packet entity\n| Datagram\n| Datagram\n| Segment\n| Segment\n| Datagram\n| Datagram\n| Datagram\n|-\n| Connection oriented\t\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n|-\n| Reliable transport\t\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{No}}\n| {{Yes}}\n|-\n| Unreliable transport\n| {{Yes}}\n| {{Yes}}\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n|-\n| Preserve message boundary\n| {{Yes}}\n| {{Yes}}\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n|-\n| Ordered delivery\t\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{No}}\n| {{Yes}}\n|-\n| Unordered delivery\n| {{Yes}}\n| {{Yes}}\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n|-\n| Data [[checksum]]\t\n| Optional\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| Optional\n|-\n| Checksum size (bits)\n| 16\n| 16\n| 16\n| 16\n| 32\n| 16\n| 16\n|-\n| Partial [[checksum]]\n| {{No}}\n| {{Yes}}\n| {{No}}\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{No}}\n|-\n| Path [[Maximum transmission unit|MTU]]\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| Unsure\n|-\n| [[Flow control (data)|Flow control]]\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{No}}\n| {{Yes}}\n|-\n| [[Congestion control]]\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| Unsure\n|-\n| [[Explicit Congestion Notification]]\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n|\n|-\n| Multiple [[Stream (computing)|streams]]\n| {{No}}\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{No}}\n| {{No}}\n|-\n| [[Multi-homing]]\n| {{No}}\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{No}}\n| {{No}}\n|-\n| Bundling / [[Nagle's algorithm|Nagle]]\t\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{No}}\n| Unsure\n|}\n\n== {{Anchor|COMPARISON2}}Comparison of OSI transport protocols ==\nISO/IEC 8073/ITU-T Recommendation X.224, \"Information Technology - Open Systems Interconnection - Protocol for providing the connection-mode transport service\", defines five classes of connection-mode transport protocols designated class 0 (TP0) to class 4 (TP4).  Class 0 contains no error recovery, and was designed for use on network layers that provide error-free connections. Class 4 is closest to TCP, although TCP contains functions, such as the graceful close, which OSI assigns to the session layer.  All OSI connection-mode protocol classes provide expedited data and preservation of record boundaries.  Detailed characteristics of the classes are shown in the following table:<ref>{{cite web\n| title = ITU-T Recommendation X.224 (11/1995) ISO/IEC 8073\n| url = http://www.itu.int/rec/T-REC-X.224-199511-I/en/\n}}</ref> \n\n{| class=\"wikitable\" border=\"1\"\n|-\n! Service\n! TP0\n! TP1\n! TP2\n! TP3\n! TP4\n|-\n| Connection oriented network\t\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n|-\n| Connectionless network\n| {{No}}\n| {{No}}\n| {{No}}\n| {{No}}\n| {{Yes}}\n|-\n| Concatenation and separation\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n|-\n| Segmentation and reassembly\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n|-\n| Error Recovery\n| {{No}}\n| {{Yes}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n|-\n| Reinitiate connection (if an excessive number of [[Protocol data unit|PDUs]] are unacknowledged)\n| {{No}}\n| {{Yes}}\n| {{No}}\n| {{Yes}}\n| {{No}}\n|-\n| multiplexing and demultiplexing over a single [[virtual circuit]]\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n|-\n| Explicit flow control\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n|-\n| Retransmission on timeout\n| {{No}}\n| {{No}}\n| {{No}}\n| {{No}}\n| {{Yes}}\n|-\n| Reliable Transport Service\n| {{No}}\n| {{Yes}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n|}\n\nThere is also a connectionless transport protocol, specified by ISO/IEC 8602/ITU-T Recommendation X.234.<ref>{{cite web\n| title = ITU-T Recommendation X.234 (07/1994) ISO/IEC 8602\n| url = http://www.itu.int/rec/T-REC-X.234-199407-I/en/\n}}</ref>\n\n==References==\n{{reflist}}\n\n==External links==\n{{Wikiversity | Transport layer}}\n\n[[Category:Internet protocols]]\n[[Category:Transport layer protocols| ]]\n[[Category:OSI protocols]]"}]}}}}