{"batchcomplete":"","query":{"normalized":[{"from":"spreadsheet","to":"Spreadsheet"}],"pages":{"27686":{"pageid":27686,"ns":0,"title":"Spreadsheet","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"A '''spreadsheet''' is an interactive [[application software|computer application]] for organization, analysis and storage of [[data]] in [[table (information)|tabular]] form.<ref>{{cite web|title=spreadsheet|url=http://www.merriam-webster.com/dictionary/spreadsheet|website=merriam-webster.com|publisher=[[Merriam-Webster]]|accessdate=23 June 2016}}</ref><ref>{{cite book|title=American Heritage Dictionary of the English Language|date=2011|publisher=Houghton Mifflin Harcourt Publishing Company|edition=5th|quote=A software interface consisting of an interactive grid made up of cells in which data or formulas are entered for analysis or presentation.}}</ref><ref>{{cite book|title=Collins English Dictionary \u2013 Complete and Unabridged|date=2014|publisher=HarperCollins Publishers|edition=12th|quote=(Computer Science) a computer program that allows easy entry and manipulation of figures, equations, and text, used esp for financial planning and budgeting}}</ref> Spreadsheets are developed as computerized simulations of paper accounting [[worksheet]]s.<ref>{{cite web|title=spreadsheet|url=http://whatis.techtarget.com/definition/spreadsheet|website=WhatIs.com|publisher=[[TechTarget]]|accessdate=23 June 2016}}</ref> The program operates on data entered in cells of a table. Each cell may contain either numeric or text data, or the results of [[formula]]s that automatically calculate and display a value based on the contents of other cells. A spreadsheet may also refer to one such electronic document.<ref>{{cite web|title=spreadsheet|url=http://www.dictionary.com/browse/spreadsheet|website=Dictionary.com Unabridged|publisher=Random House, Inc|accessdate=23 June 2016}}</ref><ref>{{cite web|last1=Beal|first1=Vangie|title=spreadsheet|url=http://www.webopedia.com/TERM/S/spreadsheet.html|website=webopedia|publisher=[[QuinStreet]]|accessdate=23 June 2016}}</ref><ref>{{cite web|title=Spreadsheet|url=http://www.computerhope.com/jargon/s/spreadsh.htm|website=Computer Hope|accessdate=23 June 2016}}</ref>\n\nSpreadsheet users can adjust any stored value and observe the effects on calculated values. This makes the spreadsheet useful for \"what-if\" analysis since many cases can be rapidly investigated without manual recalculation. Modern spreadsheet software can have multiple interacting sheets, and can display data either as text and numerals, or in graphical form.\n\nBesides performing basic arithmetic and mathematical functions, modern spreadsheets provide built-in functions for common financial and statistical operations. Such calculations as [[net present value]] or [[standard deviation]] can be applied to tabular data with a pre-programmed function in a formula. Spreadsheet programs also provide conditional expressions, functions to convert between text and numbers, and functions that operate on [[String (computer science)|strings]] of text.\n\nSpreadsheets have replaced paper-based systems throughout the business world. Although they were first developed for accounting or bookkeeping tasks, they now are used extensively in any context where tabular lists are built, sorted, and shared.\n\nLANPAR, available in 1969,<ref name=\":0\">{{Cite book|url=https://books.google.com/books?id=ms--K3jipt4C&pg=PT149&dq=LANPAR&hl=en&sa=X&ved=0ahUKEwjXpOzCnurNAhVFPiYKHR9VCsEQ6AEIOzAG#v=onepage&q=LANPAR&f=false|title=The Grid Book|last=Higgins|first=Hannah|date=2009-01-01|publisher=MIT Press|isbn=9780262512404|language=en}}</ref> was the first electronic spreadsheet on mainframe and time sharing computers. LANPAR was an acronym: LANguage for Programming Arrays at Random.<ref name=\":0\" /> [[VisiCalc]] was the first electronic spreadsheet on a microcomputer,<ref>[http://www.informationweek.com/whats-the-greatest-software-ever-written/d/d-id/1046033? Charles Babcock, \"What's The Greatest Software Ever Written?\", ''Information Week'', 11 Aug 2006]. Accessed 25 June 2014</ref> and it helped turn the [[Apple II series|Apple II computer]] into a popular and widely used system. [[Lotus 1-2-3]] was the leading spreadsheet when [[DOS]] was the dominant operating system.<ref>{{cite web |title=The Executive computer; Lotus 1-2-3 Faces Up to the Upstarts |url=http://www.nytimes.com/1988/03/13/business/the-executive-computer-lotus-1-2-3-faces-up-to-the-upstarts.html?pagewanted=all&src=pm | accessdate=2012-10-14| website=[[NYTimes.com]] |publisher=[[The New York Times Company]] | date= 1988-03-13 | first=Peter H. | last=Lewis |quote=Release 3.0 is being written in the computer language known as C, to provide easy transportability among PCs, Macs and mainframes.}}</ref> [[Microsoft Excel|Excel]] now has the largest market share on the [[Microsoft Windows|Windows]] and [[Macintosh]] platforms.<ref>{{cite web |url=http://knowledge.wharton.upenn.edu/article.cfm?articleid=1795 |title=Rivals Set Their Sights on Microsoft Office: Can They Topple the Giant?&nbsp;\u2013Knowledge@Wharton |publisher=Wharton, University of Pennsylvania |accessdate=2010-08-20}}</ref><ref>{{cite web |url=http://www.utdallas.edu/%7Eliebowit/book/sheets/sheet.html |title=spreadsheet analysis from winners, losers, and Microsoft |website=Utdallas.edu |accessdate=2010-08-20}}</ref><ref>{{cite web |url=http://www.utdallas.edu/%7Eliebowit/book/wordprocessor/word.html |title=A |website=Utdallas.edu |accessdate=2010-08-20}}</ref> A spreadsheet program is a standard feature of an [[Productivity software|office productivity suite]]; since the advent of [[web application|web apps]], office suites now also exist in web app form.\n\n== Usage ==\n[[File:OpenOffice.org Calc.png|thumb|400px|alt=basic spreadsheet with toolbar|[[OpenOffice.org Calc]] spreadsheet]]\nA spreadsheet consists of a table of ''cells'' arranged into rows and columns and referred to by the X and Y locations. X locations, the columns, are normally represented by letters, \"A\", \"B\", \"C\", etc., while rows are normally represented by numbers, 1, 2, 3, etc. A single cell can be referred to by addressing its row and column, \"C10\" for instance. This system of cell references was introduced in VisiCalc, and known as \"A1 notation\". Additionally, spreadsheets have the concept of a ''range'', a group of cells, normally contiguous. For instance, one can refer to the first ten cells in the first column with the range \"A1:A10\".\n\nIn modern spreadsheet applications, several spreadsheets, often known as ''worksheets'' or simply ''sheets'', are gathered together to form a ''workbook''. A workbook is physically represented by a file, containing all the data for the book, the sheets and the cells with the sheets. Worksheets are normally represented by tabs that flip between pages, each one containing one of the sheets, although [[Numbers (spreadsheet)|Numbers]] changes this model significantly. Cells in a multi-sheet book add the sheet name to their reference, for instance, \"Sheet 1!C10\". Some systems extend this syntax to allow cell references to different workbooks.\n\nUsers interact with sheets primarily through the cells. A given cell can hold data by simply entering it in, or a formula, which is normally created by preceding the text with an equals sign. Data might include the string of text <code>hello world</code>, the number <code>5</code> or the date <code>16-Dec-91</code>. A formula would begin with the equals sign, <code>=5*3</code>, but this would normally be invisible because the display shows the ''result'' of the calculation, <code>15</code> in this case, not the formula itself. This may lead to confusion in some cases.\n\nThe key feature of spreadsheets is the ability for a formula to refer to the contents of other cells, which may in turn be the result of a formula. To make such a formula, one simply replaces a number with a cell reference. For instance, the formula <code>=5*C10</code> would produce the result of multiplying the value in cell C10 by the number 5. If C10 holds the value <code>3</code> the result will be <code>15</code>. But C10 might also hold its own formula referring to other cells, and so on.\n\nThe ability to chain formulas together is what gives a spreadsheet its power. Many problems can be broken down into a series of individual mathematical steps, and these can be assigned to individual formulas in cells. Some of these formulas can apply to ranges as well, like the <code>SUM</code> function that adds up all the numbers within a range.\n\nSpreadsheets share many principles and traits of [[database]]s, but spreadsheets and databases are not the same thing. A spreadsheet is essentially just one table, whereas a database is a collection of many tables with [[Machine-readable medium|machine-readable]] semantic relationships between them. While it is true that a workbook that contains three sheets is indeed a file containing multiple tables that can interact with each other, it lacks the [[relational model|relational structure]] of a database. Spreadsheets and databases are interoperable\u2014sheets can be [[import and export of data|imported]] into databases to become tables within them, and database queries can be exported into spreadsheets for further analysis.\n\nA spreadsheet program is one of the main components of an [[office suite|office productivity suite]], which usually also contains a [[word processor]], a [[presentation program]], and a [[database]] management system. Programs within a suite use similar commands for similar functions. Usually sharing data between the components is easier than with a non-integrated collection of functionally equivalent programs. This was particularly an advantage at a time when many personal computer systems used text-mode displays and commands, instead of a [[graphical user interface]].\n\n== History ==\n\n=== Paper spreadsheets ===\nThe word \"spreadsheet\" came from \"spread\" in its sense of a newspaper or magazine item (text or graphics) that covers two facing pages, extending across the center fold and treating the two pages as one large one. The compound word \"spread-sheet\" came to mean the format used to present book-keeping ledgers\u2014with columns for categories of expenditures across the top, invoices listed down the left margin, and the amount of each payment in the cell where its row and column intersect\u2014which were, traditionally, a \"spread\" across facing pages of a bound ledger (book for keeping accounting records) or on oversized sheets of paper (termed \"analysis paper\") ruled into rows and columns in that format and approximately twice as wide as ordinary paper.<ref name=\"sshistory\">{{Cite web |url=http://dssresources.com/history/sshistory.html |last=Power |first=D. J. |title=A Brief History of Spreadsheets |website=DSSResources.COM |edition=3.6 |date=30 August 2004 |accessdate=25 June 2014}}</ref>\n\n=== Early implementations ===\n\n==== Batch spreadsheet report generator ====\nA [[batch processing|batch]] \"spreadsheet\" is indistinguishable from a batch compiler with added input data, producing an output report, ''i.e.'', a [[4GL]] or conventional, non-interactive, batch computer program. However, this concept of an electronic spreadsheet was outlined in the 1961 paper \"Budgeting Models and System Simulation\" by [[Richard Mattessich]].<ref>{{cite journal|title=Budgeting Models and System Simulation |first=Richard |last=Mattessich |author-link=Richard Mattessich|journal=The Accounting Review |volume=36 |issue=3 |year=1961 |pages=384\u2013397 |jstor=242869}}</ref> The subsequent work by Mattessich (1964a, Chpt. 9, ''Accounting and Analytical Methods'') and its companion volume, Mattessich (1964b, ''Simulation of the Firm through a Budget Computer Program'') applied computerized spreadsheets to accounting and budgeting systems (on [[mainframe computer]]s programmed in [[FORTRAN IV]]). These batch Spreadsheets dealt primarily with the addition or subtraction of entire columns or rows (of input variables), rather than individual ''cells''.\n\nIn 1962 this concept of the spreadsheet, called BCL for Business Computer Language, was implemented on an [[IBM 1130]] and in 1963 was [[ported]] to an [[IBM 7040]] by R. Brian Walsh at [[Marquette University]], [[Wisconsin]]. This program was written in [[Fortran]]. Primitive [[timesharing]] was available on those machines. In 1968 BCL was ported by Walsh to the [[IBM 360]]/67 timesharing machine at [[Washington State University]]. It was used to assist in the teaching of [[finance]] to business students. Students were able to take information prepared by the [[professor]] and manipulate it to represent it and show ratios etc. In 1964, a book entitled ''Business Computer Language'' was written by Kimball, Stoffells and Walsh and both the book and program were copyrighted in 1966 and years later that copyright was renewed<ref>{{cite web |url= |title=Business Computer Language |accessdate= |author=Brian Walsh |year=1996 |work=IT-Directors.com}}</ref>\n\nApplied Data Resources had a FORTRAN preprocessor called Empires.\n\nIn the late 1960s Xerox used BCL to develop a more sophisticated version for their timesharing system.\n\n==== LANPAR spreadsheet compiler ====\nA key invention in the development of electronic spreadsheets was made by Rene K. Pardo and Remy Landau, who filed in 1970 {{US patent|4398249}} on spreadsheet automatic natural order recalculation [[algorithm]]. While the patent was initially rejected by the patent office as being a purely mathematical invention, following 12 years of appeals, Pardo and Landau won a landmark court case at the CCPA (Predecessor Court of the Federal Circuit) overturning the Patent Office in 1983\u2014establishing that \"something does not cease to become patentable merely because the point of novelty is in an algorithm.\" However, in 1995 the [[United States Court of Appeals for the Federal Circuit]] ruled the patent unenforceable.<ref>{{cite web|url=http://www.ll.georgetown.edu/Federal/judicial/fed/opinions/95opinions/95-1350.html |title=Refac v. Lotus |publisher=Ll.georgetown.edu |accessdate=2010-08-20}}</ref>\n\nThe actual software was called LANPAR \u2014 LANguage for Programming Arrays at Random.<ref>This may be a [[backronym]], as \"LANPAR is also a [[portmanteau]] of he developers' surnames, \"''Lan''dau\" and \"''Par''do\"</ref> This was conceived and entirely developed in the summer of 1969 following Pardo and Landau's recent graduation from Harvard University. Co-inventor Rene Pardo recalls that he felt that one manager at Bell Canada should not have to depend on programmers to program and modify budgeting forms, and he thought of letting users type out forms in any order and having computer calculating results in the right order (\"Forward Referencing/Natural Order Calculation\"). Pardo and Landau developed and implemented the software in 1969.<ref>{{cite web|url=http://www.renepardo.com|title=Rene Pardo \u2013 Personal Web Page|work=renepardo.com}}</ref>\n\nLANPAR was used by Bell Canada, AT&T and the 18 operating telcos nationwide for their local and national budgeting operations. LANPAR was also used by General Motors. Its uniqueness was Pardo's co-invention incorporating forward referencing/natural order calculation (one of the first \"non-procedural\" computer languages) <ref>http://www.renepardo.com/articles/spreadsheet.pdf</ref> as opposed to left-to-right, top to bottom sequence for calculating the results in each cell that was used by VisiCalc, [[Supercalc]], and the first version of Multiplan. Without forward referencing/natural order calculation, the user had to manually recalculate the spreadsheet as many times as necessary until the values in all the cells had stopped changing. Forward Referencing/Natural Order Calculation by a compiler was the cornerstone functionality required for any spreadsheet to be practical and successful.\n\nThe LANPAR system was implemented on GE400 and Honeywell 6000 online timesharing systems enabling users to program remotely via computer terminals and modems. Data could be entered dynamically either by paper tape, specific file access, on line, or even external data bases. Sophisticated mathematical expressions including logical comparisons and \"if/then\" statements could be used in any cell, and cells could be presented in any order.\n\n==== Autoplan/Autotab spreadsheet programming language ====\nIn 1968, three former employees from the [[General Electric]] computer company headquartered in [[Phoenix, Arizona]] set out to start their own software development house. A. Leroy Ellison, Harry N. Cantrell, and Russell E. Edwards found themselves doing a large number of calculations when making tables for the business plans that they were presenting to venture capitalists. They decided to save themselves a lot of effort and wrote a computer program that produced their tables for them. This program, originally conceived as a simple utility for their personal use, would turn out to be the first software product offered by the company that would become known as [[Capex Corporation]]. \"AutoPlan\" ran on GE\u2019s [[Time-sharing]] service; afterward, a version that ran on [[IBM mainframe]]s was introduced under the name ''AutoTab''. ([[National CSS]] offered a similar product, CSSTAB, which had a moderate timesharing user base by the early 1970s. A major application was opinion research tabulation.)\n\nAutoPlan/AutoTab was not a [[WYSIWYG]] [[interactive]] spreadsheet program, it was a simple scripting language for spreadsheets. The user defined the names and labels for the rows and columns, then the formulas that defined each row or column. In 1975, Autotab-II was advertised as extending the original to a maximum of \"''1,500 rows and columns, combined in any proportion the user requires...''\"<ref>[https://books.google.com/books?id=PPeM_JUhUqEC&pg=PA19&lpg=PA19&dq=autotab-iI&source=bl&ots=-aGsSzb8VP&sig=byBwwRhRG2tDlbWq_Bv8MEWmeuY&hl=en&sa=X&ved=0ahUKEwjA1-2goazNAhXHQpQKHe6qDKQQ6AEIHjAB#v=onepage&q=autotab-iI&f=false \"'Autotab' Update Extends Former Matrix Size Limits\"], 28 May 1975, p19, Computerworld</ref>\n\n==== IBM Financial Planning and Control System ====\nThe IBM Financial Planning and Control System was developed in 1976, by [[Brian Ingham]] at [[IBM]] Canada. It was implemented by IBM in at least 30 countries. It ran on an [[IBM mainframe]] and was among the first applications for [[financial]] planning developed with [[APL (programming language)|APL]] that completely hid the programming language from the end-user. Through IBM's [[VM operating system]], it was among the first programs to auto-update each copy of the [[application software|application]] as new versions were released. Users could specify simple mathematical relationships between rows and between columns. Compared to any contemporary alternatives, it could support very large spreadsheets. It loaded actual [[financial]] [[data]] drawn from the legacy batch system into each user's spreadsheet on a monthly basis. It was designed to optimize the power of APL through [[object kernels]], increasing program efficiency by as much as 50 fold over traditional programming approaches.\n\n==== APLDOT modeling language ====\nAn example of an early \"industrial weight\" spreadsheet was APLDOT, developed in 1976 at the [[United States Railway Association]] on an IBM 360/91, running at The Johns Hopkins University Applied Physics Laboratory in Laurel, MD.<ref>[http://portal.acm.org/citation.cfm?id=390005.801196 portal.acm.org] \u2013 APLDOT</ref> The application was used successfully for many years in developing such applications as financial and costing models for the US Congress and for [[Conrail]]. APLDOT was dubbed a \"spreadsheet\" because financial analysts and strategic planners used it to solve the same problems they addressed with paper spreadsheet pads.\n\n=== VisiCalc ===\n[[File:Visicalc.png|thumb|VisiCalc running on an Apple II]]\n\nBecause of [[Dan Bricklin]] and [[Bob Frankston]]'s implementation of [[VisiCalc]] on the [[Apple II]] in 1979 and the [[IBM PC]] in 1981, the spreadsheet concept became widely known in the late 1970s and early 1980s. VisiCalc was the first spreadsheet that combined all essential features of modern spreadsheet applications (except for forward referencing/natural order recalculation), such as [[WYSIWYG]] interactive user interface, automatic recalculation, status and formula lines, range copying with relative and absolute references, formula building by selecting referenced cells. Unaware of LANPAR at the time ''[[PC World]]'' magazine called VisiCalc the first electronic spreadsheet.<ref>[http://www.pcworld.com/article/id,116166/article.html PC World&nbsp;\u2013 Three Minutes: Godfathers of the Spreadsheet<!-- Bot generated title -->]</ref>\n\nBricklin has spoken of watching his university professor create a table of calculation results on a blackboard. When the professor found an error, he had to tediously erase and rewrite a number of sequential entries in the table, triggering Bricklin to think that he could replicate the process on a computer, using the blackboard as the model to view results of underlying formulas. His idea became VisiCalc, the first [[Application software|application]] that turned the [[personal computer]] from a hobby for computer enthusiasts into a business tool.\n\nVisiCalc went on to become the first [[killer app]],<ref>Power, D.J., ''[http://www.dssresources.com/history/sshistory.html A Brief History of Spreadsheets]'', DSSResources.COM, v3.6, 8 August 2004</ref><ref name=\"cacASU\">\"Killer Applications\" (overview), Partha gawaargupta. [[Arizona State University]] in Tempe, Arizona, May 2002, Web page: [http://cactus.eas.asu.edu/partha/Columns/2002/07-01-killer-app.htm ASU-killer-app].</ref> an application that was so compelling, people would buy a particular computer just to use it. VisiCalc was in no small part responsible for the [[Apple II]]'s success. The program was later [[ported]] to a number of other early computers, notably [[CP/M]] machines, the [[Atari 8-bit family]] and various [[Commodore International|Commodore]] platforms. Nevertheless, VisiCalc remains best known as an Apple II program.\n\n=== SuperCalc ===\n\nSuperCalc was a spreadsheet application published by Sorcim in 1980, and originally bundled (along with WordStar) as part of the CP/M software package included with the Osborne 1 portable computer. It quickly became the de facto standard spreadsheet for CP/M and was ported to MS-DOS in 1982.\n\n=== Lotus 1-2-3 and other MS-DOS spreadsheets ===\nThe acceptance of the [[IBM PC]] following its introduction in August, 1981, began slowly, because most of the programs available for it were translations from other computer models. Things changed dramatically with the introduction of [[Lotus 1-2-3]] in November, 1982, and release for sale in January, 1983. Since it was written especially for the IBM PC, it had good performance and became the killer app for this PC. Lotus 1-2-3 drove sales of the PC due to the improvements in speed and graphics compared to VisiCalc on the Apple II.<ref>{{cite web|url=https://archive.org/stream/Whole_Earth_Software_Catalog_for_1986_1985_Point/Whole_Earth_Software_Catalog_for_1986_1985_Point_djvu.txt|title=Whole Earth Software Catalog|quote=Some say that half of all IBM PCs, in their hundreds of thousands, are running just 1-2-3. Numbers\u2014 clever, quick, knowledgeable\u2014 boiling the stupidity out of countless business decisions. Interesting how essential the quickness is. It's 1-2-3's speed that put it on top.}}</ref>\n\nLotus 1-2-3, along with its competitor [[Borland]] [[Quattro Pro|Quattro]], soon displaced VisiCalc. Lotus 1-2-3 was released on January 26, 1983, started outselling then-most-popular [[VisiCalc]] the very same year, and for a number of years was the leading spreadsheet for [[DOS]].\n\n=== Microsoft Excel ===\n[[Microsoft]] released the first version of [[Microsoft Excel|Excel]] for the Macintosh on September 30, 1985, and then ported<ref>{{cite book |last1=Liebowitz |first1=Stan |last2=Margolis |first2=Stephen |year=2001 |chapter=6 |editor1-last=Ellig |editor1-first=Jerome |title=Dynamic Competition and Public Policy: Technology, Innovation, and Antitrust Issues |url=https://books.google.com/books?id=ynmOndJFoeQC&pg=PA171&lpg=PA171&dq=microsoft+ported+excel+windows+1987&source=bl&ots=RHbdl3Fec1&sig=zC6ht-MfeI0CU9t56JIdfnfo5js&hl=en&sa=X&ei=CBhuVJHDEYyCigKA0YDgDg&ved=0CB4Q6AEwAA#v=onepage&q=microsoft%20ported%20excel%20windows%201987&f=false |location=Cambridge |publisher=Cambridge University Press |page=171 |isbn=978-0-521-78250-0 }}</ref> it to Windows, with the first version being numbered 2.05 (to synchronize with the Macintosh version 2.2) and released in November 1987. The Windows 3.x platforms of the early 1990s made it possible for Excel to take market share from Lotus. By the time Lotus responded with usable Windows products, Microsoft had begun to assemble their [[Microsoft Office|Office]] suite. By 1995, Excel was the market leader, edging out Lotus 1-2-3,<ref name=\"sshistory\" /> and in 2013, IBM discontinued Lotus-1-2-3 altogether.<ref>{{cite web |url=http://www.zdnet.com/goodbye-lotus-1-2-3-7000015385/ |title=Goodbye, Lotus 1-2-3 |last1=Vaughan-Nichols |first1=Steven J. |date=15 May 2013 |website=zdnet.com |publisher=[[CBS Interactive]] |accessdate=24 July 2014}}</ref>\n\n=== Open source software ===\n[[Gnumeric]] is a [[free software|free]], [[cross-platform]] spreadsheet program that is part of the [[GNOME]] Free Software Desktop Project. [[OpenOffice.org Calc]] and the very closely related [[LibreOffice Calc]] (using the [[GNU Lesser General Public License|LGPL]] license) are free and open-source spreadsheets.\n\n=== Web based spreadsheets ===\n{{main article|List of online spreadsheets}}\nWith the advent of advanced [[World Wide Web|web]] technologies such as [[Ajax (programming)|Ajax]] circa 2005, a new generation of [[List of online spreadsheets|online spreadsheets]] has emerged. Equipped with a [[rich Internet application]] user experience, the best web based online spreadsheets have many of the features seen in desktop spreadsheet applications. Some of them such as [[EditGrid]], [[Google Spreadsheets|Google Sheets]], [[Office Online|Microsoft Excel Online]], [[Smartsheet]], [[ZK Spreadsheet (Web Application)|ZK Spreadsheet]], or [[Zoho Office Suite]] also have strong multi-user collaboration features and/or offer [[Real time business intelligence|real time]] updates from remote sources such as [[stock price]]s and currency [[exchange rate]]s.\n\n=== Other spreadsheets ===\nNotable current spreadsheet software:\n*[[KSpread|Calligra Sheets]] (formerly KCalc)\n*[[Corel]] [[Quattro Pro]] ([[WordPerfect Office]])\n*[[Kingsoft Spreadsheets]]\n*[[Mariner Calc]] and [[Calc XLS]] are [[Mariner Software]]'s spreadsheet applications for [[Mac OS X]] and [[iOS]].\n*[[NeoOffice]]\n*[[Numbers (software)|Numbers]] is [[Apple Inc.]]'s spreadsheet software, part of [[iWork]].\n*[[Pyspread]]\n*[[ZCubes]]-Calc\nDiscontinued spreadsheet software:\n*[[3D-Calc]] for [[Atari ST]] computers\n*[[Framework (office suite)|Framework]] by [[Forefront Corporation]]/[[Ashton-Tate]] (1983/84)\n*[[GNU Oleo]]&nbsp;\u2013 A traditional terminal mode spreadsheet for UNIX/UNIX-like systems\n*[[IBM Lotus Symphony]] (2007)\n*[[Javelin Software]]\n*[[KCells]]\n*[[Lotus Improv]]<ref>{{cite web|url=http://simson.net/clips/91.MIPS.ImprovPowerStep.html |title=Improv and PowerStep |accessdate=2010-08-20 |archiveurl= https://web.archive.org/web/20020606140158/http://simson.net/clips/91.MIPS.ImprovPowerStep.html |archivedate= 2002-06-06}}</ref>\n*[[Lotus Jazz]] for Macintosh\n*[[Lotus Symphony for DOS|Lotus Symphony]] (1984)\n*[[MultiPlan]]\n*Claris' [[Claris Resolve|Resolve]] (Macintosh)\n*[[Resolver One]]\n*Borland's [[Quattro Pro]]\n*[[Siag Office|SIAG]]\n*[[SuperCalc]]\n*[[T/Maker]]\n*Target Planner Calc for CP/M and TRS-DOS<ref>{{cite web|url=http://query.nytimes.com/gst/fullpage.html?res=940DE4DF1138F930A25750C0A96E948260|title=THE EXECUTIVE COMPUTER \u2013 Lotus 1-2-3 Faces Up to the Upstarts \u2013 NYTimes.com|date=13 March 1988|work=nytimes.com}}</ref><ref>{{cite web|url=http://vip.hex.net/~cbbrowne/spreadsheets.html|archiveurl=https://web.archive.org/web/20020806213619/vip.hex.net/~cbbrowne/spreadsheets.html |title=Linux Spreadsheets|archivedate=6 August 2002|work=hex.net}}</ref>\n*Trapeze for Macintosh<ref name=\"Trapeze\" />\n*[[Informix Wingz|Wingz]] for Macintosh\n\n=== Other products ===\nA number of companies have attempted to break into the spreadsheet market with programs based on very different paradigms. Lotus introduced what is likely the most successful example, [[Lotus Improv]], which saw some commercial success, notably in the financial world where its powerful [[data mining]] capabilities remain well respected to this day.\n\n[[Spreadsheet 2000]] attempted to dramatically simplify formula construction, but was generally not successful.\n\n== Concepts ==\nThe main concepts are those of a grid of [[table cell|cells]], called a sheet, with either raw data, called values, or formulas in the cells. Formulas say how to mechanically compute new values from existing values. Values are generally numbers, but can also be pure text, dates, months, etc. Extensions of these concepts include logical spreadsheets. Various tools for programming sheets, visualizing data, remotely connecting sheets, displaying cells' dependencies, etc. are commonly provided.\n\n=== Cells ===\nA '''\"cell\"''' can be thought of as a box for holding [[data]]. A single cell is usually referenced by its column and row (A2 would represent the cell containing the value 10 in the example table below). Usually rows, representing the [[dependent and independent variables|dependent variables]], are referenced in [[decimal notation]] starting from 1, while columns representing the [[dependent and independent variables|independent variables]] use 26-adic [[bijective numeration]] using the letters A-Z as numerals. Its physical size can usually be tailored to its content by dragging its height or width at box intersections (or for entire columns or rows by dragging the column- or row-headers).\n\n{| border=\"1\"\n|+ '''My Spreadsheet'''\n!   !!  A !!  B !! C  !!  D\n|-\n!01 !!  value1 !!  value2 !! added  !!  multiplied\n|-\n!02 !! 10  ||  20 ||  '''30''' || 200\n|}\n\nAn array of cells is called a ''sheet'' or ''worksheet''. It is analogous to an array of [[Variable (programming)|variables]] in a conventional [[computer program]] (although certain unchanging values, once entered, could be considered, by the same analogy, [[constant (computer science)|constants]]). In most implementations, many worksheets may be located within a single spreadsheet. A worksheet is simply a subset of the spreadsheet divided for the sake of clarity. Functionally, the spreadsheet operates as a whole and all cells operate as [[global variable]]s within the spreadsheet (each variable having 'read' access only except its own containing cell).\n\nA cell may contain a [[Value (computer science)|value]] or a [[formula]], or it may simply be left empty.\nBy convention, formulas usually begin with '''=''' sign.\n\n==== Values ====\nA value can be entered from the computer keyboard by directly typing into the cell itself. Alternatively, a value can be based on a formula (see below), which might perform a calculation, display the current date or time, or retrieve external data such as a stock quote or a database value.\n\n<blockquote>'''The Spreadsheet ''Value Rule'''''\n\nComputer scientist [[Alan Kay]] used the term ''value rule'' to summarize a spreadsheet's operation: a cell's value relies solely on the formula the user has typed into the cell.<ref>{{cite journal | last=Kay | first=Alan | authorlink=Alan Kay | title=Computer Software | journal =Scientific American | volume =251 | issue =3 | pages =52\u201359 |date=September 1984 | doi=10.1038/scientificamerican0984-52  | pmid=6390676 | last2=Goldstein | first2=JL}} \u2013 Value Rule</ref> The formula may rely on the value of other cells, but those cells are likewise restricted to user-entered data or formulas. There are no 'side effects' to calculating a formula: the only output is to display the calculated result inside its occupying cell. There is no natural mechanism for permanently modifying the contents of a cell unless the user manually modifies the cell's contents. In the context of programming languages, this yields a limited form of first-order [[functional programming]].<ref>{{cite journal|last=Burnett |first=Margaret |last2=Atwood |first2=J. |last3=Walpole Djang |first3=R. |last4=Reichwein |first4=J. |last5=Gottfried |first5=H. |last6=Yang |first6=S. |title=Forms/3: A first-order visual language to explore the boundaries of the spreadsheet paradigm |journal=Journal of Functional Programming |volume=11 |issue=2 |pages=155\u2013206 |date=March 2001 |url=http://journals.cambridge.org/action/displayAbstract?aid=72731 |accessdate=2008-06-22}}</ref>\n</blockquote>\n\n==== Automatic recalculation ====\nA standard of spreadsheets since the 1980s, this optional feature eliminates the need to manually request the spreadsheet program to recalculate values (nowadays typically the default option unless specifically 'switched off' for large spreadsheets, usually to improve performance). Some earlier spreadsheets required a manual request to recalculate, since recalculation of large or complex spreadsheets often reduced data entry speed. Many modern spreadsheets still retain this option.\n\nRecalculation generally requires that there are no [[circular dependency|circular dependencies]] in a spreadsheet. A [[dependency graph]] is a graph that has a vertex for each object to be updated, and an edge connecting two objects whenever one of them needs to be updated earlier than the other. Dependency graphs without circular dependencies form [[directed acyclic graph]]s, representations of partial orderings (in this case, across a spreadsheet) that can be relied upon to give a definite result.<ref>{{citation |mode=cs1 | last1=Al-Mutawa | first1=H. A. | last2=Dietrich | first2=J. | last3=Marsland | first3=S. | last4=McCartin | first4=C. | contribution=On the shape of circular dependencies in Java programs | doi=10.1109/ASWEC.2014.15 | pages=48\u201357 | publisher=IEEE | title=23rd Australian Software Engineering Conference | year=2014}}</ref>\n\n==== Real-time update ====\nThis feature refers to updating a cell's contents periodically with a value from an external source\u2014such as a cell in a \"remote\" spreadsheet. For shared, Web-based spreadsheets, it applies to \"immediately\" updating cells another user has updated. All dependent cells must be updated also.\n\n==== Locked cell ====\nOnce entered, selected cells (or the entire spreadsheet) can optionally be \"locked\" to prevent accidental overwriting. Typically this would apply to cells containing formulas but might be applicable to cells containing \"constants\" such as a kilogram/pounds conversion factor (2.20462262 to eight decimal places). Even though individual cells are marked as locked, the spreadsheet data are not protected until the feature is activated in the file preferences.\n\n==== Data format ====\nA cell or range can optionally be defined to specify how the value is displayed. The default display format is usually set by its initial content if not specifically previously set, so that for example \"31/12/2007\" or \"31 Dec 2007\" would default to the cell format of ''date''.\nSimilarly adding a % sign after a numeric value would tag the cell as a [[percentage]] cell format. The cell contents are not changed by this format, only the displayed value.\n\nSome cell formats such as \"numeric\" or \"[[currency]]\" can also specify the number of [[decimal place]]s.\n\nThis can allow invalid operations (such as doing multiplication on a cell containing a date), resulting in illogical results without an appropriate warning.\n\n==== Cell formatting ====\nDepending on the capability of the spreadsheet application, each cell (like its counterpart the \"style\" in a [[word processor]]) can be separately formatted using the [[Attribute (computing)|attributes]] of either the content (point size, color, bold or italic) or the cell (border thickness, background shading, color). To aid the readability of a spreadsheet, cell formatting may be conditionally applied to data; for example, a negative number may be displayed in red.\n\nA cell's formatting does not typically affect its content and depending on how cells are referenced or copied to other worksheets or applications, the formatting may not be carried with the content.\n\n==== Named cells ====\n[[File:Named Variables in Excel.PNG|thumb|400px|Use of named column variables ''x'' & ''y'' in [[Microsoft Excel]]. Formula for y=x<sup>2</sup> resembles [[Fortran]], and ''Name Manager'' shows the definitions of ''x'' & ''y''.]]\n\nIn most implementations, a cell, or group of cells in a column or row, can be \"named\" enabling the user to refer to those cells by a name rather than by a grid reference. Names must be unique within the spreadsheet, but when using multiple sheets in a spreadsheet file, an identically named cell range on each sheet can be used if it is distinguished by adding the sheet name. One reason for this usage is for creating or running macros that repeat a command across many sheets. Another reason is that formulas with named variables are readily checked against the algebra they are intended to implement (they resemble Fortran expressions). Use of named variables and named functions also makes the spreadsheet structure more transparent.\n\n===== Cell reference =====\nIn place of a named cell, an alternative approach is to use a cell (or grid) reference. Most cell references indicate another cell in the same spreadsheet, but a cell reference can also refer to a cell in a different sheet within the same spreadsheet, or (depending on the implementation) to a cell in another spreadsheet entirely, or to a value from a remote application.\n\nA typical '''cell reference''' in \"A1\" style consists of one or two case-insensitive letters to identify the column (if there are up to 256 columns: A\u2013Z and AA\u2013IV) followed by a row number (e.g., in the range 1\u201365536). Either part can be relative (it changes when the formula it is in is moved or copied), or absolute (indicated with $ in front of the part concerned of the cell reference). The alternative \"R1C1\" reference style consists of the letter R, the row number, the letter C, and the column number; relative row or column numbers are indicated by enclosing the number in square brackets. Most current spreadsheets use the A1 style, some providing the R1C1 style as a compatibility option.\n\nWhen the computer calculates a formula in one cell to update the displayed value of that cell, cell reference(s) in that cell, naming some other cell(s), cause the computer to fetch the value of the named cell(s).\n\nA cell on the same \"sheet\" is usually addressed as:\n\n =A1\n\nA cell on a different sheet of the same spreadsheet is usually addressed as:\n\n =SHEET2!A1             (that is; the first cell in sheet 2 of same spreadsheet).\n\nSome spreadsheet implementations in [http://www.pdffortran.com/pdf/excel-compliance-templates.pdf Excel] allow a cell references to another spreadsheet (not the current open and active file) on the same computer or a local network. It may also refer to a cell in another open and active spreadsheet on the same computer or network that is defined as shareable. These references contain the complete filename, such as:\n\n ='C:\\Documents and Settings\\Username\\My spreadsheets\\[main sheet]Sheet1!A1\n\nIn a spreadsheet, references to cells automatically update when new rows or columns are inserted or deleted. Care must be taken, however, when adding a row immediately before a set of column totals to ensure that the totals reflect the additional rows values\u2014which they often do not.\n\nA [[circular reference]] occurs when the formula in one cell refers\u2014directly, or indirectly through a chain of cell references\u2014to another cell that refers back to the first cell. Many common errors cause circular references. However, some valid techniques use circular references. These techniques, after many spreadsheet recalculations, (usually) converge on the correct values for those cells.\n\n===== Cell ranges =====\nLikewise, instead of using a named range of cells, a range reference can be used. Reference to a range of cells is typically of the form (A1:A6), which specifies all the cells in the range A1 through to A6. A formula such as \"=SUM(A1:A6)\" would add all the cells specified and put the result in the cell containing the formula itself.\n\n=== Sheets ===\nIn the earliest spreadsheets, cells were a simple two-dimensional grid. Over time, the model has expanded to include a third dimension, and in some cases a series of named grids, called sheets. The most advanced examples allow inversion and rotation operations which can slice and project the data set in various ways.\n\n=== Formulas ===\n[[File:Spreadsheet animation.gif|thumb|right|279px|Animation of a simple spreadsheet that multiplies values in the left column by 2, then sums the calculated values from the right column to the bottom-most cell. In this example, only the values in the <code>A</code> column are entered (10, 20, 30), and the remainder of cells are formulas. Formulas in the <code>B</code> column multiply values from the A column using relative references, and the formula in <code>B4</code> uses the <code>SUM()</code> function to find the [[Summation|sum]] of values in the <code>B1:B3</code> range.]]\n\nA formula identifies the [[calculation]] needed to place the result in the cell it is contained within. A cell containing a formula therefore has two display components; the formula itself and the resulting value. The formula is normally only shown when the cell is selected by \"clicking\" the mouse over a particular cell; otherwise it contains the result of the calculation.\n\nA formula assigns values to a cell or range of cells, and typically has the format:\n{|class=\"wikitable\"\n|-\n|<code>=''expression''</code>\n|}\nwhere the [[Expression (programming)|expression]] consists of:\n*[[Value (computer science)|values]], such as <code>2</code>, <code>9.14</code> or <code>6.67E-11</code>;\n*[[Reference (computer science)|references]] to other cells, such as, e.g., <code>A1</code> for a single cell or <code>B1:B3</code> for a range;\n*[[Operator (programming)|arithmetic operators]], such as <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, and others;\n*[[relational operator]]s, such as <code>>=</code>, <code><</code>, and others; and,\n*[[Function (programming)|functions]], such as <code>SUM()</code>, <code>TAN()</code>, and many others.\n\nWhen a cell contains a formula, it often contains references to other cells. Such a cell reference is a type of variable. Its value is the value of the referenced cell or some derivation of it. If that cell in turn references other cells, the value depends on the values of those. References can be relative (e.g., <code>A1</code>, or <code>B1:B3</code>), absolute (e.g., <code>$A$1</code>, or <code>$B$1:$B$3</code>) or mixed row\u2013 or column-wise absolute/relative (e.g., <code>$A1</code> is column-wise absolute and <code>A$1</code> is row-wise absolute).\n\nThe available options for valid formulas depends on the particular spreadsheet implementation but, in general, most arithmetic operations and quite complex nested conditional operations can be performed by most of today's commercial spreadsheets. Modern implementations also offer functions to access custom-build functions, remote data, and applications.\n\nA formula may contain a condition (or nested conditions)\u2014with or without an actual calculation\u2014and is sometimes used purely to identify and '''highlight errors'''. In the example below, it is assumed the sum of a column of percentages (A1 through A6) is tested for validity and an explicit message put into the adjacent right-hand cell.\n\n:=IF(SUM(A1:A6) > 100, \"More than 100%\", SUM(A1:A6))\n\nFurther examples:\n:=IF(AND(A1<>\"\",B1<>\"\"),A1/B1,\"\") means that if both cells A1 and B1 are not <> empty \"\", then divide A1 by B1 and display, other do not display anything.\n:=IF(AND(A1<>\"\",B1<>\"\"),IF(B1<>0,A1/B1,\"Division by zero\"),\"\") means that if cells A1 and B1 are not empty, and B1 is not zero, then divide A1 by B1, if B1 is zero, then display \"Division by zero, and do not display anything if either A1 and B1 are empty.\n:=IF(OR(A1<>\"\",B1<>\"\"),\"Either A1 or B1 show text\",\"\") means to display the text if either cells A1 or B1 are not empty.\n\nThe best way to build up conditional statements is step by step composing followed by trial and error testing and refining code.\n\nA spreadsheet does not, in fact, have to contain any formulas at all, in which case it could be considered merely a collection of data arranged in rows and columns (a [[database]]) like a calendar, timetable or simple list. Because of its ease of use, formatting and [[hyperlinking]] capabilities, many spreadsheets are used solely for this purpose.\n\n=== Functions ===\n[[File:Functions in Excel.PNG|thumb|400px|Use of user-defined function ''sq(x)'' in [[Microsoft Excel]]. ]]\nSpreadsheets usually contain a number of supplied [[Function (mathematics)|functions]], such as arithmetic operations (for example, summations, averages and so forth), trigonometric functions, statistical functions, and so forth. In addition there is often a provision for ''user-defined functions''. In Microsoft Excel these functions are defined using [[Visual Basic for Applications]] in the supplied Visual Basic editor, and such functions are automatically accessible on the worksheet. In addition, programs can be written that pull information from the worksheet, perform some calculations, and report the results back to the worksheet. In the figure, the name ''sq'' is user-assigned, and function ''sq'' is introduced using the [[Visual Basic for Applications|''Visual Basic'']] editor supplied with Excel. ''Name Manager'' displays the spreadsheet definitions of named variables ''x'' & ''y''.\n\n=== Subroutines ===\n[[File:Subroutine in Excel.PNG|thumb|400px|Subroutine in [[Microsoft Excel]] writes values calculated using ''x'' into ''y''.]]\nFunctions themselves cannot write into the worksheet, but simply return their evaluation. However, in Microsoft Excel, [[subroutine]]s can write values or text found within the subroutine directly to the spreadsheet. The figure shows the Visual Basic code for a subroutine that reads each member of the named column variable ''x'', calculates its square, and writes this value into the corresponding element of named column variable ''y''. The ''y'' column contains no formula because its values are calculated in the subroutine, not on the spreadsheet, and simply are written in.\n\n=== Remote spreadsheet ===\nWhenever a reference is made to a cell or group of cells that are not located within the current physical spreadsheet file, it is considered as accessing a \"remote\" spreadsheet. The contents of the referenced cell may be accessed either on first reference with a manual update or more recently in the case of web based spreadsheets, as a near real time value with a specified automatic refresh interval.\n\n=== Charts ===\n[[File:Excel chart.PNG|thumb|300px|Graph made using Microsoft Excel]]\nMany spreadsheet applications permit [[chart]]s, [[Graph (data structure)|graphs]] or [[histogram]]s to be generated from specified groups of cells that are dynamically re-built as cell contents change. The generated graphic component can either be embedded within the current sheet or added as a separate object.\n\n=== Multi-dimensional spreadsheets ===\nIn the late 1980s and early 1990s, first [[Javelin Software]] and [[Lotus Improv]] appeared. Unlike models in a conventional spreadsheet, they utilized models built on objects called variables, not on data in cells of a report. These multi-dimensional spreadsheets enabled viewing data and [[algorithm]]s in various self-documenting ways, including simultaneous multiple synchronized views. For example, users of Javelin could move through the connections between variables on a diagram while seeing the logical roots and branches of each variable. This is an example of what is perhaps its primary contribution of the earlier Javelin\u2014the concept of traceability of a user's logic or model structure through its twelve views. A complex model can be dissected and understood by others who had no role in its creation.\n\nIn these programs, a [[time series]], or any variable, was an object in itself, not a collection of cells that happen to appear in a row or column. Variables could have many attributes, including complete awareness of their connections to all other variables, data references, and text and image notes. Calculations were performed on these objects, as opposed to a range of cells, so adding two time series automatically aligns them in calendar time, or in a user-defined time frame. Data were independent of worksheets\u2014variables, and therefore data, could not be destroyed by deleting a row, column or entire worksheet. For instance, January's costs are subtracted from January's revenues, regardless of where or whether either appears in a worksheet. This permits actions later used in [[pivot table]]s, except that flexible manipulation of report tables was but one of many capabilities supported by variables. Moreover, if costs were entered by week and revenues by month, the program could allocate or interpolate as appropriate. This object design enabled variables and whole models to reference each other with user-defined variable names, and to perform multidimensional analysis and massive, but easily editable consolidations.\n\nTrapeze,<ref name=\"Trapeze\">{{cite web|title=Trapeze|url=http://basalgangster.macgui.com/RetroMacComputing/The_Long_View/Entries/2011/3/26_Trapeze.html}}</ref> a spreadsheet on the Mac, went further and explicitly supported\nnot just table columns, but also matrix operators.\n\n=== Logical spreadsheets ===\nSpreadsheets that have a formula language based upon [[logic]]al expressions, rather than [[arithmetic]] expressions are known as [[logical spreadsheet]]s. Such spreadsheets can be used to reason [[deductive reasoning|deductively]] about their cell values.\n\n== Programming issues ==\nJust as the early programming languages were designed to generate spreadsheet printouts, programming techniques themselves have evolved to process tables (also known as spreadsheets or [[matrix (mathematics)|matrices]]) of data more efficiently in the computer itself.\n\n=== End-user development ===\nSpreadsheets are a popular [[End-user development]] tool.<ref name=\"Empowering Users\">{{cite web|url=http://www.uxmatters.com/mt/archives/2009/08/empowering-users-to-create-their-own-software.php|title=Empowering Users to Create Their Own Software|author=Peter Hornsby}}</ref> EUD denotes activities or techniques in which people who are not professional developers create automated behavior and complex data objects without significant knowledge of a programming language. Many people find it easier to perform calculations in spreadsheets than by writing the equivalent sequential program. This is due to several traits of spreadsheets.\n*They use [[Space|spatial]] relationships to define program relationships. Humans have highly developed [[intuition (knowledge)|intuitions]] about spaces, and of dependencies between items. Sequential programming usually requires typing line after line of text, which must be read slowly and carefully to be understood and changed.\n*They are forgiving, allowing partial results and functions to work. One or more parts of a program can work correctly, even if other parts are unfinished or broken. This makes writing and debugging programs easier, and faster. Sequential programming usually needs every program line and character to be correct for a program to run. One error usually stops the whole program and prevents any result.\n*Modern spreadsheets allow for [[secondary notation]]. The program can be annotated with colors, typefaces, lines, etc. to provide visual cues about the meaning of elements in the program.\n*Extensions that allow users to create new functions can provide the capabilities of a [[functional language]].<ref name=\"excel\">{{cite web | title=Improving the world's most popular functional language: user-defined functions in Excel | first1=Simon | last1=Peyton Jones |authorlink1=Simon Peyton Jones |first2=Margaret |last2=Burnett |first3=Alan |last3=Blackwell |authorlink3=Alan Blackwell | url=http://research.microsoft.com/~simonpj/papers/excel/index.htm |date=March 2003 }}</ref>\n*Extensions that allow users to build and apply models from the domain of [[machine learning]].<ref name=spreadsheet_machinelearning>{{cite journal|last1=Sarkar|first1=Advait|last2=Blackwell|first2=Alan|last3=Jamnik|first3=Mateja|last4=Spott|first4=Martin|title=Teach and Try: A simple interaction technique for exploratory data modelling by end users|journal=2014 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC 2014)|pages=53\u201356|doi=10.1109/VLHCC.2014.6883022|url=http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6883022}}</ref><ref>{{Cite journal|title=Interactive visual machine learning in spreadsheets|url=http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=7357211|journal=2015 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)|date=2015-10-01|pages=159\u2013163|doi=10.1109/VLHCC.2015.7357211|first=A.|last=Sarkar|first2=M.|last2=Jamnik|first3=A.F.|last3=Blackwell|first4=M.|last4=Spott}}</ref>\n*Spreadsheets are versatile. With their [[boolean logic]] and graphics capabilities, even [[electronic circuit design]] is possible.<ref name=\"haynes1985fall\">{{cite news | url=https://archive.org/stream/byte-magazine-1985-11/1985_11_BYTE_10-11_Inside_the_IBM_PCs#page/n145/mode/2up | title=Circuit Design with Lotus 1-2-3 | work=BYTE | date=Fall 1985 | accessdate=19 March 2016 | author=Haynes, John L. | pages=143\u2013156}}</ref>\n* Spreadsheets can store [[relational model|relational data]] and spreadsheet formulas can express all queries of [[SQL]]. There exists a query translator, which automatically generates the spreadsheet implementation from the SQL code.<ref>{{Cite journal|title=Translating Relational Queries into Spreadsheets|url=http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=7029106|journal=IEEE Transactions on Knowledge and Data Engineering|date=2015-02-02|volume=27|issue=8|pages=1041-4347|doi=10.1109/TKDE.2015.2397440|first=J.|last=Sroka|first2=A.|last2=Panasiuk|first3=K.|last3=Stencel|first4=J.|last4=Tyszkiewicz}}</ref>\n\n=== Spreadsheet programs ===\nA '''''\"spreadsheet program\"''''' is designed to perform general computation tasks using spatial relationships rather than time as the primary organizing principle.\n\nIt is often convenient to think of a spreadsheet as a mathematical [[graph theory|graph]], where the [[node (graph theory)|nodes]] are spreadsheet cells, and the edges are references to other cells specified in formulas. This is often called the dependency graph of the spreadsheet. References between cells can take advantage of spatial concepts such as relative position and absolute position, as well as named locations, to make the spreadsheet formulas easier to understand and manage.\n\nSpreadsheets usually attempt to automatically update cells when the cells they depend on change. The earliest spreadsheets used simple tactics like evaluating cells in a particular order, but modern spreadsheets calculate following a minimal recomputation order from the dependency graph. Later spreadsheets also include a limited ability to propagate values in reverse, altering source values so that a particular answer is reached in a certain cell. Since spreadsheet cells formulas are not generally invertible, though, this technique is of somewhat limited value.\n\nMany of the concepts common to sequential programming models have analogues in the spreadsheet world. For example, the sequential model of the [[For loop|indexed loop]] is usually represented as a table of cells, with similar formulas (normally differing only in which cells they reference).\n\nSpreadsheets have evolved to use [[Scripting language|scripting]] programming languages like [[Visual Basic for Applications|VBA]] as a tool for extensibility beyond what the spreadsheet language makes easy.\n\n== Shortcomings ==\nWhile spreadsheets represented a major step forward in quantitative modeling, they have deficiencies. Their shortcomings include the perceived unfriendliness of alpha-numeric cell addresses.<ref>[http://wwwg.uni-klu.ac.at/stochastik.schule/ICTMT_5/ICTMT_5_CD/Special%20groups/CD_Special4.htm Douglas Butler, \"Why are spreadsheets so unfriendly?\", The Fifth International Conference on Technology in Mathematics Teaching, August 2001]. Accessed 25 June 2014</ref>\n\n* Research by ClusterSeven has shown huge discrepancies in the way financial institutions and corporate entities understand, manage and police their often vast estates of spreadsheets and unstructured financial data (including [[Comma-separated values|comma separated variable (CSV) files]] and Microsoft Access Databases). One study in early 2011 of nearly 1,500 people in the UK found that 57% of spreadsheet users have never received formal training on the spreadsheet package they use. 72% said that no internal department checks their spreadsheets for accuracy. Only 13% said that Internal Audit reviews their spreadsheets, while a mere 1% receive checks from their risk department.<ref name=\"Actuarial\">{{cite web\n|url=http://www.actuarialpost.co.uk/article/spreadsheet-risk-management-within-uk-organisations-351.htm\n|title= Spreadsheet Risk Management within UK Organisations\n|date=July 2011}}</ref>\n\n* Spreadsheets have significant reliability problems. Research studies estimate that roughly 94% of spreadsheets deployed in the field contain errors, and 5.2% of cells in unaudited spreadsheets contain errors.<ref name=\"Powell\">{{cite web\n|url=http://mba.tuck.dartmouth.edu/spreadsheet/product_pubs.html\n|title= A Critical Review of the Literature on Spreadsheet Errors\n|accessdate=2008-04-18\n|first1= Stephen G. |last1=Powell |first2=Kenneth R. |last2=Baker |first3=Barry |last3=Lawson\n|publisher=Tuck School of Business at Darthmouth College\n|date=2007-12-01}}</ref>\n\n::Despite the high error risks often associated with spreadsheet authorship and use, specific steps can be taken to significantly enhance control and reliability by structurally reducing the likelihood of error occurrence at their source.<ref name=\"Blaustein\">{{cite web\n|url=http://www.theiia.org/intAuditor/itaudit/2009-articles/eliminating-spreadsheet-risks/|title= Eliminating Spreadsheet Risks|work=Internal Auditor Magazine|publisher=Institute of Internal Auditors (IIA)|accessdate=2010-05-10|author= Richard E. Blaustein|date=November 2009}} [http://www.analyticsolutions.com/index_files/page0017.htm unabridged version]</ref>\n\n* The practical expressiveness of spreadsheets can be limited unless their modern features are used. Several factors contribute to this limitation. Implementing a complex model on a cell-at-a-time basis requires tedious attention to detail. Authors have difficulty remembering the meanings of hundreds or thousands of cell addresses that appear in formulas.\n\n::These drawbacks are mitigated by the use of named variables for cell designations, and employing variables in formulas rather than cell locations and cell-by-cell manipulations. Graphs can be used to show instantly how results are changed by changes in parameter values. In fact, the spreadsheet can be made invisible except for a transparent user interface that requests pertinent input from the user, displays results requested by the user, creates reports, and has built-in error traps to prompt correct input.<ref name=Bullen>{{cite book|title=Professional Excel Development |author=Stephen Bullen, Rob Bovey & John Green |publisher=Addison-Wesley |url=https://books.google.com/books?id=VnegO0pMYlIC&pg=PA1 |isbn=0-321-50879-3 |year=2009 |edition=2nd }}</ref>\n\n* Similarly, formulas expressed in terms of cell addresses are hard to keep straight and hard to audit. Research shows that spreadsheet auditors who check numerical results and cell formulas find no more errors than auditors who only check numerical results.<ref name=\"Powell\" /> That is another reason to use named variables and formulas employing named variables.\n* The alteration of a dimension demands major surgery. When rows (or columns) are added to or deleted from a table, one has to adjust the size of many downstream tables that depend on the table being changed. In the process, it is often necessary to move other cells around to make room for the new columns or rows, and to adjust graph data sources. In large spreadsheets, this can be extremely time consuming.<ref name=\"Henrion\">{{cite web|url=http://lumina.com/dlana/papers/Whats%20wrong%20with%20spreadsheets.pdf|title= What's Wrong with Spreadsheets&nbsp;\u2013 and How to Fix them with Analytica|accessdate=2010-11-13|author= Max Henrion|date=2004-07-14}}</ref><ref name=\"Savage\">{{cite web|url=http://www.lionhrtpub.com/orms/orms-2-97/savage.html|title=Weighing the Pros and Cons of Decision Technology in Spreadsheets\n|work=ORMS Today Volume 24 Number 1|accessdate=2010-11-13|author=Sam Savage|date=February 2010}}</ref>\n\n* Adding or removing a dimension is so difficult, one generally has to start over. The spreadsheet as a paradigm really forces one to decide on dimensionality right of the beginning of one's spreadsheet creation, even though it is often most natural to make these choices after one's spreadsheet model has matured. The desire to add and remove dimensions also arises in parametric and sensitivity analyses.<ref name=\"Henrion\" /><ref name=\"Savage\" />\n\n::Multi-dimensional spreadsheets and tools such as Analytica avoid this important pitfall by generalizing the 2-D paradigm of the classical spreadsheet to a multi-dimensional representation.\n\n* Collaboration in authoring spreadsheet formulas can be difficult when such collaboration occurs at the level of cells and cell addresses.\n\n::However, like programming languages, spreadsheets are capable of using aggregate cells with similar meaning and indexed variables with names that indicate meaning. Some spreadsheets have good collaboration features, and it is inadvisable to author at the level of cells and cell formulas to avoid obstacles to collaboration, where many people cooperate on data entry and many people use the same spreadsheet. In collaborative authoring, it is advisable to use the range-protection feature of spreadsheets that prevents the contents of specific parts of a worksheet from being inadvertently altered.\n\nOther problems associated with spreadsheets include:<ref>{{cite web|url=http://www.it-director.com/article.php?articleid=12681\n|title=Managing spreadsheets|accessdate=2006-06-29|author=Philip Howard|date=2005-04-22|work=IT-Directors.com}}</ref><ref>{{cite web\n|url=http://panko.shidler.hawaii.edu/ssr/Mypapers/whatknow.htm|title=What We Know About Spreadsheet Errors|accessdate=2006-09-22|author=Raymond R. Panko|date=January 2005}}</ref>\n\n* Some sources advocate the use of specialized software instead of spreadsheets for some applications (budgeting, statistics)<ref>[http://www.exceluser.com/bi/mistake.htm Is Excel Budgeting a Mistake?]<br />Excel's critics say that Excel is fundamentally unsuited for budgeting, forecasting, and other activities that involve collaboration or consolidation. Are they correct?</ref><ref>http://www.cs.uiowa.edu/~jcryer/JSMTalk2001.pdf Problems With Using Microsoft Excel for Statistics</ref><ref>{{cite web|url=http://www.burns-stat.com/pages/Tutor/spreadsheet_addiction.html|title=Spreadsheet Addiction|work=burns-stat.com}}</ref>\n* Many spreadsheet software products, such as [[Microsoft Excel]]<ref>{{cite web|url=http://office.microsoft.com/en-us/excel/HP051992911033.aspx |title=Excel specifications and limits&nbsp;\u2013 Excel&nbsp;\u2013 Microsoft Office |publisher=Office.microsoft.com |accessdate=2010-08-20}}</ref> (versions prior to 2007) and [[OpenOffice.org Calc]]<ref>{{cite web|url=http://wiki.services.openoffice.org/wiki/Documentation/FAQ/Calc/Miscellaneous/What%27s_the_maximum_number_of_rows_and_cells_for_a_spreadsheet_file%3F |title=What's the maximum number of rows and cells for a spreadsheet file?&nbsp;\u2013 OpenOffice.org Wiki |publisher=Wiki.services.openoffice.org |date=2008-11-26 |accessdate=2010-08-20}}</ref> (versions prior to 2008), have a capacity limit of 65,536 rows by 256 columns (2<sup>16</sup> and 2<sup>8</sup> respectively). This can present a problem for people using very large datasets, and may result in lost data.\n* Lack of auditing and [[revision control]]. This makes it difficult to determine who changed what and when. This can cause problems with regulatory compliance. Lack of revision control greatly increases the risk of errors due the inability to track, isolate and test changes made to a document.\n* Lack of [[Computer security|security]]. Spreadsheets lack controls on who can see and modify particular data. This, combined with the lack of auditing above, can make it easy for someone to commit [[fraud]].<ref>{{cite web |url=http://www.deloitte.com/assets/Dcom-UnitedStates/Local%20Assets/Documents/AERS/us_risk_spreadsheet_mgt_022509%20(2).pdf |title=Spreadsheet Management: Not what you figured |author=<!--Staff writer(s); no by-line.--> |date=2009 |website=deloitte.com |publisher=[[Deloitte]] |accessdate=24 July 2014}}</ref>\n* Because they are loosely structured, it is easy for someone to introduce an [[error]], either accidentally or intentionally, by entering information in the wrong place or expressing dependencies among cells (such as in a formula) incorrectly.<ref name=\"Henrion\" /><ref>{{cite web|url=http://www.accountingweb.co.uk/cgi-bin/item.cgi?id=40301|title=Excel spreadsheets in School budgeting \u2013 a cautionary tale (2001)|work=AccountingWEB}}</ref><ref>{{cite web|url=http://www.eusprig.org/stories.htm|title=European Spreadsheet Risks Interest Group \u2013 spreadsheet risk management and solutions conference|work=eusprig.org}}</ref>\n* The results of a formula (example \"=A1*B1\") applies only to a single cell (that is, the cell the formula is actually located in\u2014in this case perhaps C1), even though it can \"extract\" data from many other cells, and even real time dates and actual times. This means that to cause a similar calculation on an array of cells, an almost identical formula (but residing in its own \"output\" cell) must be repeated for each row of the \"input\" array. This differs from a \"formula\" in a conventional computer program, which typically makes one calculation that it applies to all the input in turn. With current spreadsheets, this forced repetition of near identical formulas can have detrimental consequences from a [[quality assurance]] standpoint and is often the cause of many spreadsheet errors. Some spreadsheets have array formulas to address this issue.\n*Trying to manage the sheer volume of spreadsheets that may exist in an organization without proper security, audit trails, unintentional introduction of errors, and other items listed above can become overwhelming.\n\nWhile there are built-in and third-party tools for desktop spreadsheet applications that address some of these shortcomings, awareness and use of these is generally low. A good example of this is that 55% of [[Capital market]] professionals \"don't know\" how their spreadsheets are audited; only 6% invest in a third-party solution<ref>{{cite web|url=http://download.microsoft.com/download/4/6/1/461062F0-2D3E-4620-890E-826CE55D27B9/SpreadsheetsandCapitalMarkets.pdf|title=Spreadsheets and Capital Markets|date=June 2009}}</ref>\n\n== Spreadsheet risk ==\n{{further information|Financial modeling#Accounting}}\nSpreadsheet risk is the risk associated with deriving a materially incorrect value from a spreadsheet application that will be utilised in making a related (usually numerically based) decision. Examples include the valuation of an [[asset]], the determination of [[Financial accountancy|financial accounts]], the calculation of medicinal doses or the size of load-bearing beam for structural engineering. The [[risk]] may arise from inputting erroneous or fraudulent data values, from mistakes (or incorrect changes) within the logic of the spreadsheet or the omission of relevant updates (e.g., out of date [[exchange rates]]). Some single-instance errors have exceeded US$1 billion.<ref>{{cite web |url= http://www.accessanalytic.com.au/Spreadsheet-Auditing.html|title= Excel Financial Model Auditing |accessdate=20 February 2013}}</ref><ref>{{cite news |title= Fannie Mae Corrects Mistakes In Results|author= Jonathan Glater|url= http://www.nytimes.com/2003/10/30/business/fannie-mae-corrects-mistakes-in-results.html|newspaper= The New York Times|date= 30 October 2003|accessdate=12 June 2012}}</ref> Because spreadsheet risk is principally linked to the actions (or inaction) of individuals it is defined as a sub-category of [[operational risk]].\n\nIn the report into the [[2012 JPMorgan Chase trading loss]], a lack of control over spreadsheets used for critical financial functions was cited as a factor in the trading losses of more than six billion dollars which were reported as a result of [[derivatives trading]] gone bad.\n\nDespite this, research<ref name=\"Financial Times\">{{cite web|url=http://www.ft.com/cms/s/0/60cea058-778b-11e2-9e6e-00144feabdc0.html#axzz2YaLVTi2m|title=Finance groups lack spreadsheet controls|author =Financial Times|date=18 March 2013}}</ref> carried out by ClusterSeven revealed that around half (48%) of [[c-level executive]]s and senior managers at firms reporting annual revenues over \u00a350m said there were either no usage controls at all or poorly applied manual processes over the use of spreadsheets at the firms.<ref name=\"Financial Times\" /><ref>{{cite web|url=http://www.guardian.co.uk/media-network/media-network-blog/2013/apr/04/spreadsheet-risk-cyber-threat-finance|title=Spreadsheet risk and the threat of cyber attacks in finance|author =The Guardian|date=4 April 2013}}</ref>\n\nIn 2013 [[Thomas Herndon]], a graduate student of economics at the [[University of Massachusetts Amherst]] found major coding flaws in the spreadsheet used by the economists [[Carmen Reinhart]] and [[Kenneth Rogoff]] in a very influential 2010 journal article. The Reinhart and Rogoff article was widely used as justification to drive 2010\u201313 European austerity programs.\n<ref>{{cite web|url=http://chronicle.com/article/UMass-Graduate-Student-Talks/138763/|title=They Said at First That They Hadn't Made a Spreadsheet Error, When They Had'|newspaper= The Chronicle Of Higher Education|date=24 April 2013}}</ref>\n\n== See also ==\n*[[Attribute-value system]]\n*[[Comparison of spreadsheet software]]\n*[[Cut, copy and paste#Additional differences between moving and copying|Moving and copying in spreadsheets]]\n*[[List of spreadsheet software]]\n*[[Model audit]]\n\n== References ==\n{{Reflist|30em}}\n\n== External links ==\n{{Wiktionary|spreadsheet}}\n* [http://www.devx.com/enterprise/Article/11686/0 A Spreadsheet Programming article on DevX]\n* [http://www.faqs.org/faqs/spreadsheets/faq/ comp.apps.spreadsheets FAQ] by Russell Schulz\n* [http://www.ainewsletter.com/newsletters/aix_0505.htm#ess Extending the Concept of Spreadsheet] by Jocelyn Paine\n* {{dmoz|Computers/Software/Spreadsheets}}\n* [http://www.j-walk.com/ss/history/spreadsh.htm Spreadsheet&nbsp;\u2013 Its First Computerization (1961\u20131964)] by Richard Mattessich\n* [https://web.archive.org/web/20040924073107/http://www.yelavich.com/ CICS history and introduction of IBM 3270] by Bob Yelavich\n* [http://creativekarma.com/ee.php/weblog/comments/the_first_computerized_spreadsheet_program/ Autoplan & Autotab article] by Creative Karma\n* [http://www.spreadsheetscience.org/ Spreadsheets in Science]\n\n{{Spreadsheets}}\n\n[[Category:American inventions]]\n[[Category:Spreadsheet software|*]]"}]}}}}