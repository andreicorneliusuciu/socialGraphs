{"batchcomplete":"","query":{"normalized":[{"from":"kalman_filter","to":"Kalman filter"}],"pages":{"180855":{"pageid":180855,"ns":0,"title":"Kalman filter","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"[[File:Basic concept of Kalman filtering.svg|thumb|400px|The Kalman filter keeps track of the estimated state of the system and the variance or uncertainty of the estimate. The estimate is updated using a state transition model and measurements. <math>\\hat{x}_{k\\mid k-1}</math> denotes the estimate of the system's state at time step ''k'' before the ''k''-th measurement ''y''<sub>''k''</sub> has been taken into account; <math>P_{k\\mid k-1}</math> is the corresponding uncertainty.]]\n\n'''Kalman filtering''', also known as '''linear quadratic estimation''' ('''LQE'''), is an [[algorithm]] that uses a series of measurements observed over time, containing [[statistical noise]] and other inaccuracies, and produces estimates of unknown variables that tend to be more precise than those based on a single measurement alone, by using [[Bayesian inference]] and estimating a [[joint probability distribution]] over the variables for each timeframe. The filter is named after [[Rudolf E. K\u00e1lm\u00e1n]], one of the primary developers of its theory.\n\nThe Kalman filter has numerous applications in technology. A common application is for [[guidance, navigation, and control]] of vehicles, particularly aircraft and spacecraft. Furthermore, the Kalman filter is a widely applied concept in [[time series]] analysis used in fields such as [[signal processing]] and [[econometrics]]. Kalman filters also are one of the main topics in the field of robotic motion planning and control, and they are sometimes included in [[trajectory optimization]].  The Kalman filter also works for modeling the central nervous system's control of movement. Due to the time delay between issuing motor commands and receiving sensory feedback, usage of the Kalman filter supports the realistic model for making estimates of the current state of the motor system and issuing updated commands.<ref>{{cite journal|title=Computational principles of movement neuroscience|journal=Nature Neuroscience |doi=10.1038/81497 |pmid=11127840 |volume=3|pages=1212\u20137 |year=2000|last1=Wolpert|first1=Daniel|last2=Ghahramani|first2=Zoubin}}</ref>\n\nThe algorithm works in a two-step process. In the prediction step, the Kalman filter produces estimates of the current state variables, along with their uncertainties. Once the outcome of the next measurement (necessarily corrupted with some amount of error, including random noise) is observed, these estimates are updated using a [[Weighted mean|weighted average]], with more weight being given to estimates with higher certainty. The algorithm is recursive. It can run in [[real-time Control System|real time]], using only the present input measurements and the previously calculated state and its uncertainty matrix; no additional past information is required.\n\nThe Kalman filter does not make any assumption that the errors are [[Normal distribution|Gaussian]].<ref>{{cite journal|doi=10.1115/1.3662552|title=A New Approach to Linear Filtering and Prediction Problems|journal=Journal of Basic Engineering|volume=82|pages=35|year=1960|last1=Kalman|first1=R. E.}}</ref> However, the filter yields the exact conditional probability estimate in the special case that all errors are Gaussian-distributed.\n\nExtensions and generalizations to the method have also been developed, such as the [[extended Kalman filter]] and the [[Unscented Kalman filter#Unscented Kalman filter|unscented Kalman filter]] which work on nonlinear systems. The underlying model is a [[Bayesian model]] similar to a [[hidden Markov model]] but where the state space of the [[latent variable]]s is continuous and where all latent and observed variables have Gaussian distributions.\n\n== Naming and historical development ==\n\nThe filter is named after Hungarian \u00e9migr\u00e9 [[Rudolf E. K\u00e1lm\u00e1n]], although [[Thorvald Nicolai Thiele]]<ref>[http://www.stats.ox.ac.uk/~steffen/ Steffen L. Lauritzen]. \"Time series analysis in 1880. A discussion of contributions made by T.N. Thiele\". ''International Statistical Review'' 49, 1981, 319\u2013333. {{jstor|1402616}}</ref><ref>[[Steffen L. Lauritzen]], ''[http://www.oup.com/uk/catalogue/?ci=9780198509721 Thiele: Pioneer in Statistics]'', [[Oxford University Press]], 2002. ISBN 0-19-850972-3.</ref> and [[Peter Swerling]] developed a similar algorithm earlier.  Richard S. Bucy of the [[University of Southern California]] contributed to the theory, leading to it often being called the Kalman\u2013Bucy filter.\n[[Stanley F. Schmidt]] is generally credited with developing the first implementation of a Kalman filter. He realized that the filter could be divided into two distinct parts, with one part for time periods between sensor outputs and another part for incorporating measurements.<ref>[http://ieeecss.org/CSM/library/2010/june10/11-HistoricalPerspectives.pdf Mohinder S. Grewal and Angus P. Andrews]</ref> It was during a visit by K\u00e1lm\u00e1n to the [[NASA Ames Research Center]] that Schmidt saw the applicability of K\u00e1lm\u00e1n's ideas to the nonlinear problem of trajectory estimation for the [[Project Apollo|Apollo program]] leading to its incorporation in the Apollo navigation computer.\nThis Kalman filter was first described and partially developed in technical papers by Swerling (1958), Kalman (1960) and Kalman and Bucy (1961).\n\nKalman filters have been vital in the implementation of the navigation systems of [[U.S. Navy]] nuclear [[ballistic missile submarine]]s, and in the guidance and navigation systems of cruise missiles such as the U.S. Navy's [[Tomahawk missile]] and the [[U.S. Air Force]]'s [[AGM-86 ALCM|Air Launched Cruise Missile]]. It is also used in the guidance and navigation systems of [[RLV|reusable launch vehicles]] and the [[Attitude dynamics and control|attitude control]] and navigation systems of spacecraft which dock at the [[International Space Station]].<ref>{{Cite book|doi=10.2514/6.2003-5445|chapter=GPS/INS Kalman Filter Design for Spacecraft Operating in the Proximity of International Space Station|title=AIAA Guidance, Navigation, and Control Conference and Exhibit|year=2003|last1=Gaylor|first1=David|last2=Lightsey|first2=E. Glenn|isbn=978-1-62410-090-1}}</ref>\n\nThis digital filter is sometimes called the ''Stratonovich\u2013Kalman\u2013Bucy filter'' because it is a special case of a more general, non-linear filter developed somewhat earlier by the Soviet [[mathematician]] [[Ruslan Stratonovich]].<ref>Stratonovich, R. L. (1959). ''Optimum nonlinear systems which bring about a separation of a signal with constant parameters from noise''. Radiofizika, 2:6, pp.&nbsp;892\u2013901.</ref><ref>Stratonovich, R. L. (1959). ''On the theory of optimal non-linear filtering of random functions''. Theory of Probability and its Applications, 4, pp.&nbsp;223\u2013225.</ref><ref>Stratonovich, R. L. (1960) ''Application of the Markov processes theory to optimal filtering''. Radio Engineering and Electronic Physics, 5:11, pp.&nbsp;1\u201319.</ref><ref>Stratonovich, R. L. (1960). ''Conditional Markov Processes''. Theory of Probability and its Applications, 5, pp.&nbsp;156\u2013178.</ref> In fact, some of the special case linear filter's equations appeared in these papers by Stratonovich that were published before summer 1960, when Kalman met with Stratonovich during a conference in Moscow.\n\n== Overview of the calculation ==\n\nThe Kalman filter uses a system's dynamics model (e.g., physical laws of motion), known control inputs to that system, and multiple sequential measurements (such as from sensors) to form an estimate of the system's varying quantities (its [[State space (controls)|state]]) that is better than the estimate obtained by using any one measurement alone. As such, it is a common [[sensor fusion]] and [[data fusion]] algorithm.\n\nNoisy sensor data, approximations in the equations that describe the system evolution, and external factors that are not accounted for all place limits on how well it is possible to determine the system's state. The Kalman filter deals effectively with the uncertainty due to noisy sensor data and to some extent also with random external factors. The Kalman filter produces an estimate of the state of the system as an average of the system's predicted state and of the new measurement using a [[Weighted mean|weighted average]]. The purpose of the weights is that values with better (i.e., smaller) estimated uncertainty are \"trusted\" more.  The weights are calculated from the [[covariance]], a measure of the estimated uncertainty of the prediction of the system's state. The result of the weighted average is a new state estimate that lies between the predicted and measured state, and has a better estimated uncertainty than either alone. This process is repeated at every time step, with the new estimate and its covariance informing the prediction used in the following iteration. This means that the Kalman filter works [[recursive filter|recursively]] and requires only the last \"best guess\", rather than the entire history, of a system's state to calculate a new state.\n\nThe relative certainty of the measurements and current state estimate is an important consideration, and it is common to  discuss the response of the filter in terms of the Kalman filter's ''[[gain (electronics)|gain]]''. The Kalman gain is the relative weight given to the measurements and current state estimate, and can be \"tuned\" to achieve particular performance. With a high gain, the filter places more weight on the most recent measurements, and thus follows them more responsively. With a low gain, the filter follows the model predictions more closely. At the extremes, a high gain close to one will result in a more jumpy estimated trajectory, while low gain close to zero will smooth out noise but decrease the responsiveness.\n\nWhen performing the actual calculations for the filter (as discussed below), the state estimate and covariances are coded into [[Matrix (mathematics)|matrices]] to handle the multiple dimensions involved in a single set of calculations. This allows for a representation of linear relationships between different state variables (such as position, velocity, and acceleration) in any of the transition models or covariances.\n\n== Example application ==\n\nAs an example application, consider the problem of determining the precise location of a truck. The truck can be equipped with a [[GPS]] unit that provides an estimate of the position within a few meters. The GPS estimate is likely to be noisy; readings 'jump around' rapidly, though remaining within a few meters of the real position. In addition, since the truck is expected to follow the laws of physics, its position can also be estimated by integrating its velocity over time, determined by keeping track of wheel revolutions and the angle of the steering wheel. This is a technique known as [[dead reckoning]]. Typically, the dead reckoning will provide a very smooth estimate of the truck's position, but it will [[Drift (telecommunication)|drift]] over time as small errors accumulate.\n\nIn this example, the Kalman filter can be thought of as operating in two distinct phases: predict and update. In the prediction phase, the truck's old position will be modified according to the physical [[Newton's laws of motion|laws of motion]] (the dynamic or \"state transition\" model). Not only will a new position estimate be calculated, but a new covariance will be calculated as well. Perhaps the covariance is proportional to the speed of the truck because we are more uncertain about the accuracy of the dead reckoning position estimate at high speeds but very certain about the position estimate when moving slowly. Next, in the update phase, a measurement of the truck's position is taken from the GPS unit. Along with this measurement comes some amount of uncertainty, and its covariance relative to that of the prediction from the previous phase determines how much the new measurement will affect the updated prediction. Ideally, as the dead reckoning estimates tend to drift away from the real position, the GPS measurement should pull the position estimate back towards the real position but not disturb it to the point of becoming rapidly jumping and noisy.\n\n== Technical description and context ==\n\nThe Kalman filter is an efficient [[recursive filter]] that [[estimator|estimates]] the internal state of a [[linear dynamical system|linear dynamic system]] from a series of [[noise|noisy]] measurements.  It is used in a wide range of [[engineering]] and [[econometric]] applications from [[radar]] and [[computer vision]] to estimation of structural macroeconomic models,<ref>{{cite journal| author1=Ingvar Strid |author2=Karl Walentin |date=April 2009|title=Block Kalman Filtering for Large-Scale DSGE Models |journal=Computational Economics |publisher=Springer |volume=33 |pages=277\u2013304 |url=http://www.riksbank.se/en/Press-and-published/Published-from-the-Riksbank/Other-reports/Working-Paper-Series/2008/No-224-Block-Kalman-filtering-for-large-scale-DSGE-models/|issue=3| doi=10.1007/s10614-008-9160-4}}</ref><ref>{{cite web|author=Martin M\u00f8ller Andreasen |year=2008 |title=Non-linear DSGE Models, The Central Difference Kalman Filter, and The Mean Shifted Particle Filter |url=ftp://ftp.econ.au.dk/creates/rp/08/rp08_33.pdf}}</ref> and is an important topic in [[control theory]] and [[control system]]s engineering.  Together with the [[linear-quadratic regulator]] (LQR), the Kalman filter solves the [[linear-quadratic-Gaussian control]] problem (LQG).  The Kalman filter, the linear-quadratic regulator and the linear-quadratic-Gaussian controller are solutions to what arguably are the most fundamental problems in control theory.\n\nIn most applications, the internal state is much larger (more [[Degrees of freedom (physics and chemistry)|degrees of freedom]]) than the few \"observable\" parameters which are measured.  However, by combining a series of measurements, the Kalman filter can estimate the entire internal state.\n\nIn [[Dempster\u2013Shafer theory]], each state equation or observation is considered a special case of a [[linear belief function]] and the Kalman filter is a special case of combining linear belief functions on a join-tree or [[Markov chain|Markov tree]]. Additional approaches include [[belief filter]]s which use Bayes or evidential updates to the state equations.\n\nA wide variety of Kalman filters have now been developed, from Kalman's original formulation, now called the \"simple\" Kalman filter, the [[Kalman\u2013Bucy filter]], Schmidt's \"extended\" filter, the [[Kalman filter#Information filter|information filter]], and a variety of \"square-root\" filters that were developed by Bierman, Thornton and many others. Perhaps the most commonly used type of very simple Kalman filter is the [[phase-locked loop]], which is now ubiquitous in radios, especially [[frequency modulation]] (FM) radios, television sets, [[satellite communications]] receivers, outer space communications systems, and nearly any other [[electronics|electronic]] communications equipment.\n\n== Underlying dynamical system model ==\n{{Expand section|date=August 2011}}\n\nThe Kalman filters are based on [[linear dynamical system]]s discretized in the time domain. They are modelled on a [[Markov chain]] built on [[linear operator]]s perturbed by errors that may include [[normal distribution|Gaussian]] [[noise (physics)|noise]]. The [[state space (controls)|state]] of the system is represented as a [[vector space|vector]] of [[real number]]s. At each [[discrete time]] increment, a linear operator is applied to the state to generate the new state, with some noise mixed in, and optionally some information from the controls on the system if they are known. Then, another linear operator mixed with more noise generates the observed outputs from the true (\"hidden\") state. The Kalman filter may be regarded as analogous to the hidden Markov model, with the key difference that the hidden state variables take values in a continuous space (as opposed to a discrete state space as in the hidden Markov model). There is a strong [[duality (mathematics)|duality]] between the equations of the Kalman Filter and those of the hidden Markov model. A review of this and other models is given in Roweis and [[Zoubin Ghahramani|Ghahramani]] (1999),<ref>{{cite journal|doi=10.1162/089976699300016674|pmid= 9950734|year= 1999|author1= Roweis|first1= S|title= A unifying review of linear gaussian models|journal= Neural computation|volume= 11|issue= 2|pages= 305\u201345|last2= Ghahramani|first2= Z}}</ref> and Hamilton (1994), Chapter 13.<ref name='hamilton'>Hamilton, J. (1994), ''Time Series Analysis'', Princeton University Press. Chapter 13, 'The Kalman Filter'</ref>\n\nIn order to use the Kalman filter to estimate the internal state of a process given only a sequence of noisy observations, one must model the process in accordance with the framework of the Kalman filter. This means specifying the following matrices: '''F'''<sub>''k''</sub>, the state-transition model; '''H'''<sub>''k''</sub>, the observation model; '''Q'''<sub>''k''</sub>, the covariance of the process noise; '''R'''<sub>''k''</sub>, the covariance of the observation noise; and sometimes '''B'''<sub>''k''</sub>, the control-input model, for each time-step, ''k'', as described below.\n\n[[File:Kalman filter model 2.svg|right|thumb|631px|Model underlying the Kalman filter. Squares represent matrices. Ellipses represent [[multivariate normal distribution]]s (with the mean and covariance matrix enclosed). Unenclosed values are [[vector space|vectors]].  In the simple case, the various matrices are constant with time, and thus the subscripts are dropped, but the Kalman filter allows any of them to change each time step.]]\n\nThe Kalman filter model assumes the true state at time ''k'' is evolved from the state at (''k''&nbsp;\u2212&nbsp;1) according to\n\n:<math> \\mathbf{x}_{k} = \\mathbf{F}_{k} \\mathbf{x}_{k-1} + \\mathbf{B}_{k} \\mathbf{u}_{k} + \\mathbf{w}_{k} </math>\n\nwhere\n* '''F'''<sub>''k''</sub> is the state transition model which is applied to the previous state '''x'''<sub>''k''\u22121</sub>;\n* '''B'''<sub>''k''</sub> is the control-input model which is applied to the control vector '''u'''<sub>''k''</sub>;\n* '''w'''<sub>''k''</sub> is the process noise which is assumed to be drawn from a zero mean [[multivariate normal distribution]] with [[covariance matrix|covariance]]  '''Q'''<sub>''k''</sub>.\n\n:<math>\\mathbf{w}_k \\sim \\mathcal{N}(0, \\mathbf{Q}_k) </math>\n\nAt time ''k'' an observation (or measurement) '''z'''<sub>''k''</sub> of the true state '''x'''<sub>''k''</sub> is made according to\n\n:<math>\\mathbf{z}_k = \\mathbf{H}_{k} \\mathbf{x}_k + \\mathbf{v}_k</math>\n\nwhere '''H'''<sub>''k''</sub> is the observation model which maps the true state space into the observed space and '''v'''<sub>''k''</sub> is the observation noise which is assumed to be zero mean Gaussian [[white noise]] with covariance '''R'''<sub>''k''</sub>.\n\n:<math>\\mathbf{v}_k \\sim \\mathcal{N}(0, \\mathbf{R}_k) </math>\n\nThe initial state, and the noise vectors at each step {'''x'''<sub>0</sub>, '''w'''<sub>1</sub>, \u2026, '''w'''<sub>''k''</sub>,  '''v'''<sub>1</sub> \u2026 '''v'''<sub>''k''</sub>} are all assumed to be mutually [[statistical independence|independent]].\n\nMany real dynamical systems do not exactly fit this model. In fact, unmodelled dynamics can seriously degrade the filter performance, even when it was supposed to work with unknown stochastic signals as inputs. The reason for this is that the effect of unmodelled dynamics depends on the input, and, therefore, can bring the estimation algorithm to instability (it diverges). On the other hand, independent white noise signals will not make the algorithm diverge. The problem of distinguishing between measurement noise and unmodelled dynamics is a difficult one and is treated in control theory under the framework of [[robust control]].<ref name=\"ishihara06\">{{cite journal |doi=10.1109/TAC.2006.878741|title=Robust Kalman Filter for Descriptor Systems|journal=IEEE Transactions on Automatic Control|volume=51|issue=8|pages=1354|year=2006|last1=Ishihara|first1=J.Y.|last2=Terra|first2=M.H.|last3=Campos|first3=J.C.T.}}</ref><ref name=\"terra14\">{{cite journal |doi=10.1109/TAC.2014.2309282|title=Optimal Robust Linear Quadratic Regulator for Systems Subject to Uncertainties|journal=IEEE Transactions on Automatic Control|volume=59|issue=9|pages=2586\u20132591|year=2014|last1=Terra|first1=Marco H.|last2=Cerri|first2=Joao P.|last3=Ishihara|first3=Joao Y.}}</ref>\n\n== Details ==\n\nThe Kalman filter is a [[infinite impulse response|recursive]] estimator. This means that only the estimated state from the previous time step and the current measurement are needed to compute the estimate for the current state. In contrast to batch estimation techniques, no history of observations and/or estimates is required. In what follows, the notation <math>\\hat{\\mathbf{x}}_{n\\mid m}</math> represents the estimate of <math>\\mathbf{x}</math> at time ''n'' given observations up to and including at time ''m \u2264 n''.\n\nThe state of the filter is represented by two variables:\n* <math>\\hat{\\mathbf{x}}_{k\\mid k}</math>, the ''[[a posteriori]]'' state estimate at time ''k'' given observations up to and including at time ''k'';\n* <math>\\mathbf{P}_{k\\mid k}</math>, the ''a posteriori'' error covariance matrix (a measure of the estimated [[Accuracy and precision|accuracy]] of the state estimate).\n\nThe Kalman filter can be written as a single equation, however it is most often conceptualized as two distinct phases: \"Predict\" and \"Update\". The predict phase uses the state estimate from the previous timestep to produce an estimate of the state at the current timestep. This predicted state estimate is also known as the ''a priori'' state estimate because, although it is an estimate of the state at the current timestep, it does not include observation information from the current timestep.  In the update phase, the current ''a priori'' prediction is combined with current observation information to refine the state estimate.  This improved estimate is termed the ''a posteriori'' state estimate.\n\nTypically, the two phases alternate, with the prediction advancing the state until the next scheduled observation, and the update incorporating the observation.  However, this is not necessary; if an observation is unavailable for some reason, the update may be skipped and multiple prediction steps performed.  Likewise, if multiple independent observations are available at the same time, multiple update steps may be performed (typically with different observation matrices '''H'''<sub>''k''</sub>).<ref>{{cite journal|last1=Kelly|first1=Alonzo|title=A 3D state space formulation of a navigation Kalman filter for autonomous vehicles|journal=DTIC Document|date=1994|page=13|url=http://www.dtic.mil/dtic/tr/fulltext/u2/a282853.pdf}} [http://www.frc.ri.cmu.edu/~alonzo/pubs/reports/kalman_V2.pdf 2006 Corrected Version]</ref><ref>{{cite web|last1=Reid|first1=Ian|last2=Term|first2=Hilary|title=Estimation II|url=http://www.robots.ox.ac.uk/~ian/Teaching/Estimation/LectureNotes2.pdf|website=www.robots.ox.ac.uk|publisher=Oxford University|accessdate=6 August 2014}}</ref>\n\n=== Predict ===\n{|\n|-\n| style=\"width:56.7%;\"| Predicted (''a priori'') state estimate\n| <math>\\hat{\\mathbf{x}}_{k\\mid k-1} = \\mathbf{F}_{k}\\hat{\\mathbf{x}}_{k-1\\mid k-1} + \\mathbf{B}_{k-1} \\mathbf{u}_{k-1}  </math>\n|-\n| Predicted (''a priori'') estimate covariance\n| <math>\\mathbf{P}_{k\\mid k-1} =  \\mathbf{F}_{k} \\mathbf{P}_{k-1\\mid k-1} \\mathbf{F}_{k}^{\\text{T}} + \\mathbf{Q}_{k} </math>\n|}\n\n=== Update ===\n{|\n|-\n| style=\"width:60%;\"| Innovation or measurement residual\n| <math>\n\\tilde{\\mathbf{y}}_k = \\mathbf{z}_k - \\mathbf{H}_k\\hat{\\mathbf{x}}_{k\\mid k-1}\n</math>\n|-\n| Innovation (or residual) covariance\n| <math>\\mathbf{S}_k = \\mathbf{H}_k \\mathbf{P}_{k\\mid k-1} \\mathbf{H}_k^T + \\mathbf{R}_k </math>\n|-\n| ''Optimal'' Kalman gain\n| <math>\\mathbf{K}_k = \\mathbf{P}_{k\\mid k-1}\\mathbf{H}_k^T \\mathbf{S}_k^{-1}</math>\n|-\n| Updated (''a posteriori'') state estimate\n| <math>\\hat{\\mathbf{x}}_{k\\mid k} = \\hat{\\mathbf{x}}_{k\\mid k-1} + \\mathbf{K}_k\\tilde{\\mathbf{y}}_k</math>\n|-\n| Updated (''a posteriori'') estimate covariance\n| <math>\\mathbf{P}_{k|k} = (I - \\mathbf{K}_k \\mathbf{H}_k) \\mathbf{P}_{k|k-1} </math>\n|}\n\nThe formula for the updated estimate covariance above is only valid for the optimal Kalman gain. Usage of other gain values requires a more complex formula found in the ''[[Kalman filter#Derivations|derivations]]'' section.\n\n=== Invariants ===\n\nIf the model is accurate, and the values for <math>\\hat{\\mathbf{x}}_{0\\mid 0}</math> and <math>\\mathbf{P}_{0\\mid 0}</math> accurately reflect the distribution of the initial state values, then the following invariants are preserved:\n\n* <math>\\operatorname{E}[\\mathbf{x}_k - \\hat{\\mathbf{x}}_{k\\mid k}] = \\operatorname{E}[\\mathbf{x}_k - \\hat{\\mathbf{x}}_{k\\mid k-1}] = 0</math>\n* <math>\\operatorname{E}[\\tilde{\\mathbf{y}}_k] = 0</math>\nwhere <math>\\operatorname{E}[\\xi]</math> is the [[expected value]] of <math>\\xi</math>. That is, all estimates have a mean error of zero.\n\nAlso:\n\n* <math>\\mathbf{P}_{k\\mid k} = \\operatorname{cov}(\\mathbf{x}_k - \\hat{\\mathbf{x}}_{k\\mid k})</math>\n* <math>\\mathbf{P}_{k\\mid k-1} = \\operatorname{cov}(\\mathbf{x}_k - \\hat{\\mathbf{x}}_{k\\mid k-1})</math>\n* <math>\\mathbf{S}_k = \\operatorname{cov}(\\tilde{\\mathbf{y}}_k)</math>\nso covariance matrices accurately reflect the covariance of estimates.\n\n=== Estimation of the noise covariances Q<sub>''k''</sub> and R<sub>''k''</sub> ===\nPractical implementation of the Kalman Filter is often difficult due to the difficulty of getting a good estimate of the noise covariance matrices '''Q'''<sub>''k''</sub> and '''R'''<sub>''k''</sub>.  Extensive research has been done in this field to estimate these covariances from data.  One of the more promising and practical approaches to do this is the '''autocovariance least-squares (ALS)''' technique that uses the time-lagged [[autocovariance]]s of routine operating data to estimate the covariances.<ref>{{cite thesis |url=http://jbrwww.che.wisc.edu/theses/rajamani.pdf |last=Rajamani |first=Murali |type=PhD Thesis |title=Data-based Techniques to Improve State Estimation in Model Predictive Control |location=University of Wisconsin\u2013Madison |date=October 2007 }}</ref><ref>{{cite journal |last=Rajamani |first=Murali R. |last2=Rawlings |first2=James B. |title=Estimation of the disturbance structure from data using semidefinite programming and optimal weighting |journal=Automatica |volume=45 |issue=1 |pages=142\u2013148 |year=2009 |doi=10.1016/j.automatica.2008.05.032 }}</ref>  The [[GNU Octave]] and [[Matlab]] code used to calculate the noise covariance matrices using the '''ALS''' technique is available online under the [[GNU General Public License]] license.<ref>{{cite web|url=http://jbrwww.che.wisc.edu/software/als/ |title=Autocovariance Least-Squares Toolbox |publisher=Jbrwww.che.wisc.edu |accessdate=2014-06-02}}</ref>\n\n=== Optimality and performance ===\n\nIt follows from theory that the Kalman filter is the optimal linear filter in cases where a) the model perfectly matches the real system, b) the entering noise is white (uncorrelated) and c) the covariances of the noise are exactly known. Several methods for the noise covariance estimation have been proposed during past decades, including ALS, mentioned in the section above. After the covariances are estimated, it is useful to evaluate the performance of the filter, i.e. whether it is possible to improve the state estimation quality. If the Kalman filter works optimally, the innovation sequence (the output prediction error) is a white noise, therefore the whiteness property of the innovations measures filter performance. Several different methods can be used for this purpose.<ref>Three optimality tests with numerical examples are described in  {{cite book|doi=10.3182/20120711-3-BE-2027.00011|chapter=Optimality Tests and Adaptive Kalman Filter|title=16th IFAC Symposium on System Identification|pages=1523|series=16th IFAC Symposium on System Identification|year=2012|last1=Peter|first1=Matisko,|isbn=978-3-902823-06-9}}</ref> If the noise terms are non-Gaussian distributed, methods for assessing performance of the filter estimate, which use probability inequalities or large-sample theory, are given in <ref>{{cite journal|url=|doi=10.1016/0005-1098(95)00069-9|title=The Kantorovich inequality for error analysis of the Kalman filter with unknown noise distributions|journal=Automatica|volume=31|issue=10|pages=1513|year=1995|last1=Spall|first1=James C.}}</ref> and.<ref>{{cite journal|url=|doi=10.1109/TAC.2003.821415|title=Use of the Kalman Filter for Inference in State-Space Models with Unknown Noise Distributions|journal=IEEE Transactions on Automatic Control|volume=49|pages=87|year=2004|last1=Maryak|first1=J.L.|last2=Spall|first2=J.C.|last3=Heydon|first3=B.D.}}</ref>\n\n== Example application, technical ==\n[[File:kalman.png|thumb|Black: truth, green: filtered process, red: observations]]\nConsider a truck on frictionless, straight rails. Initially, the truck is stationary at position 0, but it is buffeted this way and that by random uncontrolled forces. We measure the position of the truck every \u0394''t'' seconds, but these measurements are imprecise; we want to maintain a model of where the truck is and what its [[velocity]] is. We show here how we derive the model from which we create our Kalman filter.\n\nSince <math>\\mathbf F, \\mathbf H, \\mathbf R, \\mathbf Q</math> are constant, their time indices are dropped.\n\nThe position and velocity of the truck are described by the linear state space\n\n:<math>\\mathbf{x}_{k} = \\begin{bmatrix} x \\\\ \\dot{x} \\end{bmatrix} </math>\n\nwhere <math>\\dot{x}</math> is the velocity, that is, the derivative of position with respect to time.\n\nWe assume that between the (''k''&nbsp;\u2212&nbsp;1) and ''k'' timestep uncontrolled forces cause a constant acceleration of ''a''<sub>''k''</sub> that is [[normal distribution|normally distributed]], with mean 0 and standard deviation ''\u03c3''<sub>''a''</sub>. From [[Newton's laws of motion]] we conclude that\n\n:<math>\\mathbf{x}_{k} = \\mathbf{F} \\mathbf{x}_{k-1} + \\mathbf{G}a_{k}</math>\n\n(note that there is no <math>\\mathbf{B}u</math> term since we have no known control inputs. Instead, we assume that ''a''<sub>''k''</sub> is the effect of an unknown input and <math>\\mathbf{G}</math> applies that effect to the state vector) where\n\n:<math>\\mathbf{F} = \\begin{bmatrix} 1 & \\Delta t \\\\ 0 & 1 \\end{bmatrix}</math>\n\nand\n\n:<math>\\mathbf{G} = \\begin{bmatrix} \\frac{\\Delta t^2}{2} \\\\[6pt] \\Delta t \\end{bmatrix} </math>\n\nso that\n\n:<math>\\mathbf{x}_{k} = \\mathbf{F} \\mathbf{x}_{k-1} +  \\mathbf{w}_{k}</math>\n\nwhere <math>\\mathbf{w}_{k} \\sim N(0,  \\mathbf{Q})</math> and\n\n:<math>\\mathbf{Q}=\\mathbf{G}\\mathbf{G}^{\\text{T}}\\sigma_a^2 =\\begin{bmatrix} \\frac{\\Delta t^4}{4} & \\frac{\\Delta t^3}{2} \\\\[6pt] \\frac{\\Delta t^3}{2} & \\Delta t^2 \\end{bmatrix}\\sigma_{a}^2.</math>\n\nPlease note that the matrix <math>\\mathbf{Q}</math> is not full rank (it is of rank one if <math>\\Delta t\\neq 0</math>). Hence, the distribution <math>N(0,  \\mathbf{Q})</math> is not absolutely continuous and has [[Multivariate normal distribution#Degenerate case|no probability density function]]. Another way to express this, avoiding explicit degenerate distributions is given by\n\n:<math>\\mathbf{w}_{k} \\sim \\mathbf{G}\\cdot N(0,  \\sigma_{a})</math>.\n\nAt each time step, a noisy measurement of the true position of the truck is made. Let us suppose the measurement noise ''v''<sub>''k''</sub> is also normally distributed, with mean 0 and standard deviation ''\u03c3''<sub>''z''</sub>.\n\n:<math>\\mathbf{z}_{k} = \\mathbf{H x}_{k} + \\mathbf{v}_{k}</math>\n\nwhere\n\n:<math>\\mathbf{H} = \\begin{bmatrix} 1 & 0 \\end{bmatrix} </math>\n\nand\n\n:<math>\\mathbf{R} = \\textrm{E}[\\mathbf{v}_k \\mathbf{v}_k^{\\text{T}}] = \\begin{bmatrix} \\sigma_z^2 \\end{bmatrix} </math>\n\nWe know the initial starting state of the truck with perfect precision, so we initialize\n\n:<math>\\hat{\\mathbf{x}}_{0\\mid 0} = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix} </math>\n\nand to tell the filter that we know the exact position and velocity, we give it a zero covariance matrix:\n\n:<math>\\mathbf{P}_{0\\mid 0} = \\begin{bmatrix} 0 & 0 \\\\ 0 & 0 \\end{bmatrix} </math>\n\nIf the initial position and velocity are not known perfectly, the covariance matrix should be initialized with suitable variances on its diagonal:\n\n:<math>\\mathbf{P}_{0\\mid 0} = \\begin{bmatrix} \\sigma_x^2 & 0 \\\\ 0 & \\sigma_{\\dot{x}}^2 \\end{bmatrix} </math>\n\nThe filter will then prefer the information from the first measurements over the information already in the model.\n\n== Derivations ==\n{{Refimprove section|date=December 2010}}\n\n=== Deriving the ''a posteriori'' estimate covariance matrix ===\n\nStarting with our invariant on the error covariance '''P'''<sub>''k''&nbsp;|&nbsp;''k''</sub> as above\n\n:<math>\\mathbf{P}_{k\\mid k}  = \\mathrm{cov}(\\mathbf{x}_{k} - \\hat{\\mathbf{x}}_{k\\mid k})</math>\n\nsubstitute in the definition of <math>\\hat{\\mathbf{x}}_{k\\mid k}</math>\n:<math>\\mathbf{P}_{k\\mid k} = \\textrm{cov}(\\mathbf{x}_{k} - (\\hat{\\mathbf{x}}_{k\\mid k-1} + \\mathbf{K}_k\\tilde{\\mathbf{y}}_{k}))</math>\nand substitute  <math>\\tilde{\\mathbf{y}}_k</math>\n:<math>\\mathbf{P}_{k\\mid k} = \\textrm{cov}(\\mathbf{x}_{k} - (\\hat{\\mathbf{x}}_{k\\mid k-1} + \\mathbf{K}_k(\\mathbf{z}_k - \\mathbf{H}_k\\hat{\\mathbf{x}}_{k\\mid k-1})))</math>\nand <math>\\mathbf{z}_{k}</math>\n:<math>\\mathbf{P}_{k\\mid k} = \\textrm{cov}(\\mathbf{x}_{k} - (\\hat{\\mathbf{x}}_{k\\mid k-1} + \\mathbf{K}_k(\\mathbf{H}_k\\mathbf{x}_k + \\mathbf{v}_k - \\mathbf{H}_k\\hat{\\mathbf{x}}_{k\\mid k-1})))</math>\nand by collecting the error vectors we get\n:<math>\\mathbf{P}_{k|k} = \\textrm{cov}((I - \\mathbf{K}_k \\mathbf{H}_{k})(\\mathbf{x}_k - \\hat{\\mathbf{x}}_{k\\mid k-1}) - \\mathbf{K}_k \\mathbf{v}_k )</math>\nSince the measurement error '''v'''<sub>''k''</sub> is uncorrelated with the other terms, this becomes\n:<math>\\mathbf{P}_{k|k} = \\textrm{cov}((I - \\mathbf{K}_k \\mathbf{H}_{k})(\\mathbf{x}_k - \\hat{\\mathbf{x}}_{k\\mid k-1}))  + \\textrm{cov}(\\mathbf{K}_k \\mathbf{v}_k )</math>\nby the properties of [[covariance matrix|vector covariance]] this becomes\n:<math>\\mathbf{P}_{k\\mid k} = (I - \\mathbf{K}_k \\mathbf{H}_{k})\\textrm{cov}(\\mathbf{x}_k - \\hat{\\mathbf{x}}_{k\\mid k-1})(I - \\mathbf{K}_k \\mathbf{H}_{k})^{\\text{T}}  + \\mathbf{K}_k\\textrm{cov}(\\mathbf{v}_k )\\mathbf{K}_k^{\\text{T}}</math>\nwhich, using our invariant on '''P'''<sub>''k''&nbsp;|&nbsp;''k''\u22121</sub> and the definition of '''R'''<sub>''k''</sub> becomes\n:<math>\\mathbf{P}_{k\\mid k} =\n(I - \\mathbf{K}_k \\mathbf{H}_{k}) \\mathbf{P}_{k\\mid k-1} (I - \\mathbf{K}_k \\mathbf{H}_{k})^\\text{T} +\n\\mathbf{K}_k \\mathbf{R}_k \\mathbf{K}_k^\\text{T}\n</math>\nThis formula (sometimes known as the \"'''Joseph form'''\" of the covariance update equation) is valid for any value of '''K'''<sub>''k''</sub>. It turns out that if '''K'''<sub>''k''</sub> is the optimal Kalman gain, this can be simplified further as shown below.\n\n=== Kalman gain derivation ===\n\nThe Kalman filter is a [[minimum mean-square error]] estimator. The error in the ''a posteriori'' state estimation is\n:<math>\\mathbf{x}_{k} - \\hat{\\mathbf{x}}_{k\\mid k}</math>\n\nWe seek to minimize the expected value of the square of the magnitude of this vector, <math>\\textrm{E}[\\|\\mathbf{x}_{k} - \\hat{\\mathbf{x}}_{k|k}\\|^2]</math>. This is equivalent to minimizing the [[trace (matrix)|trace]] of the ''a posteriori'' estimate [[covariance matrix]] <math> \\mathbf{P}_{k|k} </math>. By expanding out the terms in the equation above and collecting, we get:\n\n:<math>\n\\begin{align}\n\\mathbf{P}_{k\\mid k} & = \\mathbf{P}_{k\\mid k-1} - \\mathbf{K}_k \\mathbf{H}_k \\mathbf{P}_{k\\mid k-1} - \\mathbf{P}_{k\\mid k-1} \\mathbf{H}_k^\\text{T} \\mathbf{K}_k^\\text{T} + \\mathbf{K}_k (\\mathbf{H}_k \\mathbf{P}_{k\\mid k-1} \\mathbf{H}_k^\\text{T} + \\mathbf{R}_k) \\mathbf{K}_k^\\text{T} \\\\[6pt]\n& = \\mathbf{P}_{k\\mid k-1} - \\mathbf{K}_k \\mathbf{H}_k \\mathbf{P}_{k\\mid k-1} - \\mathbf{P}_{k\\mid k-1} \\mathbf{H}_k^\\text{T} \\mathbf{K}_k^\\text{T} + \\mathbf{K}_k \\mathbf{S}_k\\mathbf{K}_k^\\text{T}\n\\end{align}\n</math>\n\nThe trace is minimized when its [[Matrix calculus|matrix derivative]] with respect to the gain matrix is zero. Using the [[Matrix calculus#Identities|gradient matrix rules]] and the symmetry of the matrices involved we find that\n:<math>\\frac{\\partial \\; \\mathrm{tr}(\\mathbf{P}_{k\\mid k})}{\\partial \\;\\mathbf{K}_k} = -2 (\\mathbf{H}_k \\mathbf{P}_{k\\mid k-1})^\\text{T} + 2 \\mathbf{K}_k \\mathbf{S}_k  = 0.</math>\n\nSolving this for '''K'''<sub>''k''</sub> yields the Kalman gain:\n\n:<math>\\mathbf{K}_k \\mathbf{S}_k = (\\mathbf{H}_k \\mathbf{P}_{k\\mid k-1})^\\text{T} = \\mathbf{P}_{k\\mid k-1} \\mathbf{H}_k^\\text{T}</math>\n\n:<math> \\mathbf{K}_{k} = \\mathbf{P}_{k\\mid k-1} \\mathbf{H}_k^\\text{T} \\mathbf{S}_k^{-1}</math>\n\nThis gain, which is known as the ''optimal Kalman gain'', is the one that yields [[Minimum mean-square error|MMSE]] estimates when used.\n\n=== Simplification of the ''a posteriori'' error covariance formula ===\n\nThe formula used to calculate the ''a posteriori'' error covariance can be simplified when the Kalman gain equals the optimal value derived above. Multiplying both sides of our Kalman gain formula on the right by '''S'''<sub>''k''</sub>'''K'''<sub>''k''</sub><sup>''T''</sup>, it follows that\n:<math>\\mathbf{K}_k \\mathbf{S}_k \\mathbf{K}_k^\\mathrm{T} = \\mathbf{P}_{k\\mid k-1} \\mathbf{H}_k^\\mathrm{T} \\mathbf{K}_k^\\mathrm{T}</math>\nReferring back to our expanded formula for the ''a posteriori'' error covariance,\n:<math> \\mathbf{P}_{k\\mid k} = \\mathbf{P}_{k\\mid k-1} - \\mathbf{K}_k \\mathbf{H}_k \\mathbf{P}_{k\\mid k-1}  - \\mathbf{P}_{k\\mid k-1} \\mathbf{H}_k^\\mathrm{T} \\mathbf{K}_k^\\mathrm{T} + \\mathbf{K}_k \\mathbf{S}_k \\mathbf{K}_k^\\mathrm{T}</math>\nwe find the last two terms cancel out, giving\n:<math> \\mathbf{P}_{k\\mid k} = \\mathbf{P}_{k\\mid k-1} - \\mathbf{K}_k \\mathbf{H}_k \\mathbf{P}_{k\\mid k-1} = (I - \\mathbf{K}_{k} \\mathbf{H}_{k}) \\mathbf{P}_{k\\mid k-1}.</math>\n\nThis formula is computationally cheaper and thus nearly always used in practice, but is only correct for the optimal gain. If arithmetic precision is unusually low causing problems with [[numerical stability]], or if a non-optimal Kalman gain is deliberately used, this simplification cannot be applied; the ''a posteriori'' error covariance formula as derived above (Joseph form) must be used.\n\n== Sensitivity analysis ==\n{{Refimprove section|date=December 2010}}\n\nThe Kalman filtering equations provide an estimate of the state <math>\\hat{\\mathbf{x}}_{k\\mid k}</math> and its error covariance <math>\\mathbf{P}_{k\\mid k}</math> recursively. The estimate and its quality depend on the system parameters and the noise statistics fed as inputs to the estimator. This section analyzes the effect of uncertainties in the statistical inputs to the filter.<ref name=anderson>{{cite book|last= Anderson|first= Brian D. O.|last2=Moore|first2=John B.|year=1979 |title=Optimal Filtering |publisher=[[Prentice Hall]]|place=New York|pages=129\u2013133|isbn= 0-13-638122-7}}</ref> In the absence of reliable statistics or the true values of noise covariance matrices <math>\\mathbf{Q}_{k}</math> and <math>\\mathbf{R}_{k}</math>, the expression\n\n:<math>\\mathbf{P}_{k\\mid k} = (\\mathbf{I} - \\mathbf{K}_k\\mathbf{H}_k)\\mathbf{P}_{k\\mid k-1}(\\mathbf{I} - \\mathbf{K}_k\\mathbf{H}_k)^\\mathrm{T} + \\mathbf{K}_k\\mathbf{R}_k\\mathbf{K}_k^\\mathrm{T} </math>\n\nno longer provides the actual error covariance. In other words, <math>\\mathbf{P}_{k\\mid k} \\neq E[(\\mathbf{x}_k - \\hat{\\mathbf{x}}_{k\\mid k})(\\mathbf{x}_k - \\hat{\\mathbf{x}}_{k\\mid k})^\\mathrm{T}]</math>.  In most real-time applications, the covariance matrices that are used in designing the Kalman filter are different from the actual (true) noise covariances matrices.{{citation needed|date=December 2010}} This sensitivity analysis describes the behavior of the estimation error covariance when the noise covariances as well as the system matrices <math>\\mathbf{F}_{k}</math> and <math>\\mathbf{H}_{k}</math> that are fed as inputs to the filter are incorrect. Thus, the sensitivity analysis describes the robustness (or sensitivity) of the estimator to misspecified statistical and parametric inputs to the estimator.\n\nThis discussion is limited to the error sensitivity analysis for the case of statistical uncertainties. Here the actual noise covariances are denoted by <math>\\mathbf{Q}^{a}_k</math> and <math>\\mathbf{R}^{a}_k</math> respectively, whereas the design values used in the estimator are <math>\\mathbf{Q}_k</math> and <math>\\mathbf{R}_k</math> respectively. The actual error covariance is denoted by <math>\\mathbf{P}_{k\\mid k}^a</math> and <math>\\mathbf{P}_{k\\mid k}</math> as computed by the Kalman filter is referred to as the Riccati variable. When <math>\\mathbf{Q}_k \\equiv \\mathbf{Q}^{a}_k</math> and <math>\\mathbf{R}_k \\equiv \\mathbf{R}^{a}_k</math>, this means that <math>\\mathbf{P}_{k\\mid k} = \\mathbf{P}_{k\\mid k}^a</math>. While computing the actual error covariance using <math>\\mathbf{P}_{k\\mid k}^a = E[(\\mathbf{x}_k - \\hat{\\mathbf{x}}_{k\\mid k})(\\mathbf{x}_k - \\hat{\\mathbf{x}}_{k\\mid k})^\\mathrm{T}] </math>, substituting for <math>\\widehat{\\mathbf{x}}_{k\\mid k}</math> and using the fact that <math>E[\\mathbf{w}_k\\mathbf{w}_k^\\mathrm{T}] = \\mathbf{Q}_{k}^a</math> and <math>E[\\mathbf{v}_k\\mathbf{v}_k^\\mathrm{T}] = \\mathbf{R}_{k}^a</math>, results in the following recursive equations for <math>\\mathbf{P}_{k\\mid k}^a</math> :\n\n:<math>\\mathbf{P}_{k\\mid k-1}^a = \\mathbf{F}_k\\mathbf{P}_{k-1\\mid k-1}^a\\mathbf{F}_k^\\mathrm{T} + \\mathbf{Q}_k^a </math>\n\nand\n\n:<math>\\mathbf{P}_{k\\mid k}^a = (\\mathbf{I} - \\mathbf{K}_k\\mathbf{H}_k)\\mathbf{P}_{k\\mid k-1}^a(\\mathbf{I} - \\mathbf{K}_k\\mathbf{H}_k)^\\mathrm{T} + \\mathbf{K}_k\\mathbf{R}_k^a\\mathbf{K}_k^\\mathrm{T} </math>\n\nWhile computing <math>\\mathbf{P}_{k\\mid k}</math>, by design the filter implicitly assumes that <math>E[\\mathbf{w}_k\\mathbf{w}_k^\\mathrm{T}] = \\mathbf{Q}_{k}</math> and <math>E[\\mathbf{v}_k\\mathbf{v}_k^\\mathrm{T}] = \\mathbf{R}_{k}</math>. Note that the recursive expressions for <math>\\mathbf{P}_{k\\mid k}^a</math> and <math>\\mathbf{P}_{k\\mid k}</math> are identical except for the presence of <math>\\mathbf{Q}_{k}^a</math> and <math>\\mathbf{R}_{k}^a</math> in place of the design values <math>\\mathbf{Q}_{k}</math> and <math>\\mathbf{R}_{k}</math> respectively.\n\n== Square root form ==\nOne problem with the Kalman filter is its [[numerical stability]].  If the process noise covariance '''Q'''<sub>''k''</sub> is small, round-off error often causes a small positive eigenvalue to be computed as a negative number.  This renders the numerical representation of the state covariance matrix '''P''' [[Positive-semidefinite matrix|indefinite]], while its true form is [[Positive-definite matrix|positive-definite]].\n\nPositive definite matrices have the property that they have a [[triangular matrix]] [[Square root of a matrix|square root]] '''P'''&nbsp;=&nbsp;'''S'''\u00b7'''S'''<sup>T</sup>.  This can be computed efficiently using the [[Cholesky factorization]] algorithm, but more importantly, if the covariance is kept in this form, it can never have a negative diagonal or become asymmetric. An equivalent form, which avoids many of the [[square root]] operations required by the matrix square root yet preserves the desirable numerical properties, is the U-D decomposition form, '''P'''&nbsp;=&nbsp;'''U'''\u00b7'''D'''\u00b7'''U'''<sup>T</sup>, where '''U''' is a [[unit triangular matrix]] (with unit diagonal), and '''D''' is a diagonal matrix.\n\nBetween the two, the U-D factorization uses the same amount of storage, and somewhat less computation, and is the most commonly used square root form.  (Early literature on the relative efficiency is somewhat misleading, as it assumed that square roots were much more time-consuming than divisions,<ref name=thornton />{{rp|69}} while on 21-st century computers they are only slightly more expensive.)\n\nEfficient algorithms for the Kalman prediction and update steps in the square root form were developed by G. J. Bierman and C. L. Thornton.<ref name=thornton>{{cite journal |title=Triangular Covariance Factorizations for Kalman Filtering |url=http://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19770005172_1977005172.pdf |others=(PhD thesis) |first=Catherine L. |last=Thornton |date=15 October 1976|id=NASA Technical Memorandum 33-798 |publisher=[[NASA]] }}</ref><ref name=\"bierman\" />\n\nThe [[LDL decomposition|'''L'''\u00b7'''D'''\u00b7'''L'''<sup>T</sup> decomposition]] of the innovation covariance matrix '''S'''<sub>k</sub> is the basis for another type of numerically efficient and robust square root filter.<ref name=barshalom>{{cite book|last=Bar-Shalom|first= Yaakov|last2=Li|first2=X. Rong|last3=Kirubarajan|first3=Thiagalingam |date=July 2001 |title=Estimation with Applications to Tracking and Navigation |publisher=[[John Wiley & Sons]]|place=New York|isbn =978-0-471-41655-5  |pages=308\u2013317}}</ref> The algorithm starts with the LU decomposition as implemented in the Linear Algebra PACKage ([[LAPACK]]). These results are further factored into the '''L'''\u00b7'''D'''\u00b7'''L'''<sup>T</sup> structure with methods given by Golub and Van Loan (algorithm 4.1.2) for a symmetric nonsingular matrix.<ref name=golub>{{cite book|last=Golub |first=Gene H. |first2=Charles F. |last2=Van Loan |year=1996|title=Matrix Computations|publisher=[[Johns Hopkins University]]|edition=Third|page=139|isbn =978-0-8018-5414-9 |place =Baltimore, Maryland|series=Johns Hopkins Studies in the Mathematical Sciences}}</ref> Any singular covariance matrix is [[Pivot element|pivoted]] so that the first diagonal partition is [[Invertible matrix|nonsingular]] and [[Condition number|well-conditioned]]. The pivoting algorithm must retain any portion of the innovation covariance matrix directly corresponding to observed state-variables '''H'''<sub>k</sub>\u00b7'''x'''<sub>k|k-1</sub> that are associated with auxiliary observations in\n'''y'''<sub>k</sub>. The '''l'''\u00b7'''d'''\u00b7'''l'''<sup>t</sup> square-root filter requires [[orthogonalization]] of the observation vector.<ref name=\"bierman\" /><ref name=\"barshalom\" /> This may be done with the inverse square-root of the covariance matrix for the auxiliary variables using Method 2 in Higham (2002, p.&nbsp;263).<ref name=higham>{{cite book|first=Nicholas J. |last=Higham|year=2002|title=Accuracy and Stability of Numerical Algorithms|edition=Second|isbn =978-0-89871-521-7|page=680|publisher=[[Society for Industrial and Applied Mathematics]]|place =Philadelphia, PA}}</ref>\n\n== Relationship to recursive Bayesian estimation ==\n\nThe Kalman filter can be presented as one of the simplest [[dynamic Bayesian network]]s. The Kalman filter calculates estimates of the true values of states recursively over time using incoming measurements and a mathematical process model. Similarly, [[recursive Bayesian estimation]] calculates [[density estimation|estimates]] of an unknown [[probability density function]] (PDF) recursively over time using incoming measurements and a mathematical process model.<ref>{{cite journal|first1=C. Johan |last1=Masreliez|first2= R D|last2= Martin |year=1977|url=http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=1101538 |title=Robust Bayesian estimation for the linear model and robustifying the Kalman filter|journal= IEEE Transactions on Automatic Control|volume= 22|issue= 3|pages= 361\u2013371|doi=10.1109/TAC.1977.1101538|authorlink1= C. Johan Masreliez}}</ref>\n\nIn recursive Bayesian estimation, the true state is assumed to be an unobserved [[Markov process]], and the measurements are the observed states of a hidden Markov model (HMM).\n\n[[File:HMM Kalman Filter Derivation.svg|center|hidden markov model]]\n\nbecause of the Markov assumption, the true state is conditionally independent of all earlier states given the immediately previous state.\n\n:<math>p(\\textbf{x}_k\\mid \\textbf{x}_0,\\dots,\\textbf{x}_{k-1}) = p(\\textbf{x}_k\\mid \\textbf{x}_{k-1})</math>\n\nSimilarly, the measurement at the ''k''-th timestep is dependent only upon the current state and is conditionally independent of all other states given the current state.\n\n:<math>p(\\textbf{z}_k\\mid\\textbf{x}_0,\\dots,\\textbf{x}_{k}) = p(\\textbf{z}_k\\mid \\textbf{x}_{k} )</math>\n\nUsing these assumptions the probability distribution over all states of the hidden Markov model can be written simply as:\n\n:<math>p(\\textbf{x}_0,\\dots,\\textbf{x}_k, \\textbf{z}_1,\\dots,\\textbf{z}_k) = p(\\textbf{x}_0)\\prod_{i=1}^k p(\\textbf{z}_i\\mid \\textbf{x}_i)p(\\textbf{x}_i\\mid \\textbf{x}_{i-1})</math>\n\nHowever, when the Kalman filter is used to estimate the state '''x''', the probability distribution of interest is that associated with the current states conditioned on the measurements up to the current timestep. This is achieved by marginalizing out the previous states and dividing by the probability of the measurement set.\n\nThis leads to the ''predict'' and ''update'' steps of the Kalman filter written probabilistically. The probability distribution associated with the predicted state is the sum (integral) of the products of the probability distribution associated with the transition from the (''k''&nbsp;\u2212&nbsp;1)-th timestep to the ''k''-th and the probability distribution associated with the previous state, over all possible <math>x_{k-1}</math>.\n\n:<math> p(\\textbf{x}_k\\mid \\textbf{Z}_{k-1}) = \\int p(\\textbf{x}_k \\mid  \\textbf{x}_{k-1}) p(\\textbf{x}_{k-1} \\mid  \\textbf{Z}_{k-1} )  \\, d\\textbf{x}_{k-1} </math>\n\nThe measurement set up to time ''t'' is\n:<math> \\textbf{Z}_{t} = \\left \\{ \\textbf{z}_{1},\\dots,\\textbf{z}_{t} \\right \\} </math>\n\nThe probability distribution of the update is proportional to the product of the measurement likelihood and the predicted state.\n:<math> p(\\textbf{x}_k\\mid \\textbf{Z}_{k}) = \\frac{p(\\textbf{z}_k\\mid \\textbf{x}_k) p(\\textbf{x}_k\\mid \\textbf{Z}_{k-1})}{p(\\textbf{z}_k\\mid \\textbf{Z}_{k-1})} </math>\n\nThe denominator\n:<math>p(\\textbf{z}_k\\mid \\textbf{Z}_{k-1}) = \\int p(\\textbf{z}_k\\mid \\textbf{x}_k) p(\\textbf{x}_k\\mid \\textbf{Z}_{k-1}) \\, d\\textbf{x}_k</math>\nis a normalization term.\n\nThe remaining probability density functions are\n\n:<math> p(\\textbf{x}_k \\mid  \\textbf{x}_{k-1}) = \\mathcal{N}(\\textbf{F}_k\\textbf{x}_{k-1}, \\textbf{Q}_k)</math>\n\n:<math> p(\\textbf{z}_k\\mid \\textbf{x}_k) = \\mathcal{N}(\\textbf{H}_{k}\\textbf{x}_k, \\textbf{R}_k) </math>\n\n:<math> p(\\textbf{x}_{k-1}\\mid \\textbf{Z}_{k-1}) = \\mathcal{N}(\\hat{\\textbf{x}}_{k-1}, \\textbf{P}_{k-1} )</math>\n\nNote that the PDF at the previous timestep is inductively assumed to be the estimated state and covariance. This is justified because, as an optimal estimator, the Kalman filter makes best use of the measurements, therefore the PDF for <math>\\mathbf{x}_k</math>  given the measurements <math>\\mathbf{Z}_k</math> is the Kalman filter estimate.\n\n== Marginal likelihood ==\n\nRelated to the recursive Bayesian interpretation described above, the Kalman filter can be viewed as a [[generative model]], i.e., a process for ''generating'' a stream of random observations '''z''' = ('''z'''<sub>0</sub>, '''z'''<sub>1</sub>, '''z'''<sub>2</sub>, \u2026). Specifically, the process is\n\n# Sample a hidden state <math>\\mathbf{x}_0</math> from the Gaussian prior distribution <math>p(\\mathbf{x}_0) = \\mathcal{N}(\\hat{\\mathbf{x}}_{0\\mid 0}, \\mathbf{P}_{0\\mid 0})</math>.\n# Sample an observation <math>\\mathbf{z}_0</math> from the observation model <math>p(\\mathbf{z}_0\\mid \\mathbf{x}_0) = \\mathcal{N}(\\mathbf{H}_0\\mathbf{x}_0, \\mathbf{R}_0)</math>.\n# For <math>k = 1,2,3,\\ldots</math>, do\n## Sample the next hidden state <math>\\mathbf{x}_k</math> from the transition model <math>p(\\mathbf{x}_{k} \\mid \\mathbf{x}_{k-1}) = \\mathcal{N}(\\mathbf{F}_k \\mathbf{x}_{k-1} + \\mathbf{B}_k\\mathbf{u}_k, \\mathbf{Q}_k).</math>\n## Sample an observation <math>\\mathbf{z}_k</math> from the observation model <math>p(\\mathbf{z}_k\\mid \\mathbf{x}_k) = \\mathcal{N}(\\mathbf{H}_k\\mathbf{x}_k, \\mathbf{R}_k).</math>\n\nNote that this process has identical structure to the [[hidden Markov model]], except that the discrete state and observations are replaced with continuous variables sampled from Gaussian distributions.\n\nIn some applications, it is useful to compute the ''probability'' that a Kalman filter with a given set of parameters (prior distribution, transition and observation models, and control inputs) would generate a particular observed signal. This probability is known as the [[marginal likelihood]] because it integrates over (\"marginalizes out\") the values of the hidden state variables, so it can be computed using only the observed signal. The marginal likelihood can be useful to evaluate different parameter choices, or to compare the Kalman filter against other models using [[Bayesian model comparison]].\n\nIt is straightforward to compute the marginal likelihood as a side effect of the recursive filtering computation. By the [[Chain rule (probability)|chain rule]], the likelihood can be factored as the product of the probability of each observation given previous observations,\n:<math>p(\\mathbf{z}) = \\prod_{k=0}^T p(\\mathbf{z}_k \\mid \\mathbf{z}_{k-1}, \\ldots,\\mathbf{z}_0)</math>,\n\nand because the Kalman filter describes a Markov process, all relevant information from previous observations is contained in the current state estimate <math>\\hat{\\mathbf{x}}_{k\\mid k-1}, \\mathbf{P}_{k\\mid k-1}.</math> Thus the marginal likelihood is given by\n:<math>\\begin{align}\np(\\mathbf{z}) &= \\prod_{k=0}^T \\int p(\\mathbf{z}_k \\mid \\mathbf{x}_k ) p(\\mathbf{x}_k \\mid \\mathbf{z}_{k-1}, \\ldots,\\mathbf{z}_0 ) d \\mathbf{x}_k\\\\\n&= \\prod_{k=0}^T \\int \\mathcal{N}(\\mathbf{z}_k;  \\mathbf{H}_k\\mathbf{x}_k, \\mathbf{R}_k) \\mathcal{N}(\\mathbf{x}_k;  \\hat{\\mathbf{x}}_{k\\mid k-1}, \\mathbf{P}_{k\\mid k-1})  d \\mathbf{x}_k\\\\\n&= \\prod_{k=0}^T \\mathcal{N}(\\mathbf{z}_k;  \\mathbf{H}_k\\hat{\\mathbf{x}}_{k\\mid k-1}, \\mathbf{R}_k + \\mathbf{H}_k \\mathbf{P}_{k\\mid k-1} \\mathbf{H}_k^T )\\\\\n&= \\prod_{k=0}^T \\mathcal{N}(\\mathbf{z}_k;  \\mathbf{H}_k\\hat{\\mathbf{x}}_{k\\mid k-1}, \\mathbf{S}_k),\n\\end{align}</math>\ni.e., a product of Gaussian densities, each corresponding to the density of one observation '''z'''<sub>''k''</sub> under the current filtering distribution <math>\\mathbf{H}_k\\hat{\\mathbf{x}}_{k\\mid k-1}, \\mathbf{S}_k</math>. This can easily be computed as a simple recursive update; however, to avoid [[Arithmetic underflow|numeric underflow]], in a practical implementation it is usually desirable to compute the ''log'' marginal likelihood <math>\\ell = \\log p(\\mathbf{z})</math> instead. Adopting the convention <math>\\ell^{(-1)} = 0</math>, this can be done via the recursive update rule\n:<math>\\ell^{(k)} = \\ell^{(k-1)} - \\frac{1}{2} \\left(\\tilde{\\mathbf{y}}_k^T \\mathbf{S}^{-1}_k \\tilde{\\mathbf{y}}_k + \\log \\left|\\mathbf{S}_k\\right| + d_{y}\\log 2\\pi \\right),</math>\nwhere <math>d_y</math> is the dimension of the measurement vector.\n<ref>{{Cite book|last=L\u00fctkepohl|first= Helmut|title=Introduction to Multiple Time Series Analysis|publisher= Springer-Verlag Berlin, |location=Heidelberg|year= 1991|page=435}}</ref>\n\nAn important application where such a (log) likelihood of the observations (given the filter parameters) is used is multi-target tracking. For example, consider an object tracking scenario where a stream of observations is the input, however, it is unknown how many objects are in the scene (or, the number of objects is known but is greater than one). In such a scenario, it can be unknown apriori which observations/measurements were generated by which object. A multiple hypothesis tracker (MHT) typically will form different track association hypotheses, where each hypothesis can be viewed as a Kalman filter (in the linear Gaussian case) with a specific set of parameters associated with the hypothesized object. Thus, it is important to compute the likelihood of the observations for the different hypotheses under consideration, such that the most-likely one can be found.\n\n== Information filter ==\n{{Refimprove section|date=April 2016}}\n\nIn the information filter, or inverse covariance filter, the estimated covariance and estimated state are replaced by the [[Fisher information matrix|information matrix]] and [[Fisher information|information]] vector respectively. These are defined as:\n\n:<math>\\textbf{Y}_{k\\mid k} =  \\textbf{P}_{k\\mid k}^{-1} </math>\n:<math>\\hat{\\textbf{y}}_{k\\mid k} =  \\textbf{P}_{k\\mid k}^{-1}\\hat{\\textbf{x}}_{k\\mid k} </math>\n\nSimilarly the predicted covariance and state have equivalent information forms, defined as:\n\n:<math>\\textbf{Y}_{k\\mid k-1} =  \\textbf{P}_{k\\mid k-1}^{-1} </math>\n:<math>\\hat{\\textbf{y}}_{k\\mid k-1} =  \\textbf{P}_{k\\mid k-1}^{-1}\\hat{\\textbf{x}}_{k\\mid k-1} </math>\n\nas have the measurement covariance and measurement vector, which are defined as:\n\n:<math>\\textbf{I}_{k} = \\textbf{H}_{k}^{\\text{T}} \\textbf{R}_{k}^{-1} \\textbf{H}_{k} </math>\n:<math>\\textbf{i}_{k} = \\textbf{H}_{k}^{\\text{T}} \\textbf{R}_{k}^{-1} \\textbf{z}_{k} </math>\n\nThe information update now becomes a trivial sum.<ref name=terejanu>{{cite web|title=Discrete Kalman Filter Tutorial |author=Gabriel T. Terejanu |publication-date=2012-08-04 |accessdate=2016-04-13 |url=https://cse.sc.edu/~terejanu/files/tutorialKF.pdf}}</ref>\n\n:<math>\\textbf{Y}_{k\\mid k} = \\textbf{Y}_{k\\mid k-1} + \\textbf{I}_{k}</math>\n:<math>\\hat{\\textbf{y}}_{k\\mid k} = \\hat{\\textbf{y}}_{k\\mid k-1} + \\textbf{i}_{k}</math>\n\nThe main advantage of the information filter is that ''N'' measurements can be filtered at each timestep simply by summing their information matrices and vectors.\n\n:<math>\\textbf{Y}_{k\\mid k} = \\textbf{Y}_{k\\mid k-1} + \\sum_{j=1}^N \\textbf{I}_{k,j}</math>\n:<math>\\hat{\\textbf{y}}_{k\\mid k} = \\hat{\\textbf{y}}_{k\\mid k-1} + \\sum_{j=1}^N \\textbf{i}_{k,j}</math>\n\nTo predict the information filter the information matrix and vector can be converted back to their state space equivalents, or alternatively the information space prediction can be used.<ref name=terejanu />\n\n:<math>\\textbf{M}_{k} =\n  [\\textbf{F}_{k}^{-1}]^{\\text{T}} \\textbf{Y}_{k-1\\mid k-1} \\textbf{F}_{k}^{-1} </math>\n\n:<math>\\textbf{C}_{k} =\n  \\textbf{M}_{k} [\\textbf{M}_{k}+\\textbf{Q}_{k}^{-1}]^{-1}</math>\n:<math>\\textbf{L}_{k} =\n  I - \\textbf{C}_{k} </math>\n:<math>\\textbf{Y}_{k\\mid k-1} =\n  \\textbf{L}_{k} \\textbf{M}_{k} \\textbf{L}_{k}^{\\text{T}} +\n  \\textbf{C}_{k} \\textbf{Q}_{k}^{-1} \\textbf{C}_{k}^{\\text{T}}</math>\n\n:<math>\\hat{\\textbf{y}}_{k\\mid k-1} =\n  \\textbf{L}_{k} [\\textbf{F}_{k}^{-1}]^{\\text{T}}\\hat{\\textbf{y}}_{k-1\\mid k-1} </math>\n\nNote that if ''F'' and ''Q'' are time invariant these values can be cached. Note also that ''F'' and ''Q'' need to be invertible.\n\n== Fixed-lag smoother ==\n{{Refimprove section|date=December 2010}}\n\nThe optimal fixed-lag smoother provides the optimal estimate of <math>\\hat{\\textbf{x}}_{k-N \\mid  k}</math> for a given fixed-lag <math>N</math> using the measurements from <math>\\textbf{z}_{1}</math> to <math>\\textbf{z}_{k}</math>.<ref>{{cite book|last1=Anderson|first1=Brian D. O.|last2=Moore|first2=John B.|title=Optimal Filtering|date=1979|publisher=Prentice Hall, Inc.|location=Englewood Cliffs, NJ|isbn=0-13-638122-7|pages=176\u2013190}}</ref> It can be derived using the previous theory via an augmented state, and the main equation of the filter is the following:\n\n:<math>\n \\begin{bmatrix}\n  \\hat{\\textbf{x}}_{t\\mid t} \\\\\n  \\hat{\\textbf{x}}_{t-1\\mid t} \\\\\n  \\vdots \\\\\n  \\hat{\\textbf{x}}_{t-N+1\\mid t} \\\\\n \\end{bmatrix}\n =\n \\begin{bmatrix}\n  \\textbf{I} \\\\\n  0 \\\\\n  \\vdots \\\\\n  0 \\\\\n \\end{bmatrix}\n \\hat{\\textbf{x}}_{t\\mid t-1}\n +\n \\begin{bmatrix}\n  0  & \\ldots & 0 \\\\\n  \\textbf{I} & 0  & \\vdots \\\\\n  \\vdots  & \\ddots & \\vdots \\\\\n  0  & \\ldots & I \\\\\n \\end{bmatrix}\n \\begin{bmatrix}\n  \\hat{\\textbf{x}}_{t-1\\mid t-1} \\\\\n  \\hat{\\textbf{x}}_{t-2\\mid t-1} \\\\\n  \\vdots \\\\\n  \\hat{\\textbf{x}}_{t-N+1\\mid t-1} \\\\\n \\end{bmatrix}\n +\n \\begin{bmatrix}\n  \\textbf{K}^{(0)} \\\\\n  \\textbf{K}^{(1)} \\\\\n  \\vdots \\\\\n  \\textbf{K}^{(N-1)} \\\\\n \\end{bmatrix}\n \\textbf{y}_{t\\mid t-1}\n</math>\n\nwhere:\n* <math> \\hat{\\textbf{x}}_{t\\mid t-1} </math> is estimated via a standard Kalman filter;\n* <math> \\textbf{y}_{t\\mid t-1} = \\textbf{z}_t - \\textbf{H}\\hat{\\textbf{x}}_{t\\mid t-1} </math> is the innovation produced considering the estimate of the standard Kalman filter;\n* the various <math> \\hat{\\textbf{x}}_{t-i\\mid t} </math> with <math> i = 1,\\ldots,N-1 </math> are new variables, i.e. they do not appear in the standard Kalman filter;\n* the gains are computed via the following scheme:\n::<math>\n\\textbf{K}^{(i)} =\n\\textbf{P}^{(i)} \\textbf{H}^{T}\n\\left[\n \\textbf{H} \\textbf{P} \\textbf{H}^\\mathrm{T} + \\textbf{R}\n\\right]^{-1}\n</math>\n:and\n::<math>\n\\textbf{P}^{(i)} =\n\\textbf{P}\n\\left[\n \\left[\n  \\textbf{F} - \\textbf{K} \\textbf{H}\n \\right]^{T}\n\\right]^{i}\n</math>\n:where <math> \\textbf{P} </math> and <math> \\textbf{K} </math> are the prediction error covariance and the gains of the standard Kalman filter (i.e., <math> \\textbf{P}_{t\\mid t-1} </math>).\n\nIf the estimation error covariance is defined so that\n\n:<math>\n\\textbf{P}_{i} :=\nE\n\\left[\n \\left(\n  \\textbf{x}_{t-i} - \\hat{\\textbf{x}}_{t-i\\mid t}\n \\right)^{*}\n \\left(\n  \\textbf{x}_{t-i} - \\hat{\\textbf{x}}_{t-i\\mid t}\n \\right)\n \\mid\n z_{1} \\ldots z_{t}\n\\right],\n</math>\n\nthen we have that the improvement on the estimation of <math> \\textbf{x}_{t-i} </math> is given by:\n\n:<math>\n\\textbf{P}-\\textbf{P}_{i} =\n\\sum_{j = 0}^{i}\n\\left[\n \\textbf{P}^{(j)} \\textbf{H}^{T}\n \\left[\n \\textbf{H} \\textbf{P} \\textbf{H}^\\mathrm{T} + \\textbf{R}\n \\right]^{-1}\n \\textbf{H} \\left( \\textbf{P}^{(i)} \\right)^\\mathrm{T}\n\\right]\n</math>\n\n== Fixed-interval smoothers ==\n\nThe optimal fixed-interval smoother provides the optimal estimate of <math>\\hat{\\textbf{x}}_{k \\mid  n}</math> (<math>k < n</math>) using the measurements from a fixed interval <math>\\textbf{z}_{1}</math> to <math>\\textbf{z}_{n}</math>. This is also called \"Kalman Smoothing\". There are several smoothing algorithms in common use.\n\n=== Rauch\u2013Tung\u2013Striebel ===\n\nThe Rauch\u2013Tung\u2013Striebel (RTS) smoother is an efficient two-pass algorithm for fixed interval smoothing.<ref>{{cite journal | last = Rauch | first =  H.E. | last2 = Tung | first2 = F. | last3 = Striebel | first3 = C. T. | title = Maximum likelihood estimates of linear dynamic systems | journal = AIAA Journal| volume = 3 | issue = 8 | pages = 1445\u20131450 | date=August 1965 | doi = 10.2514/3.3166 | bibcode =    1965AIAAJ...3.1445.}}</ref>\n\nThe forward pass is the same as the regular Kalman filter algorithm. These ''filtered'' a-priori and a-posteriori state estimates <math>\\hat{\\textbf{x}}_{k\\mid k-1}</math>, <math>\\hat{\\textbf{x}}_{k\\mid k}</math> and covariances <math>\\textbf{P}_{k\\mid k-1}</math>, <math>\\textbf{P}_{k\\mid k}</math> are saved for use in the backwards pass.\n\nIn the backwards pass, we compute the ''smoothed'' state estimates <math>\\hat{\\textbf{x}}_{k\\mid n}</math> and covariances <math>\\textbf{P}_{k\\mid n}</math>. We start at the last time step and proceed backwards in time using the following recursive equations:\n:<math>\\hat{\\textbf{x}}_{k\\mid n} = \\hat{\\textbf{x}}_{k\\mid k} + \\textbf{C}_k ( \\hat{\\textbf{x}}_{k+1\\mid n} - \\hat{\\textbf{x}}_{k+1\\mid k} ) </math>\n:<math>\\textbf{P}_{k\\mid n} = \\textbf{P}_{k\\mid k} + \\textbf{C}_k ( \\textbf{P}_{k+1\\mid n} - \\textbf{P}_{k+1\\mid k} ) \\textbf{C}_k^\\mathrm{T} </math>\nwhere\n:<math> \\textbf{C}_k = \\textbf{P}_{k\\mid k} \\textbf{F}_{k+1}^\\mathrm{T} \\textbf{P}_{k+1\\mid k}^{-1} </math>.\n\nNote that <math> \\textbf{x}_{k\\mid k}</math> is the a-posteriori state estimate of timestep <math>k</math> and <math>\\mathbf{x}_{k+1\\mid k}</math> is the a-priori state estimate of timestep <math>k+1</math>. The same notation applies to the covariance.\n\n=== Modified Bryson\u2013Frazier smoother ===\n\nAn alternative to the RTS algorithm is the modified Bryson\u2013Frazier (MBF) fixed interval smoother developed by Bierman.<ref name=bierman>{{cite journal | last = Bierman | first =  G.J. | title = Factorization Methods for Discrete Sequential Estimation | publisher = Academic Press | year = 1977 | bibcode = 1977fmds.book.....B | journal = Factorization Methods for Discrete Sequential Estimation }}</ref> This also uses a backward pass that processes data saved from the Kalman filter forward pass. The equations for the backward pass involve the recursive\ncomputation of data which are used at each observation time to compute the smoothed state and covariance.\n\nThe recursive equations are\n\n:<math>\\tilde{\\Lambda}_k =  \\textbf{H}_k^T \\textbf{S}_k^{-1} \\textbf{H}_k + \\hat{\\textbf{C}}_k^T \\hat{\\Lambda}_k \\hat{\\textbf{C}}_k</math>\n:<math>\\hat{\\Lambda}_{k-1} = \\textbf{F}_k^T\\tilde{\\Lambda}_{k}\\textbf{F}_k</math>\n:<math>\\hat{\\Lambda}_n = 0</math>\n:<math>\\tilde{\\lambda}_k =  -\\textbf{H}_k^T \\textbf{S}_k^{-1} \\textbf{y}_k + \\hat{\\textbf{C}}_k^T \\hat{\\lambda}_k</math>\n:<math>\\hat{\\lambda}_{k-1} = \\textbf{F}_k^T\\tilde{\\lambda}_{k}</math>\n:<math>\\hat{\\lambda}_n = 0</math>\n\nwhere <math>\\textbf{S}_k</math> is the residual covariance and <math>\\hat{\\textbf{C}}_k = \\textbf{I} - \\textbf{K}_k\\textbf{H}_k</math>. The smoothed state and covariance can then be found by substitution in the equations\n\n:<math>\\textbf{P}_{k\\mid n} = \\textbf{P}_{k\\mid k} - \\textbf{P}_{k\\mid k}\\hat{\\Lambda}_k\\textbf{P}_{k\\mid k}</math>\n:<math>\\textbf{x}_{k\\mid n} = \\textbf{x}_{k\\mid k} - \\textbf{P}_{k\\mid k}\\hat{\\lambda}_k</math>\n\nor\n\n:<math>\\textbf{P}_{k\\mid n} = \\textbf{P}_{k\\mid k-1} - \\textbf{P}_{k\\mid k-1}\\tilde{\\Lambda}_k\\textbf{P}_{k\\mid k-1}</math>\n:<math>\\textbf{x}_{k\\mid n} = \\textbf{x}_{k\\mid k-1} - \\textbf{P}_{k\\mid k-1}\\tilde{\\lambda}_k.</math>\n\nAn important advantage of the MBF is that it does not require finding the inverse of the covariance matrix.\n\n=== Minimum-variance smoother ===\n\nThe minimum-variance smoother can attain the best-possible error performance, provided that the models are linear, their parameters and the noise statistics are known precisely.<ref>{{cite journal | last = Einicke | first =  G.A. | title = Optimal and Robust Noncausal Filter Formulations | journal = IEEE Trans. Signal Processing | volume = 54 | issue = 3 | pages = 1069\u20131077 | date=March 2006 | bibcode = 2006ITSP...54.1069E | doi = 10.1109/TSP.2005.863042 }}</ref> This smoother is a time-varying state-space generalization of the optimal non-causal [[Wiener filter]].\n\nThe smoother calculations are done in two passes. The forward calculations involve a one-step-ahead predictor and are given by\n:<math>\\hat{\\textbf{x}}_{k+1\\mid k} = \\textbf{(F}_{k}-\\textbf{K}_{k}\\textbf{H}_{k})\\hat{\\textbf{x}}_{k\\mid k-1} + \\textbf{K}_{k} \\textbf{z}_{k}  </math>\n:<math>{\\alpha}_{k} = -\\textbf{S}_k^{-1/2} \\textbf{H}_{k}\\hat{\\textbf{x}}_{k\\mid k-1} +\n\\textbf{S}_k^{-1/2} \\textbf{z}_{k} </math>\n\nThe above system is known as the inverse Wiener-Hopf factor. The backward recursion is the adjoint of the above forward system. The result of the backward pass <math>\\beta_{k}</math>  may be calculated by operating the forward equations on the time-reversed <math>\\alpha_{k}</math>  and time reversing the result. In the case of output estimation, the smoothed estimate is given by\n:<math>\\hat{\\textbf{y}}_{k\\mid N} = \\textbf{z}_{k} - \\textbf{R}_{k}\\beta_{k}   </math>\n\nTaking the causal part of this minimum-variance smoother yields\n:<math>\\hat{\\textbf{y}}_{k\\mid k} = \\textbf{z}_{k} - \\textbf{R}_{k} \\textbf{S}_k^{-1/2} \\alpha_{k}   </math>\n\nwhich is identical to the minimum-variance Kalman filter. The above solutions minimize the variance of the output estimation error. Note that the Rauch\u2013Tung\u2013Striebel smoother derivation assumes that the underlying distributions are Gaussian, whereas the minimum-variance solutions do not. Optimal smoothers for state estimation and input estimation can be constructed similarly.\n\nA continuous-time version of the above smoother is described in.<ref>{{cite journal | last = Einicke | first =  G.A. | title = Asymptotic Optimality of the Minimum-Variance Fixed-Interval Smoother | journal = IEEE Trans. Signal Processing | volume = 55 | issue = 4 | pages = 1543\u20131547 | date=April 2007 | bibcode = 2007ITSP...55.1543E | doi = 10.1109/TSP.2006.889402 }}</ref><ref>{{cite journal | last = Einicke | first =  G.A. | last2 = Ralston | first2 = J.C. | last3 = Hargrave | first3 = C.O. | last4 = Reid | first4 = D.C. | last5 = Hainsworth | first5 = D.W. | title = Longwall Mining Automation. An Application of Minimum-Variance Smoothing | journal = IEEE Control Systems Magazine | volume = 28 | issue = 6 |pages=28\u201337 |doi=10.1109/MCS.2008.929281 | date=December 2008 }}</ref>\n\n[[Expectation-maximization algorithm]]s may be employed to calculate approximate [[maximum likelihood]] estimates of unknown state-space parameters within minimum-variance filters and smoothers. Often uncertainties remain within problem assumptions. A smoother that accommodates uncertainties can be designed by adding a positive definite term to the Riccati equation.<ref>{{cite journal | last = Einicke | first =  G.A. | title = Asymptotic Optimality of the Minimum-Variance Fixed-Interval Smoother | journal = IEEE Trans. Automatic Control | volume = 54 | issue = 12 | pages = 2904\u20132908 | date=December 2009 | bibcode = 2007ITSP...55.1543E | doi = 10.1109/TSP.2006.889402 }}</ref>\n\nIn cases where the models are nonlinear, step-wise linearizations may be within the minimum-variance filter and smoother recursions ([[extended Kalman filter]]ing).\n\n== Frequency-weighted Kalman filters ==\n\nPioneering research on the perception of sounds at different frequencies was conducted by Fletcher and Munson in the 1930s. Their work led to a standard way of weighting measured sound levels within investigations of industrial noise and hearing loss. Frequency weightings have since been used within filter and controller designs to manage performance within bands of interest.\n\nTypically, a frequency shaping function is used to weight the average power of the error spectral density in a specified frequency band. Let <math>\\textbf{y}</math> - <math>\\hat{\\textbf{y}}</math> denote the output estimation error exhibited by a conventional Kalman filter. Also, let <math>\\textbf{W}</math> denote a causal frequency weighting transfer function. The optimum solution which minimizes the variance of <math>\\textbf{W}</math> (  <math>\\textbf{y}</math> - <math>\\hat{\\textbf{y}}</math>  ) arises by simply constructing <math>\\textbf{W}^{-1} \\hat{\\textbf{y}}</math>.\n\nThe design of <math>\\textbf{W}</math> remains an open question. One way of proceeding is to identify a system which generates the estimation error and setting <math>\\textbf{W}</math> equal to the inverse of that system.<ref>{{cite journal | last = Einicke | first =  G.A. | title = Iterative Frequency-Weighted Filtering and Smoothing Procedures | journal = IEEE Signal Processing Letters | volume = 21 | issue = 12 | pages = 1467\u20131470 | date=December 2014 | doi = 10.1109/LSP.2014.2341641 |bibcode = 2014ISPL...21.1467E }}</ref> This procedure may be iterated to obtain mean-square error improvement at the cost of increased filter order. The same technique can be applied to smoothers.\n\n== Non-linear filters ==\n\nThe basic Kalman filter is limited to a linear assumption. More complex systems, however, can be nonlinear. The non-linearity can be associated either with the process model or with the observation model or with both.\n\n=== Extended Kalman filter ===\n{{Main article|Extended Kalman filter}}\n\nIn the extended Kalman filter (EKF), the state transition and observation models need not be linear functions of the state but may instead be non-linear functions. These functions are of [[differentiable]] type.\n\n:<math>\\textbf{x}_{k} = f(\\textbf{x}_{k-1}, \\textbf{u}_{k}) + \\textbf{w}_{k}</math>\n\n:<math>\\textbf{z}_{k} = h(\\textbf{x}_{k}) + \\textbf{v}_{k}</math>\n\nThe function ''f'' can be used to compute the predicted state from the previous estimate and similarly the function ''h'' can be used to compute the predicted measurement from the predicted state. However, ''f'' and ''h'' cannot be applied to the covariance directly. Instead a matrix of partial derivatives (the [[Jacobian matrix|Jacobian]]) is computed.\n\nAt each timestep the Jacobian is evaluated with current predicted states. These matrices can be used in the Kalman filter equations. This process essentially linearizes the non-linear function around the current estimate.\n\n=== Unscented Kalman filter ===\n\nWhen the state transition and observation models\u2014that is, the predict and update functions <math>f</math> and <math>h</math>\u2014are highly non-linear, the extended Kalman filter can give particularly poor performance.<ref name=\"JU97\">{{cite journal\n | author = Julier, Simon J.\n |author2=Uhlmann, Jeffrey K.\n | year = 1997\n | title = A new extension of the Kalman filter to nonlinear systems\n | journal = Int. Symp. Aerospace/Defense Sensing, Simul. and Controls\n | volume = 3\n | url = http://www.cs.unc.edu/~welch/kalman/media/pdf/Julier1997_SPIE_KF.pdf\n | accessdate = 2008-05-03\n | bibcode = 1997SPIE.3068..182J\n | page = 182\n|doi=10.1117/12.280797\n |series=Signal Processing, Sensor Fusion, and Target Recognition VI\n }}</ref> This is because the covariance is propagated through linearization of the underlying non-linear model. The unscented Kalman filter (UKF)&nbsp;<ref name=\"JU97\" /> uses a deterministic sampling technique known as the [[unscented transform]] to pick a minimal set of sample points (called sigma points) around the mean. These sigma points are then propagated through the non-linear functions, from which a new mean and covariance estimate are then formed. The result is a filter which, for certain systems, more accurately estimates the true mean and covariance.<ref name=\"GH2012\">{{cite journal\n | author  = Gustafsson, Fredrik\n | author2 = Hendeby, Gustaf\n | year    = 2012\n | title   = Some Relations Between Extended and Unscented Kalman Filters\n | journal = IEEE Transactions on Signal Processing\n | volume  = 2\n | pages    = 545\u2013555\n }}</ref>  This can be verified with [[Monte Carlo sampling]] or [[Taylor series]] expansion of the posterior statistics.  In addition, this technique removes the requirement to explicitly calculate Jacobians, which for complex functions can be a difficult task in itself (i.e., requiring complicated derivatives if done analytically or being computationally costly if done numerically), if not impossible (if those functions are not differentiable).\n\n;Predict\n\nAs with the EKF, the UKF prediction can be used independently from the UKF update, in combination with a linear (or indeed EKF) update, or vice versa.\n\nThe estimated state and covariance are augmented with the mean and covariance of the process noise.\n\n:<math> \\textbf{x}_{k-1\\mid k-1}^{a} = [ \\hat{\\textbf{x}}_{k-1\\mid k-1}^\\mathrm{T} \\quad E[\\textbf{w}_{k}^\\mathrm{T}] \\ ]^\\mathrm{T} </math>\n\n:<math> \\textbf{P}_{k-1\\mid k-1}^{a} = \\begin{bmatrix} & \\textbf{P}_{k-1\\mid k-1} & & 0 & \\\\ & 0 & &\\textbf{Q}_{k} & \\end{bmatrix} </math>\n\nA set of 2''L''&nbsp;+&nbsp;1 sigma points is derived from the augmented state and covariance where ''L'' is the dimension of the augmented state.\n\n:<math>\\chi_{k-1\\mid k-1}^{0} = \\textbf{x}_{k-1\\mid k-1}^{a}</math>\n:<math>\\chi_{k-1\\mid k-1}^{i} =\\textbf{x}_{k-1\\mid k-1}^{a} + \\left ( \\sqrt{ (L + \\lambda) \\textbf{P}_{k-1\\mid k-1}^{a} } \\right )_{i}, \\qquad i = 1,\\ldots,L</math>\n:<math>\\chi_{k-1\\mid k-1}^{i} = \\textbf{x}_{k-1\\mid k-1}^{a} - \\left ( \\sqrt{ (L + \\lambda) \\textbf{P}_{k-1\\mid k-1}^{a} } \\right )_{i-L}, \\qquad i = L+1,\\dots{},2L</math>\nwhere\n\n: <math>\\left ( \\sqrt{ (L + \\lambda) \\textbf{P}_{k-1\\mid k-1}^{a} } \\right )_{i}</math>\n\nis the ''i''th column of the matrix square root of\n\n: <math>(L + \\lambda) \\textbf{P}_{k-1\\mid k-1}^{a}</math>\n\nusing the definition: square root <math>\\textbf{A}</math> of matrix <math>\\textbf{B}</math> satisfies\n\n: <math>\\textbf{B} \\triangleq \\textbf{A} \\textbf{A}^\\mathrm{T}. \\, </math>\n\nThe matrix square root should be calculated using numerically efficient and stable methods such as the [[Cholesky decomposition]].\n\nThe sigma points are propagated through the transition function ''f''.\n\n:<math>\\chi_{k\\mid k-1}^{i} = f(\\chi_{k-1\\mid k-1}^{i}) \\quad i = 0,\\dots,2L </math>\n\nwhere <math>f : R^{L} \\rightarrow R^{|\\textbf{x}|} </math>. The weighted sigma points are recombined to produce the predicted state and covariance.\n\n:<math>\\hat{\\textbf{x}}_{k\\mid k-1} = \\sum_{i=0}^{2L} W_{s}^{i} \\chi_{k\\mid k-1}^{i} </math>\n\n:<math>\\textbf{P}_{k\\mid k-1} = \\sum_{i=0}^{2L} W_{c}^{i}\\ [\\chi_{k\\mid k-1}^{i} - \\hat{\\textbf{x}}_{k\\mid k-1}] [\\chi_{k\\mid k-1}^{i} - \\hat{\\textbf{x}}_{k\\mid k-1}]^\\mathrm{T} </math>\n\nwhere the weights for the state and covariance are given by:\n\n:<math>W_{s}^{0} = \\frac{\\lambda}{L+\\lambda}</math>\n:<math>W_{c}^{0} = \\frac{\\lambda}{L+\\lambda} + (1 - \\alpha^2 + \\beta)</math>\n:<math>W_{s}^{i} = W_{c}^{i} = \\frac{1}{2(L+\\lambda)}</math>\n:<math>\\lambda = \\alpha^2 (L+\\kappa) - L\\,\\! </math>\n\n<math>\\alpha</math> and <math>\\kappa</math> control the spread of the sigma points.  <math>\\beta</math> is related to the distribution of <math>x</math>.\nNormal values are <math>\\alpha=10^{-3}</math>, <math>\\kappa=0</math> and <math>\\beta=2</math>. If the true distribution of <math>x</math> is Gaussian, <math>\\beta=2</math> is optimal.<ref>{{Cite book|doi=10.1109/ASSPCC.2000.882463|url=http://www.lara.unb.br/~gaborges/disciplinas/efe/papers/wan2000.pdf |chapter=The unscented Kalman filter for nonlinear estimation |title=Proceedings of the IEEE 2000 Adaptive Systems for Signal Processing, Communications, and Control Symposium (Cat. No.00EX373) |pages=153 |year=2000 |last1=Wan |first1=E.A. |last2=Van Der Merwe |first2=R. |isbn=0-7803-5800-7 }}</ref>\n\n;Update\n\nThe predicted state and covariance are augmented as before, except now with the mean and covariance of the measurement noise.\n\n:<math> \\textbf{x}_{k\\mid k-1}^{a} = [ \\hat{\\textbf{x}}_{k\\mid k-1}^\\mathrm{T} \\quad E[\\textbf{v}_{k}^\\mathrm{T}] \\ ]^\\mathrm{T} </math>\n\n:<math> \\textbf{P}_{k\\mid k-1}^{a} = \\begin{bmatrix} & \\textbf{P}_{k\\mid k-1} & & 0 & \\\\ & 0 & &\\textbf{R}_{k} & \\end{bmatrix} </math>\n\nAs before, a set of 2''L''&nbsp;+&nbsp;1 sigma points is derived from the augmented state and covariance where ''L'' is the dimension of the augmented state.\n\n: <math>\n\\begin{align}\n\\chi_{k\\mid k-1}^{0} & = \\textbf{x}_{k\\mid k-1}^{a} \\\\[6pt]\n\\chi_{k\\mid k-1}^{i} & = \\textbf{x}_{k\\mid k-1}^{a} + \\left ( \\sqrt{ (L + \\lambda) \\textbf{P}_{k\\mid k-1}^{a} } \\right )_{i}, \\qquad i = 1,\\dots,L \\\\[6pt]\n\\chi_{k\\mid k-1}^{i} & = \\textbf{x}_{k\\mid k-1}^{a} - \\left ( \\sqrt{ (L + \\lambda) \\textbf{P}_{k\\mid k-1}^{a} } \\right )_{i-L}, \\qquad i = L+1,\\dots,2L\n\\end{align}\n</math>\n\nAlternatively if the UKF prediction has been used the sigma points themselves can be augmented along the following lines\n\n:<math> \\chi_{k\\mid k-1} := [ \\chi_{k\\mid k-1}^\\mathrm{T} \\quad E[\\textbf{v}_{k}^\\mathrm{T}] \\ ]^\\mathrm{T} \\pm \\sqrt{ (L + \\lambda) \\textbf{R}_{k}^{a} }</math>\n\nwhere\n\n:<math> \\textbf{R}_{k}^{a} = \\begin{bmatrix} & 0 & & 0 & \\\\ & 0 & &\\textbf{R}_{k} & \\end{bmatrix} </math>\n\nThe sigma points are projected through the observation function ''h''.\n\n:<math>\\gamma_{k}^{i} = h(\\chi_{k\\mid k-1}^{i}) \\quad i = 0..2L </math>\n\nThe weighted sigma points are recombined to produce the predicted measurement and predicted measurement covariance.\n\n:<math>\\hat{\\textbf{z}}_{k} = \\sum_{i=0}^{2L} W_{s}^{i} \\gamma_{k}^{i} </math>\n\n:<math>\\textbf{P}_{z_{k}z_{k}} = \\sum_{i=0}^{2L} W_{c}^{i}\\ [\\gamma_{k}^{i} - \\hat{\\textbf{z}}_{k}] [\\gamma_{k}^{i} - \\hat{\\textbf{z}}_{k}]^\\mathrm{T} </math>\n\nThe state-measurement cross-covariance matrix,\n\n:<math>\\textbf{P}_{x_{k}z_{k}} = \\sum_{i=0}^{2L} W_{c}^{i}\\ [\\chi_{k\\mid k-1}^{i} - \\hat{\\textbf{x}}_{k\\mid k-1}] [\\gamma_{k}^{i} - \\hat{\\textbf{z}}_{k}]^\\mathrm{T} </math>\n\nis used to compute the UKF Kalman gain.\n\n:<math>K_{k} = \\textbf{P}_{x_{k}z_{k}} \\textbf{P}_{z_{k}z_{k}}^{-1}</math>\n\nAs with the Kalman filter, the updated state is the predicted state plus the innovation weighted by the Kalman gain,\n\n:<math>\\hat{\\textbf{x}}_{k\\mid k} = \\hat{\\textbf{x}}_{k\\mid k-1} + K_{k}( \\textbf{z}_{k} - \\hat{\\textbf{z}}_{k} )</math>\n\nAnd the updated covariance is the predicted covariance, minus the predicted measurement covariance, weighted by the Kalman gain.\n\n:<math>\\textbf{P}_{k\\mid k} = \\textbf{P}_{k\\mid k-1} - K_{k} \\textbf{P}_{z_{k}z_{k}} K_{k}^\\mathrm{T} </math>\n\n== Kalman\u2013Bucy filter ==\n\nThe Kalman\u2013Bucy filter (named after Richard Snowden Bucy) is a continuous time version of the Kalman filter.<ref>Bucy, R.S. and Joseph, P.D., ''Filtering for Stochastic Processes with Applications to Guidance,'' John Wiley & Sons, 1968; 2nd Edition, AMS Chelsea Publ., 2005. ISBN 0-8218-3782-6</ref><ref>Jazwinski, Andrew H., ''Stochastic processes and filtering theory,'' Academic Press, New York, 1970. ISBN 0-12-381550-9</ref>\n\nIt is based on the state space model\n\n:<math>\\frac{d}{dt}\\mathbf{x}(t) = \\mathbf{F}(t)\\mathbf{x}(t) + \\mathbf{B}(t)\\mathbf{u}(t) + \\mathbf{w}(t)</math>\n\n:<math>\\mathbf{z}(t) = \\mathbf{H}(t) \\mathbf{x}(t) + \\mathbf{v}(t)</math>\n\nwhere <math>\\mathbf{Q}(t)</math> and <math>\\mathbf{R}(t)</math> represent the intensities of the two white noise terms <math>\\mathbf{w}(t)</math> and <math>\\mathbf{v}(t)</math>, respectively.\n\nThe filter consists of two differential equations, one for the state estimate and one for the covariance:\n\n:<math>\\frac{d}{dt}\\hat{\\mathbf{x}}(t) = \\mathbf{F}(t)\\hat{\\mathbf{x}}(t) + \\mathbf{B}(t)\\mathbf{u}(t) + \\mathbf{K}(t) (\\mathbf{z}(t)-\\mathbf{H}(t)\\hat{\\mathbf{x}}(t))</math>\n\n:<math>\\frac{d}{dt}\\mathbf{P}(t) = \\mathbf{F}(t)\\mathbf{P}(t) + \\mathbf{P}(t)\\mathbf{F}^{T}(t) + \\mathbf{Q}(t) - \\mathbf{K}(t)\\mathbf{R}(t)\\mathbf{K}^{T}(t)</math>\n\nwhere the Kalman gain is given by\n\n:<math>\\mathbf{K}(t)=\\mathbf{P}(t)\\mathbf{H}^{T}(t)\\mathbf{R}^{-1}(t)</math>\n\nNote that in this expression for <math>\\mathbf{K}(t)</math> the covariance of the observation noise <math>\\mathbf{R}(t)</math> represents at the same time the covariance of the prediction error (or ''innovation'') <math>\\tilde{\\mathbf{y}}(t)=\\mathbf{z}(t)-\\mathbf{H}(t)\\hat{\\mathbf{x}}(t)</math>; these covariances are equal only in the case of continuous time.<ref>{{cite journal|pages= 646\u2013655|doi=10.1109/TAC.1968.1099025|title=An innovations approach to least-squares estimation--Part I: Linear filtering in additive white noise|journal=IEEE Transactions on Automatic Control|volume=13|issue=6|year=1968|last1=Kailath|first1=T.}}</ref>\n\nThe distinction between the prediction and update steps of discrete-time Kalman filtering does not exist in continuous time.\n\nThe second differential equation, for the covariance, is an example of a [[Riccati equation]].\n\n== Hybrid Kalman filter ==\n\nMost physical systems are represented as continuous-time models while discrete-time measurements are frequently taken for state estimation via a digital processor. Therefore, the system model and measurement model are given by\n:<math>\n\\begin{align}\n\\dot{\\mathbf{x}}(t) &= \\mathbf{F}(t)\\mathbf{x}(t)+\\mathbf{B}(t)\\mathbf{u}(t)+\\mathbf{w}(t), &\\mathbf{w}(t) &\\sim N\\bigl(\\mathbf{0},\\mathbf{Q}(t)\\bigr) \\\\\n\\mathbf{z}_k &= \\mathbf{H}_k\\mathbf{x}_k+\\mathbf{v}_k,   &\\mathbf{v}_k &\\sim N(\\mathbf{0},\\mathbf{R}_k)\n\\end{align}\n</math>\nwhere\n:<math>\\mathbf{x}_k=\\mathbf{x}(t_k)</math>.\n\n;Initialize\n:<math>\n\\hat{\\mathbf{x}}_{0\\mid 0}=E\\bigl[\\mathbf{x}(t_0)\\bigr], \\mathbf{P}_{0\\mid 0}=Var\\bigl[\\mathbf{x}(t_0)\\bigr]\n</math>\n;Predict\n:<math>\n\\begin{align}\n&\\dot{\\hat{\\mathbf{x}}}(t) = \\mathbf{F}(t) \\hat{\\mathbf{x}}(t) + \\mathbf{B}(t) \\mathbf{u}(t)\n\\text{, with }\n\\hat{\\mathbf{x}}(t_{k-1}) = \\hat{\\mathbf{x}}_{k-1\\mid k-1} \\\\\n\\Rightarrow\n&\\hat{\\mathbf{x}}_{k\\mid k-1} = \\hat{\\mathbf{x}}(t_k)\\\\\n&\\dot{\\mathbf{P}}(t) = \\mathbf{F}(t)\\mathbf{P}(t)+\\mathbf{P}(t)\\mathbf{F}(t)^T+\\mathbf{Q}(t)\n\\text{, with }\n\\mathbf{P}(t_{k-1}) = \\mathbf{P}_{k-1\\mid k-1}\\\\\n\\Rightarrow\n&\\mathbf{P}_{k\\mid k-1} = \\mathbf{P}(t_k)\n\\end{align}\n</math>\nThe prediction equations are derived from those of continuous-time Kalman filter without update from measurements, i.e., <math> \\mathbf{K}(t)=0 </math>. The predicted state and covariance are calculated respectively by solving a set of differential equations with the initial value equal to the estimate at the previous step.\n\n;Update\n:<math>\\mathbf{K}_{k} = \\mathbf{P}_{k\\mid k-1}\\mathbf{H}_{k}^T\\bigl(\\mathbf{H}_{k}\\mathbf{P}_{k\\mid k-1}\\mathbf{H}_{k}^T+\\mathbf{R}_{k}\\bigr)^{-1} </math>\n:<math>\\hat{\\mathbf{x}}_{k\\mid k} = \\hat{\\mathbf{x}}_{k\\mid k-1} + \\mathbf{K}_k(\\mathbf{z}_k-\\mathbf{H}_k\\hat{\\mathbf{x}}_{k\\mid k-1})</math>\n:<math>\\mathbf{P}_{k\\mid k} = (\\mathbf{I} - \\mathbf{K}_{k}\\mathbf{H}_{k})\\mathbf{P}_{k\\mid k-1} </math>\nThe update equations are identical to those of the discrete-time Kalman filter.\n\n== Variants for the recovery of sparse signals ==\n\nThe traditional Kalman filter has also been employed for the recovery of [[sparse signal|sparse]], possibly dynamic, signals from\nnoisy observations. Recent works<ref>{{cite book|doi=10.1109/ICIP.2008.4711899|chapter=Kalman filtered Compressed Sensing|title=2008 15th IEEE International Conference on Image Processing|pages=893|year=2008|last1=Vaswani|first1=Namrata|isbn=978-1-4244-1765-0}}</ref><ref>{{Cite journal|title=Methods for sparse signal recovery using Kalman filtering with embedded pseudo-measurement norms and quasi-norms|journal=IEEE Transactions on Signal Processing|volume=58|issue=4|pages=2405\u20132409|doi=10.1109/TSP.2009.2038959|year=2010|last1=Carmi|first1=Avishy|last2=Gurfil|first2=Pini|last3=Kanevsky|first3=Dimitri|bibcode=2010ITSP...58.2405C}}</ref><ref>{{Cite journal|title=Dynamic Iterative Pursuit|journal=IEEE Transactions on Signal Processing|volume=60|issue=9|pages=4967\u20134972|doi=10.1109/TSP.2012.2203813|year=2012|last1=Zachariah|first1=Dave|last2=Chatterjee|first2=Saikat|last3=Jansson|first3=Magnus}}</ref> utilize notions from the theory of [[compressed sensing]]/sampling, such as the restricted isometry property and related probabilistic recovery arguments, for sequentially estimating the sparse state in intrinsically low-dimensional systems.\n\n== Applications ==\n{{Div col||20em}}\n* [[Attitude and heading reference systems]]\n* [[Autopilot]]\n* Battery state of charge (SoC) estimation<ref>{{cite journal|doi=10.1016/j.jpowsour.2007.04.011|title=A novel combined battery model for state-of-charge estimation in lead-acid batteries based on extended Kalman filter for hybrid electric vehicle applications|journal=Journal of Power Sources|volume=174|pages=30\u201340|year=2007|last1=Vasebi|first1=Amir|last2=Partovibakhsh|first2=Maral|last3=Bathaee|first3=S. Mohammad Taghi}}</ref><ref>{{cite journal|doi=10.1016/j.enconman.2007.05.017|title=Predicting state of charge of lead-acid batteries for hybrid electric vehicles by extended Kalman filter|journal=Energy Conversion and Management|volume=49|pages=75\u201382|year=2008|last1=Vasebi|first1=A.|last2=Bathaee|first2=S.M.T.|last3=Partovibakhsh|first3=M.}}</ref>\n* [[Brain-computer interface]]\n* Chaotic signals\n* Tracking and vertex fitting of [[charged particles]] in [[particle detector]]s<ref>{{cite journal |journal=Nucl. Instrum. Meth. |volume=A262 |issue=2\u20133 |year=1987 |pages=444\u2013450 |title=Application of Kalman filtering to track and vertex fitting |first=R. |last=Fruhwirth |bibcode=1987NIMPA.262..444F |doi=10.1016/0168-9002(87)90887-4 }}</ref>\n* Tracking of objects in [[computer vision]]\n* [[Dynamic positioning]]\n* [[Economics]], in particular [[macroeconomics]], [[time series analysis]], and [[econometrics]]<ref>{{cite book |last=Harvey |first=Andrew C. |chapter=Applications of the Kalman filter in econometrics |title=Advances in Econometrics |editor-first=Truman |editor-last=Bewley |editor-link=Truman Bewley |location=New York |publisher=Cambridge University Press |year=1994 |isbn=0-521-46726-8 |pages=285f }}</ref>\n* [[Inertial guidance system]]\n* [[Nuclear medicine]] \u2013 single photon emission computed tomography image restoration<ref>{{Cite journal|pages=102\u2013109|doi=10.1109/42.276148|pmid=18218487|title=Two-dimensional restoration of single photon emission computed tomography images using the Kalman filter|journal=IEEE Transactions on Medical Imaging|volume=13|issue=1|year=1994|last1=Boulfelfel|first1=D.|last2=Rangayyan|first2=R.M.|last3=Hahn|first3=L.J.|last4=Kloiber|first4=R.|last5=Kuduvalli|first5=G.R.}}</ref>\n* [[Orbit Determination]]\n* Power system state estimation\n* [[Radar tracker]]\n* [[Satellite navigation system]]s\n* [[Seismology]]<ref>{{cite journal|bibcode=2008AGUFM.G43B..01B|title=Fusion of High-Rate GPS and Seismic Data: Applications to Early Warning Systems for Mitigation of Geological Hazards|journal=American Geophysical Union|volume=43|pages=01|author1=Bock|first1=Y.|last2=Crowell|first2=B.|last3=Webb|first3=F.|last4=Kedar|first4=S.|last5=Clayton|first5=R.|last6=Miyahara|first6=B.|year=2008}}</ref>\n* Sensorless control of AC motor [[variable-frequency drive]]s\n* [[Simultaneous localization and mapping]]\n* [[Speech enhancement]]\n* [[Visual odometry]]\n* [[Weather forecasting]]\n* [[Navigation system]]\n* [[3D modeling]]\n* [[Structural health monitoring]]\n* [[Human sensorimotor processing]]<ref>{{cite journal |journal=Neural Netw.  |volume=9 |issue=8 |pages=1265\u20131279 |title=Forward Models for Physiological Motor Control |last=Wolpert |first=D. M. |last2=Miall |first2=R. C. |pmid=12662535 |year=1996 |doi=10.1016/S0893-6080(96)00035-4}}</ref>\n{{Div col end}}\n\n== See also ==\n{{too many see alsos|date=November 2012}}\n{{div col|3}}\n* [[Alpha beta filter]]\n* [[Minimum mean square error|Bayesian MMSE estimator]]\n* [[Covariance intersection]]\n* [[Data assimilation]]\n* [[Ensemble Kalman filter]]\n* [[Extended Kalman filter]]\n* [[Fast Kalman filter]]\n* [[Filtering problem (stochastic processes)]]\n* [[Generalized filtering]]\n* [[Invariant extended Kalman filter]]\n* [[Kernel adaptive filter]]\n* [[Linear-quadratic-Gaussian control]]\n* [[Masreliez\u2019s theorem]]\n* [[Moving horizon estimation]]\n* [[Non-linear filter]]\n* [[Particle filter]] estimator\n* [[Predictor corrector]]\n* [[Recursive least squares]]\n* [[Schmidt\u2013Kalman filter]]\n* [[Separation principle]]\n* [[Sliding mode control]]\n* [[Stochastic differential equation]]s\n* [[Volterra series]]\n* [[Wiener filter]]\n* [[Zakai equation]]\n{{div col end}}\n\n== References ==\n\n{{reflist|30em}}\n\n== Further reading ==\n{{further cleanup|date=June 2015}}\n{{refbegin|30em}}\n* {{cite book | author = Einicke, G.A. | year = 2012 | title = Smoothing, Filtering and Prediction: Estimating the Past, Present and Future | publisher = Intech | location = Rijeka, Croatia | isbn = 978-953-307-752-9 | url = http://www.intechopen.com/books/smoothing-filtering-and-prediction-estimating-the-past-present-and-future}}\n* {{cite journal | author = Jinya Su |author2=Baibing Li | author3=Wen-Hua Chen | year = 2015| title = On existence, optimality and asymptotic stability of the Kalman filter with partially observed inputs|doi=10.1016/j.automatica.2014.12.044 | journal = Automatica | volume = 53| pages = 149\u2013154}}\n* {{cite book | author = Gelb, A. | year = 1974 | title = Applied Optimal Estimation | publisher = MIT Press | isbn = }}\n* {{cite journal | author = Kalman, R.E. | year = 1960 | title = A new approach to linear filtering and prediction problems | journal = Journal of Basic Engineering | volume = 82 | issue = 1 | pages = 35\u201345 | url = http://www.elo.utfsm.cl/~ipd481/Papers%20varios/kalman1960.pdf | accessdate = 2008-05-03 | doi = 10.1115/1.3662552 }}\n* {{cite journal | author = Kalman, R.E. |author2=Bucy, R.S. | year = 1961 | title = New Results in Linear Filtering and Prediction Theory | url = http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.361.6851}}\n* {{cite book | author = Harvey, A.C. | year = 1990 | title = Forecasting, Structural Time Series Models and the Kalman Filter | publisher = Cambridge University Press | isbn = }}\n* {{cite journal | author = Roweis, S. |author2=Ghahramani, Z. | authorlink2 = Zoubin Ghahramani| year = 1999 | title = A Unifying Review of Linear Gaussian Models | journal = Neural Computation | volume = 11 | issue = 2 | pages = 305\u2013345 | doi = 10.1162/089976699300016674 | pmid = 9950734 }}\n* {{cite book | author = Simon, D. | year = 2006 | title = Optimal State Estimation: Kalman, H Infinity, and Nonlinear Approaches | publisher = Wiley-Interscience | url = http://academic.csuohio.edu/simond/estimation/ | isbn = }}\n* {{cite book | author = Stengel, R.F. | year = 1994 | title = Optimal Control and Estimation | publisher = Dover Publications | isbn = 0-486-68200-5 | url = http://www.princeton.edu/~stengel/OptConEst.html }}\n* {{cite journal | author = [[Kevin Warwick|Warwick, K]]. | year = 1987 | title = Optimal observers for ARMA models | journal = International Journal of Control | volume = 46 | issue = 5 | pages = 1493\u20131503 | url = http://www.informaworld.com/index/779885789.pdf | accessdate = 2008-05-03 | doi = 10.1080/00207178708933989 }}\n* {{cite book | author = Bierman, G.J. | year = 1977 | title = Factorization Methods for Discrete Sequential Estimation | journal = Mathematics in Science and Engineering | volume = 128 | isbn =  978-0-486-44981-4 | publisher = Dover Publications | location = Mineola, N.Y. }}\n* {{cite book | author = Bozic, S.M. | year = 1994 | title = Digital and Kalman filtering | publisher = Butterworth\u2013Heinemann | isbn = }}\n* {{cite book | author = Haykin, S. | year = 2002 | title = Adaptive Filter Theory | publisher = Prentice Hall | isbn = }}\n* {{cite book | author = Liu, W. | author2 = Principe, J.C. and Haykin, S. | year = 2010 | title = Kernel Adaptive Filtering: A Comprehensive Introduction | publisher = John Wiley | isbn = }}\n* {{cite book | author = Manolakis, D.G. | year = 1999 | title = Statistical and Adaptive signal processing | publisher = Artech House | isbn = }}\n* {{cite book | author = Welch, Greg |author2=Bishop, Gary | year = 1997 | title = SIGGRAPH '97 Proceedings of the 24th annual conference on Computer graphics and interactive techniques | chapter-url = http://www.cs.unc.edu/~welch/media/pdf/scaat.pdf | pages = 333\u2013344 | isbn = 0-89791-896-7 | doi = 10.1145/258734.258876 | publisher = ACM Press/Addison-Wesley Publishing Co | chapter = SCAAT: incremental tracking with incomplete information }}\n* {{cite book | first=Andrew H.  |last= Jazwinski | year = 1970 | title = Stochastic Processes and Filtering | publisher = [[Academic Press]] | location=New York | series = Mathematics in Science and Engineering | page=376 | isbn=0-12-381550-9 }}\n* {{cite book | first=Peter S. |last=Maybeck | year = 1979 | title = Stochastic Models, Estimation, and Control | publisher = [[Academic Press]] | location=New York | isbn = 0-12-480701-1 | volume = 141-1 | series = Mathematics in Science and Engineering|chapter=Chapter 1|url=http://www.cs.unc.edu/~welch/kalman/media/pdf/maybeck_ch1.pdf }}\n* {{cite book | author = Moriya, N. | year = 2011 | title = Primer to Kalman Filtering: A Physicist Perspective | publisher = [[Nova Science Publishers]], Inc | location=New York | isbn =  978-1-61668-311-5 }}\n* {{cite book | author = Dunik, J. |author2=Simandl M. |author3=Straka O.  | year = 2009 | title = 15th IFAC Symposium on System Identification, 2009|doi=10.3182/20090706-3-FR-2004.00061 | place = France | pages = 372\u2013377|url=https://www.researchgate.net/publication/216411106_Methods_for_Estimating_State_and_Measurement_Noise_Covariance_Matrices_Aspects_and_Comparison |series=15th IFAC Symposium on System Identification, 2009 |isbn=978-3-902661-47-0 |chapter=Methods for Estimating State and Measurement Noise Covariance Matrices: Aspects and Comparison }}\n* {{cite book | first=Charles K. |last=Chui |first2=Guanrong |last2=Chen | year = 2009 | title = Kalman Filtering with Real-Time Applications | publisher = [[Springer Science+Business Media|Springer]] | location=New York | isbn = 978-3-540-87848-3 | volume = 17 | series = Springer Series in Information Sciences | edition = 4th | page=229 }}\n* {{cite journal | author = Spivey, Ben | author2 = Hedengren, J. D. and Edgar, T. F. | journal = Industrial & Engineering Chemistry Research | volume = 49 | issue = 17 | year = 2010 | title = Constrained Nonlinear Estimation for Industrial Process Fouling | url = http://pubs.acs.org/doi/abs/10.1021/ie9018116 | pages = 7824\u20137831 | doi = 10.1021/ie9018116 }}\n* {{cite book|title= Linear Estimation|publisher=Prentice\u2013Hall|location= NJ|year=2000| isbn= 978-0-13-022464-4|author1 = Thomas Kailath|author2 = Ali H. Sayed|author3=Babak Hassibi|authorlink1=Thomas Kailath|authorlink2=Ali H. Sayed|authorlink3=Babak Hassibi}}\n* {{cite book|authors= [[Ali H. Sayed]]|title= Adaptive Filters|publisher= Wiley|location= NJ|year= 2008|isbn= 978-0-470-25388-5}}\n{{refend}}\n\n== External links ==\n{{external links|date=June 2015}}\n* [http://www.cs.unc.edu/~welch/kalman/kalmanPaper.html A New Approach to Linear Filtering and Prediction Problems], by R. E. Kalman, 1960\n* [http://www.eng.tau.ac.il/~liptser/lectures1/lect6.pdf ''Kalman\u2013Bucy Filter''], a good derivation of the Kalman\u2013Bucy Filter\n* {{YouTube|d0D3VwBh5UQ|MIT Video Lecture on the Kalman filter}}\n* [http://www.cs.unc.edu/~tracker/media/pdf/SIGGRAPH2001_CoursePack_08.pdf An Introduction to the Kalman Filter], SIGGRAPH 2001 Course, Greg Welch and Gary Bishop\n* [http://www.cs.unc.edu/~welch/kalman/ Kalman Filter] webpage, with lots of links\n* {{cite web | url=http://www.innovatia.com/software/papers/kalman.htm | title=Kalman Filtering | archiveurl=https://web.archive.org/web/20130623214223/http://www.innovatia.com/software/papers/kalman.htm | archivedate=2013-06-23 }}\n* [http://www.negenborn.net/kal_loc/ ''Kalman Filters'', thorough introduction to several types, together with applications to ''Robot Localization'']\n* {{Cite journal|url=http://www.siam.org/pdf/news/362.pdf |title=Kalman filters used in Weather models|journal=SIAM News|volume =36|issue= 8|date=October 2003}}\n* {{cite journal |doi=10.1021/ie034308l|title=Critical Evaluation of Extended Kalman Filtering and Moving-Horizon Estimation|journal=Industrial & Engineering Chemistry Research|volume=44|issue=8|pages=2451|year=2005|last1=Haseltine|first1=Eric L.|last2=Rawlings|first2=James B.}}\n* [https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python Kalman and Bayesian Filters in Python] Free book on Kalman Filtering implemented in IPython Notebook.\n* [http://obex.parallax.com/object/326 Source code for the propeller microprocessor]: Well documented source code written for the Parallax propeller processor.\n* [http://netlib.org/a/esl.tgz Gerald J. Bierman's Estimation Subroutine Library]: Corresponds to the code in the research monograph \"Factorization Methods for Discrete Sequential Estimation\" originally published by Academic Press in 1977. Republished by Dover.\n* [http://www.mathworks.com/matlabcentral/fileexchange/32537 Matlab Toolbox implementing parts of Gerald J. Bierman's Estimation Subroutine Library]: UD / UDU' and LD / LDL' factorization with associated time and measurement updates making up the Kalman filter.\n* [http://eia.udg.es/~qsalvi/Slam.zip Matlab Toolbox of Kalman Filtering applied to Simultaneous Localization and Mapping]: Vehicle moving in 1D, 2D and 3D\n* [http://www.mrpt.org/6D-SLAM Derivation of a 6D EKF solution to Simultaneous Localization and Mapping] (In [http://mapir.isa.uma.es/~jlblanco/papers/RangeBearingSLAM6D.pdf old version PDF]). See also the tutorial on [http://www.mrpt.org/Kalman_Filters implementing a Kalman Filter] with the [[Mobile Robot Programming Toolkit|MRPT C++ libraries]].\n* [http://www.tristanfletcher.co.uk/LDS.pdf The Kalman Filter Explained] A very simple tutorial.\n* [http://www.cnel.ufl.edu/~weifeng/publication.htm The Kalman Filter in Reproducing Kernel Hilbert Spaces] A comprehensive introduction.\n* [http://www.mathfinance.cn/kalman-filter-finance-revisited/ Matlab code to estimate Cox\u2013Ingersoll\u2013Ross interest rate model with Kalman Filter]: Corresponds to the paper \"estimating and testing exponential-affine term structure models by kalman filter\" published by Review of Quantitative Finance and Accounting in 1999.\n* [http://apmonitor.com/wiki/index.php/Main/Background Extended Kalman Filters] explained in the context of Simulation, Estimation, Control, and Optimization\n* [http://www.data-assimilation.net/Tools/AssimDemo/?method=KF Online demo of the Kalman Filter]. Demonstration of Kalman Filter (and other data assimilation methods) using twin experiments.\n* {{cite journal |doi=10.3390/s110808164 |pages=1251\u20131259|title=FPGA-Based Multimodal Embedded Sensor System Integrating Low- and Mid-Level Vision|journal=Sensors|volume=11|issue=12|year=2011|last1=Botella|first1=Guillermo|last2=Mart\u00edn h.|first2=Jos\u00e9 Antonio|last3=Santos|first3=Matilde|last4=Meyer-Baese|first4=Uwe}}\n* [http://finmathblog.blogspot.com/2013/10/hookes-law-and-kalman-filter-little.html Hookes Law and the Kalman Filter] A little \"spring theory\" emphasizing the connection between statistics and physics.\n* [http://www.mathworks.com/discovery/kalman-filter.html Examples and how-to on using Kalman Filters with MATLAB] A Tutorial on Filtering and Estimation\n* [http://blog.sciencenet.cn/home.php?mod=space&uid=1565&do=blog&id=851754 Explaining Filtering (Estimation) in One Hour, Ten Minutes, One Minute, and One Sentence]  by Yu-Chi Ho\n\n{{Authority control}}\n\n[[Category:Control theory]]\n[[Category:Nonlinear filters]]\n[[Category:Linear filters]]\n[[Category:Signal estimation]]\n[[Category:Stochastic differential equations]]\n[[Category:Robot control]]\n[[Category:Markov models]]"}]}}}}