{"batchcomplete":"","query":{"normalized":[{"from":"File_Transfer_Protocol","to":"File Transfer Protocol"}],"pages":{"53289":{"pageid":53289,"ns":0,"title":"File Transfer Protocol","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{redirect|FTP}}\n{{IPstack}}\nThe '''File Transfer Protocol''' ('''FTP''') is a standard [[network protocol]] used to transfer [[computer file]]s between [[Client\u2013server model|a client and server]] on a [[computer network]].\n\nFTP is built on a client-server model architecture and uses separate control and data connections between the client and the server.<ref name=\"for\">{{cite book |last=Forouzan |first=B.A. |year=2000 |title=TCP/IP: Protocol Suite |edition=1st |location=New Delhi, India |publisher=Tata McGraw-Hill Publishing Company Limited}}</ref> FTP users may authenticate themselves with a [[clear text|clear-text]] sign-in protocol, normally in the form of a username and password, but can connect anonymously if the server is configured to allow it. For secure transmission that protects the username and password, and encrypts the content, FTP is often [[File Transfer Protocol#Security|secured]] with [[Transport Layer Security|SSL/TLS]] ([[FTPS]]). [[SSH File Transfer Protocol]] (SFTP) is sometimes also used instead, but is technologically different.\n\nThe first FTP client applications were [[Command-line interface|command-line programs]] developed before [[operating system]]s had [[graphical user interface]]s, and are still shipped with most [[Windows]], [[Unix]], and [[Linux]] operating systems.<ref name=\"tcpip\">{{cite web |last=Kozierok |first=Charles M. |year=2005 |title=The TCP/IP Guide v3.0 |url=http://www.tcpipguide.com/free/t_FTPOverviewHistoryandStandards.htm |publisher=Tcpipguide.com}}</ref><ref name=\"net+\"/> Many FTP clients and automation utilities have since been developed for desktops, servers, mobile devices, and hardware, and FTP has been incorporated into productivity applications, such as [[HTML editor|web page editors]].\n\n==History of FTP server==\nThe original specification for the File Transfer Protocol was written by [[Abhay Bhushan]] and published as RFC 114 on 16 April 1971. Until 1980, FTP ran on [[Network Control Program|NCP]], the predecessor of TCP/IP.<ref name=\"tcpip\" /> The protocol was later replaced by a TCP/IP version, RFC 765 (June 1980) and RFC 959 (October 1985), the current specification. Several proposed standards amend RFC 959, for example RFC 1579 (February 1994) enables Firewall-Friendly FTP (passive mode), RFC 2228 (June 1997) proposes security extensions, RFC 2428 (September 1998) adds support for [[IPv6]] and defines a new type of passive mode.<ref name=\"clark\">{{cite book |last=Clark |first=M.P. |year=2003 |title=Data Networks IP and the Internet |edition=1st |location=West Sussex, England |publisher=John Wiley & Sons Ltd.}}</ref>\n\n==Protocol overview==\n\n===Communication and data transfer===\n[[File:Passive FTP Verbindung.svg|thumb|Illustration of starting a passive connection using port 21]]\nFTP may run in ''active'' or ''passive'' mode, which determines how the data connection is established.<ref name=\"slack\">{{cite web |title=Active FTP vs. Passive FTP, a Definitive Explanation |url=http://slacksite.com/other/ftp.html |publisher=Slacksite.com |archiveurl=http://webcache.googleusercontent.com/search?q=cache:http://slacksite.com/other/ftp.html |archivedate=2014-12-31}}</ref> In both cases, the client creates a TCP control connection from a random, usually an unprivileged, port N to the FTP server command port 21.\n* In active mode, the client starts listening for incoming data connections from the server on port M. It sends the FTP command PORT M to inform the server on which port it is listening. The server then initiates a data channel to the client from its port 20, the FTP server data port.\n* In situations where the client is behind a [[Firewall (computing)|firewall]] and unable to accept incoming TCP connections, ''passive mode'' may be used. In this mode, the client uses the control connection to send a PASV command to the server and then receives a server IP address and server port number from the server,<ref name=\"slack\"/><ref name=\"Uftp\">{{cite web |last=Parker |first=Don |date=September 2005 |title=Understanding the FTP Protocol |url=http://www.windowsnetworking.com/articles_tutorials/understanding-ftp-protocol.html |publisher=Windowsnetworking.com}}</ref> which the client then uses to open a data connection from an arbitrary client port to the server IP address and server port number received.<ref name=\"postel\">RFC 959 (Standard) File Transfer Protocol (FTP). Postel, J. & Reynolds, J. (October 1985).</ref>\nBoth modes were updated in September 1998 to support [[IPv6]]. Further changes were introduced to the passive mode at that time, updating it to ''extended passive mode''.<ref>RFC 2428 (Proposed Standard) Extensions for IPv6, NAT, and Extended Passive Mode. Allman, M. & Metz, C. & Ostermann, S. (September 1998).</ref>\n\nThe server responds over the control connection with [[List of FTP server return codes|three-digit status codes]] in ASCII with an optional text message. For example, \"200\" (or \"200 OK\") means that the last command was successful. The numbers represent the code for the response and the optional text represents a human-readable explanation or request (e.g. &lt;Need account for storing file&gt;).<ref name=\"for\" /> An ongoing transfer of file data over the data connection can be aborted using an interrupt message sent over the control connection.\n\nWhile transferring data over the network, four data representations can be used:<ref name=\"tcpip\" /><ref name=\"net+\" /><ref name=\"clark\" />\n* [[ASCII]] mode: Used for text. Data is converted, if needed, from the sending host's character representation to [[Extended ASCII|\"8-bit ASCII\"]] before transmission, and (again, if necessary) to the receiving host's character representation. As a consequence, this mode is inappropriate for files that contain data other than plain text.\n* Image mode (commonly called [[Binary data|Binary]] mode): The sending machine sends each file [[byte]] for byte, and the recipient stores the [[bytestream]] as it receives it. (Image mode support has been recommended for all implementations of FTP).\n* [[EBCDIC]] mode: Used for plain text between hosts using the EBCDIC character set.\n* Local mode: Allows two computers with identical setups to send data in a proprietary format without the need to convert it to ASCII.\n\nFor text files, different format control and record structure options are provided. These features were designed to facilitate files containing [[Telnet]] or [[ASA carriage control characters|ASA]].\n\nData transfer can be done in any of three modes:<ref name=\"for\" /><ref name=\"tcpip\" />\n* Stream mode: Data is sent as a continuous stream, relieving FTP from doing any processing. Rather, all processing is left up to [[Transmission Control Protocol|TCP]]. No End-of-file indicator is needed, unless the data is divided into [[Record (computer science)|records]].\n* Block mode: FTP breaks the data into several blocks (block header, byte count, and data field) and then passes it on to TCP.<ref name=\"clark\" />\n* Compressed mode: Data is compressed using a simple algorithm (usually [[run-length encoding]]).\n\nSome FTP software also implements a [[DEFLATE]]-based compressed mode, sometimes called \"Mode Z\" after the command that enables it. This mode was described in an [[Internet Draft]], but not standardized.<ref>{{cite IETF |title=Deflate transmission mode for FTP |draft=draft-preston-ftpext-deflate-03.txt |first=J. |last=Preston |year=2005 |month=January |publisher=[[Internet Engineering Task Force|IETF]] |accessdate=27 January 2016}}</ref>\n\n===Login===\nFTP login utilizes a normal username and password scheme for granting access.<ref name=\"tcpip\" /> The username is sent to the server using the USER command, and the password is sent using the PASS command.<ref name=\"tcpip\" /> If the information provided by the client is accepted by the server, the server will send a greeting to the client and the session will commence.<ref name=\"tcpip\" /> If the server supports it, users may log in without providing login credentials, but the same server may authorize only limited access for such sessions.<ref name=\"tcpip\" />\n\n===Anonymous FTP===\nA host that provides an FTP service may provide [[Anonymity|anonymous]] FTP access.<ref name=\"tcpip\" /> Users typically log into the service with an 'anonymous' (lower-case and case-sensitive in some FTP servers) account when prompted for user name. Although users are commonly asked to send their [[email]] address instead of a password,<ref name=\"net+\">{{cite book |last=Dean |first=Tamara |title=Network+ Guide to Networks |publisher=Delmar |year=2010 |location= |pages=168\u2013171}}</ref> no verification is actually performed on the supplied data.<ref name=\"rfc16\">RFC 1635 (Informational) How to Use Anonymous FTP. P. & Emtage, A. & Marine, A. (May 1994).</ref> Many FTP hosts whose purpose is to provide software updates will allow anonymous logins.<ref name=\"net+\" />\n\n===NAT and firewall traversal===\nFTP normally transfers data by having the server connect back to the client, after the PORT command is sent by the client. This is problematic for both [[Network address translation|NATs]] and firewalls, which do not allow connections from the Internet towards internal hosts.<ref name=\"ncftp\">{{cite web |last=Gleason |first=Mike |year=2005 |title=The File Transfer Protocol and Your Firewall/NAT |url=http://www.ncftp.com/ncftpd/doc/misc/ftp_and_firewalls.html |publisher=Ncftp.com}}</ref> For NATs, an additional complication is that the representation of the IP addresses and port number in the PORT command refer to the internal host's IP address and port, rather than the public IP address and port of the NAT.\n\nThere are two approaches to this problem. One is that the FTP client and FTP server use the PASV command, which causes the data connection to be established from the FTP client to the server.<ref name=\"ncftp\" /> This is widely used by modern FTP clients. Another approach is for the NAT to alter the values of the PORT command, using an [[application-level gateway]] for this purpose.<ref name=\"ncftp\" />\n\n===Differences from HTTP===\n[[Hypertext Transfer Protocol|HTTP]] essentially fixes the bugs in FTP that made it inconvenient to use for many small ephemeral transfers as are typical in web pages.\n\nFTP has a stateful control connection which maintains a current working directory and other flags, and each transfer requires a secondary connection through which the data are transferred. In \"passive\" mode this secondary connection is from client to server, whereas in the default \"active\" mode this connection is from server to client. This apparent role reversal when in active mode, and random port numbers for all transfers, is why firewalls and NAT gateways have such a hard time with FTP. HTTP is stateless and multiplexes control and data over a single connection from client to server on well-known port numbers, which trivially passes through NAT gateways and is simple for firewalls to manage.\n\nSetting up an FTP control connection is quite slow due to the round-trip delays of sending all of the required commands and awaiting responses, so it is customary to bring up a control connection and hold it open for multiple file transfers rather than drop and re-establish the session afresh each time. In contrast, HTTP originally dropped the connection after each transfer because doing so was so cheap. While HTTP has subsequently gained the ability to reuse the TCP connection for multiple transfers, the conceptual model is still of independent requests rather than a session.\n\nWhen FTP is transferring over the data connection, the control connection is idle. If the transfer takes long enough, the firewall or NAT may decide that the control connection is dead and stop tracking it, effectively breaking the connection and confusing the download. The single HTTP connection is only idle between requests and it is normal and expected for such connections to be dropped after a time-out.\n\n==Web browser support==\nMost common [[web browser]]s can retrieve files hosted on FTP servers, although they may not support protocol extensions such as [[FTPS]].<ref name=\"net+\" /><ref name=\"matthews\">{{cite book |last=Matthews |first=J. |year=2005 |title=Computer Networking: Internet Protocols in Action |edition=1st |location=Danvers, MA |publisher=John Wiley & Sons Inc.}}</ref> When an FTP\u2014rather than an HTTP\u2014[[Uniform Resource Locator|URL]] is supplied, the accessible contents on the remote server are presented in a manner that is similar to that used for other web content. A full-featured FTP client can be run within [[Firefox]] in the form of an extension called [[FireFTP]].\n\n===Syntax===\nFTP URL syntax is described in RFC 1738, taking the form: <code>ftp://[user[:password]@]host[:port]/url-path</code> (the bracketed parts are optional).\n\nFor example, the URL <nowiki>ftp://public.ftp-servers.example.com/mydirectory/myfile.txt</nowiki> represents the file ''myfile.txt'' from the directory ''mydirectory'' on the server ''public.ftp-servers.example.com'' as an FTP resource. The URL <nowiki>ftp://user001:secretpassword@private.ftp-servers.example.com/mydirectory/myfile.txt</nowiki> adds a specification of the username and password that must be used to access this resource.\n\nMore details on specifying a username and password may be found in the browsers' documentation (e.g., [[Firefox]]<ref>{{cite web |url=http://support.mozilla.com/en-US/kb/Accessing+FTP+servers#FTP_servers_that_require_a_username_and_password |title=Accessing FTP servers &#124; How to &#124; Firefox Help |publisher=Support.mozilla.com |date=2012-09-05 |accessdate=2013-01-16}}</ref> and [[Internet Explorer]]<ref>{{cite web |url=http://support.microsoft.com/kb/135975 |title=How to Enter FTP Site Password in Internet Explorer |publisher=Support.microsoft.com |date=2011-09-23 |accessdate=2015-03-28}} Written for IE versions 6 and earlier. Might work with newer versions.</ref>). By default, most web browsers use passive (PASV) mode, which more easily traverses end-user firewalls.\n\n==Security==\nFTP was not designed to be a secure protocol, and has many security weaknesses.<ref name=\"nurdle\" /> In May 1999, the authors of RFC 2577 listed a vulnerability to the following problems:\n*[[Brute force attack]]\n*[[FTP bounce attack]]\n*[[Packet capture]]\n*Port stealing (guessing the next open port and usurping a legitimate connection)\n*[[Spoofing attack]]\n*[[Username]] enumeration\n\nFTP does not encrypt its traffic; all transmissions are in clear text, and usernames, passwords, commands and data can be read by anyone able to perform packet capture ([[Packet analyzer|sniffing]]) on the network.<ref name=\"tcpip\" /><ref name=\"nurdle\" /> This problem is common to many of the Internet Protocol specifications (such as [[SMTP]], [[Telnet]], POP and IMAP) that were designed prior to the creation of encryption mechanisms such as [[Transport Layer Security|TLS]] or SSL.<ref name=\"clark\" />\n\nCommon solutions to this problem include:\n# Using the secure versions of the insecure protocols, e.g., [[FTPS]] instead of FTP and TelnetS instead of Telnet.\n# Using a different, more secure protocol that can handle the job, e.g. [[SSH File Transfer Protocol]] or [[Secure Copy Protocol]].\n# Using a secure tunnel such as [[Secure Shell]] (SSH) or [[virtual private network]] (VPN).\n\n===FTP over SSH=== <!-- This section is linked from [[OpenSSH]] -->\nFTP over SSH is the practice of tunneling a normal FTP session over a Secure Shell connection.<ref name=\"nurdle\">{{cite web |title=Securing FTP using SSH |url=http://www.nurdletech.com/linux-notes/ftp/ssh.html |publisher=Nurdletech.com}}</ref> Because FTP uses multiple [[Transmission Control Protocol|TCP]] connections (unusual for a TCP/IP protocol that is still in use), it is particularly difficult to tunnel over SSH. With many SSH clients, attempting to set up a tunnel for the control channel (the initial client-to-server connection on port 21) will protect only that channel; when data is transferred, the FTP software at either end sets up new TCP connections (data channels) and thus have no [[confidentiality]] or [[integrity protection]].\n\nOtherwise, it is necessary for the SSH client software to have specific knowledge of the FTP protocol, to monitor and rewrite FTP control channel messages and autonomously open new [[packet forwarding]]s for FTP data channels. Software packages that support this mode include:\n* Tectia ConnectSecure (Win/Linux/Unix)<ref>http://ssh.com/index.php/products/tectia-pci-point-to-point-encryption.html</ref> of [[SSH Communications Security]]'s software suite\n\n==Derivatives==\n\n===FTPS===\n{{Main article|FTPS}}\nExplicit FTPS is an extension to the FTP standard that allows clients to request FTP sessions to be encrypted. This is done by sending the \"AUTH TLS\" command. The server has the option of allowing or denying connections that do not request TLS. This protocol extension is defined in RFC 4217. Implicit FTPS is an outdated standard for FTP that required the use of a SSL or TLS connection. It was specified to use different ports than plain FTP.\n\n===SSH File Transfer Protocol===\n{{Main article|SSH File Transfer Protocol}}\nThe SSH file transfer protocol (chronologically the second of the two protocols abbreviated SFTP) transfers files and has a similar command set for users, but uses the [[Secure Shell]] protocol (SSH) to transfer files. Unlike FTP, it encrypts both commands and data, preventing passwords and sensitive information from being transmitted openly over the network. It cannot interoperate with FTP software.\n\n===Trivial File Transfer Protocol===\n{{Main article|Trivial File Transfer Protocol}}\nTrivial File Transfer Protocol (TFTP) is a simple, lock-step FTP that allows a client to get a file from or put a file onto a remote host. One of its primary uses is in the early stages of [[Network booting|booting from a local area network]], because TFTP is very simple to implement. TFTP lacks security and most of the advanced features offered by more robust file transfer protocols such as File Transfer Protocol. TFTP was first standardized in 1981 and the current specification for the protocol can be found in RFC 1350.\n\n===Simple File Transfer Protocol===\n<!--Simple File Transfer Protocol redirects here-->\nSimple File Transfer Protocol (the first protocol abbreviated SFTP), as defined by RFC 913, was proposed as an (unsecured) file transfer protocol with a level of complexity intermediate between TFTP and FTP. It was never widely accepted on the [[Internet]], and is now assigned Historic status by the [[Internet Engineering Task Force|IETF]]. It runs through port 115, and often receives the initialism of ''SFTP''. It has a command set of 11 commands and support three types of data transmission: [[ASCII]], [[Binary file|binary]] and continuous. For systems with a [[word size]] that is a multiple of 8 bits, the implementation of binary and continuous is the same. The protocol also supports login with user ID and password, hierarchical folders and file management (including ''rename'', ''delete'', ''upload'', ''download'', ''download with overwrite'', and ''download with append'').\n\n==FTP commands==\n{{main article|List of FTP commands}}\n\n==FTP reply codes==\n{{main article|List of FTP server return codes}}\nBelow is a summary of [[List of FTP server return codes|FTP reply codes]] that may be returned by an FTP [[Server (computing)|server]]. These codes have been standardized in RFC 959 by the IETF. The reply code is a three-digit value. The first digit is used to indicate one of three possible outcomes&nbsp;\u2014 success, failure, or to indicate an error or incomplete reply:\n* 2yz&nbsp;&ndash; Success reply\n* 4yz or 5yz &ndash; Failure reply\n* 1yz or 3yz &ndash; Error or Incomplete reply\n\nThe second digit defines the kind of error:\n* x0z &ndash; Syntax. These replies refer to syntax errors.\n* x1z &ndash; Information. Replies to requests for information.\n* x2z &ndash; Connections. Replies referring to the control and data connections.\n* x3z &ndash; Authentication and accounting. Replies for the login process and accounting procedures.\n* x4z &ndash; Not defined.\n* x5z &ndash; File system. These replies relay status codes from the server file system.\n\nThe third digit of the reply code is used to provide additional detail for each of the categories defined by the second digit.\n\n==See also==\n* [[Comparison of FTP client software]]\n* [[Comparison of FTP server software]]\n* [[Curl-loader]] \u2013 FTP/S loading/testing open-source software\n* [[File eXchange Protocol]] (FXP)\n* [[File Service Protocol]] (FSP)\n* [[FTAM]]\n* [[FTPFS]]\n* [[List of file transfer protocols]]\n* [[List of FTP commands]]\n* [[List of FTP server return codes]]\n* [[Managed File Transfer]]\n* [[OBEX]]\n* [[Shared file access]]\n* [[TCP Wrapper]]\n\n==References==\n{{reflist|2}}\n\n==Further reading==\n* RFC 697 \u2013 CWD Command of FTP. July 1975.\n* RFC 959 \u2013 (Standard) File Transfer Protocol (FTP). J. Postel, J. Reynolds. October 1985.\n* RFC 1579 \u2013 (Informational) Firewall-Friendly FTP. February 1994.\n* RFC 1635 \u2013 (Informational) How to Use Anonymous FTP. May 1994.\n* RFC 1639 \u2013 FTP Operation Over Big Address Records (FOOBAR). June 1994.\n* RFC 1738 \u2013 Uniform Resource Locators (URL). December 1994.\n* RFC 2228 \u2013 (Proposed Standard) FTP Security Extensions. October 1997.\n* RFC 2389 \u2013 (Proposed Standard) Feature negotiation mechanism for the File Transfer Protocol. August 1998.\n* RFC 2428 \u2013 (Proposed Standard) Extensions for IPv6, NAT, and Extended passive mode. September 1998.\n* RFC 2577 \u2013 (Informational) FTP Security Considerations. May 1999.\n* RFC 2640 \u2013 (Proposed Standard) Internationalization of the File Transfer Protocol. July 1999.\n* RFC 3659 \u2013 (Proposed Standard) Extensions to FTP. P. Hethmon. March 2007.\n* RFC 5797 \u2013 (Proposed Standard) FTP Command and Extension Registry. March 2010.\n* RFC 7151 - (Proposed Standard) File Transfer Protocol HOST Command for Virtual Hosts.  March 2014.\n*[http://www.iana.org/assignments/ftp-commands-extensions/ftp-commands-extensions.xhtml IANA FTP Commands and Extensions registry] &ndash; The official registry of FTP Commands and Extensions\n\n{{Wikibooks|Communication Networks/File Transfer Protocol}}\n{{URI scheme}}\n{{Use dmy dates|date=August 2016}}\n\n[[Category:File Transfer Protocol| ]]\n[[Category:Clear text protocols]]\n[[Category:Network file transfer protocols]]\n[[Category:History of the Internet]]\n[[Category:Application layer protocols]]\n[[Category:Internet Standards]]\n[[Category:Unix network-related software]]\n[[Category:1980 introductions]]"}]}}}}