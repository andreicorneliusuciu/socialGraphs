{"batchcomplete":"","query":{"normalized":[{"from":"User_identifier","to":"User identifier"}],"pages":{"1426292":{"pageid":1426292,"ns":0,"title":"User identifier","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"[[Unix-like]] operating systems identify a user within the [[kernel (computing)|kernel]] by a value called a '''user identifier''', often abbreviated to '''user ID''' or '''UID'''. The UID, along with the [[group identifier]] (GID) and other access control criteria, is used to determine which system resources a user can access. The [[Passwd (file)|password file]] maps textual [[user name]]s to UIDs, but in the kernel, only UIDs are used. UIDs are stored in the [[inode]]s of the [[Unix]] [[file system]], running [[Process (computing)|processes]], [[tar (computing)|tar]] archives, and the now-obsolete [[Network Information Service]]. In [[POSIX]]-compliant environments, the command-line command [[Id (Unix)|<code>id</code>]] gives the current user's UID, as well as more information such as the user name, primary user group and group identifier (GID).\n\n== Process attributes ==\nThe POSIX standard introduced three different UID fields into the process descriptor table, to allow privileged processes to take on different roles dynamically:\n\n===Effective user ID===\nThe effective UID (<code>euid</code>) of a process is used for most access checks. It is also used as the owner for files created by that process. The effective GID (<code>egid</code>) of a process also affects access control and may also affect file creation, depending on the semantics of the specific kernel implementation in use and possibly the mount options used. According to BSD Unix semantics, the group ownership given a newly created file is unconditionally inherited from the group ownership of the directory in which it is created. According to [[AT&T]] [[UNIX System V]] semantics (also adopted by Linux variants) newly created files will normally be given the group ownership of the <code>egid</code> of the process that creates them. Most filesystems implement a method to select whether BSD or AT&T semantics should be used regarding group ownership of newly created files, BSD semantics is selected for specific directories in case that the S_ISGID (s-gid) permission is set.<ref>{{man|1|chmod|Solaris}}</ref>\n\n====File system user ID====\nLinux also has a file system user ID (<code>fsuid</code>) which is used explicitly for access control to the file system. It matches the <code>euid</code> unless explicitly set otherwise. It may be root's user ID only if <code>ruid</code>, <code>suid</code>, or <code>euid</code> is root. Whenever the <code>euid</code> is changed, the change is propagated to the <code>fsuid</code>.\n\nThe intent of <code>fsuid</code> is to permit programs (e.g., the [[Network File System|NFS]] server) to limit themselves to the file system rights of some given <code>uid</code> without giving that <code>uid</code> permission to send them signals. Since kernel 2.0, the existence of <code>fsuid</code> is no longer necessary because Linux adheres to [[Single UNIX Specification#2001: POSIX:2001, Single UNIX Specification version 3|SUSv3]] rules for sending signals, but <code>fsuid</code> remains for compatibility reasons.<ref name='Kerrisk'>Kerrisk, Michael. ''The Linux Programming Interface''. No Starch Press, 2010, p.  171.</ref>\n\n===Saved user ID===\nThe saved user ID (<code>suid</code>) is used when a program running with elevated privileges needs to temporarily do some unprivileged work: it changes its effective user ID from a privileged value (typically root) to some unprivileged one, and this triggers a copy of the privileged user ID to the saved user ID slot.<ref>{{cite web|url=http://www.cs.berkeley.edu/~daw/papers/setuid-usenix02.pdf |format=PDF |title=Setuid Demystified |website=Cs.berkeley.edu |accessdate=2016-09-24}}</ref> Later, it can set its effective user ID back to the saved user ID (an unprivileged process can only set its effective user ID to three values: its real user ID, its saved user ID, and its effective user ID\u2014i.e., unchanged) to resume its privileges.\n\n===Real user ID===\nThe real UID (<code>ruid</code>) and real GID (<code>rgid</code>) identify the real owner of the process and affect the permissions for sending signals. A process without superuser privilege can signal another process only if the sender's real or effective UID matches the real or saved UID of the receiver.<ref name='Kerrisk'/> Since child processes inherit the credentials from the parent, they can signal each other.\n\n== Conventions ==\n\n=== Type ===\nPOSIX requires the UID to be an integer type. Most Unix-like operating systems represent the UID as an unsigned integer. The size of UID values varies amongst different systems; some UNIX OS's{{which|date=June 2014}} used 15-bit values, allowing values up to 32767{{citation needed|reason=SunOS-3.x and SunOS-4.x used -2 as the uid nobody that maps to 65534.|date=June 2015}}, while others such as [[Linux]] (before version 2.4) supported [[16-bit]] UIDs, making 65536 unique IDs possible. The majority of modern Unix-like systems (e.g., Solaris-2.0 in 1990, Linux 2.4 in 2001) have switched to [[32-bit]] UIDs, allowing 4,294,967,296 (2<sup>32</sup>) unique IDs.\n\n=== Reserved ranges ===\nThe [[Linux Standard Base]] Core Specification specifies that UID values in the range 0 to 99 should be statically allocated by the system, and shall not be created by applications, while UIDs from 100 to 499 should be reserved for dynamic allocation by system administrators and post install scripts.<ref>{{cite web|url=https://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/uidrange.html |title=9.3. UID Ranges |website=Refspecs.linuxfoundation.org |date= |accessdate=2016-09-24}}</ref>\n\nOn FreeBSD, porters who need a UID for their package can pick a free one from the range 50 to 999 and then register the static allocation.<ref>{{cite web|author= |url=http://www.freebsd.org/doc/en/books/porters-handbook/ |title=FreeBSD Porter's Handbook |website=Freebsd.org |date= |accessdate=2016-09-24}}</ref><ref>http://www.freebsd.org/doc/en/books/porters-handbook/users-and-groups.html</ref>\n\nSome POSIX systems allocate UIDs for new users starting from 500 ([[OS X]], [[Red Hat Enterprise Linux]]), others start at 1000 ([[openSUSE]], [[Debian]]<ref>{{cite web|url=https://www.debian.org/doc/debian-policy/ch-opersys.html |title=Debian Policy Manual - The Operating System |website=Debian.org |date=2016-03-30 |accessdate=2016-09-24}}</ref>). On many Linux systems, these ranges are specified  in <code>/etc/login.defs</code>, for <code>useradd</code> and similar tools.\n\nCentral UID allocations in enterprise networks (e.g., via [[LDAP]] and [[Network File System|NFS]] servers) may limit themselves to using only UID numbers well above 1000, to avoid potential conflicts with UIDs locally allocated on client computers. [[NFSv4]] can help avoid numeric identifier collisions, by identifying users (and groups) in protocol packets using \"user@domain\" names rather than integer numbers, at the expense of additional translation steps.\n\n=== Special values ===\n* 0: The [[superuser]] normally has a UID of zero (0).<ref>{{cite web|url=http://pubs.opengroup.org/onlinepubs/009695399/functions/getpwuid.html |title=Getpwuid |website=Pubs.opengroup.org |date= |accessdate=2016-09-24}}</ref>\n* \u22121: The value <code>(uid_t) -1</code> is reserved by POSIX to identify an omitted argument.<ref>{{cite web|url=http://pubs.opengroup.org/onlinepubs/009695399/functions/chown.html |title=Chown |website=Pubs.opengroup.org |date= |accessdate=2016-09-24}}</ref>\n* Nobody: Historically, the user \"[[nobody (username)|nobody]]\" was assigned UID <code>-2</code> by several operating systems, although other values such as 2<sup>15</sup>\u22121 = 32,767 are also in use, such as by [[OpenBSD]].<ref>{{cite web|url=http://gnats.netbsd.org/6594 |title=NetBSD Problem Report #6594: the default \"nobody\" credentials (32767:9999) do not match mountd's default (-2:-2) |website=Gnats.netbsd.org |date= |accessdate=2016-09-24}}</ref> For compatibility between 16-bit and 32-bit UIDs, many Linux distributions now set it to be 2<sup>16</sup>\u22122 = 65,534; the Linux kernel defaults to returning this value when a 32-bit UID does not fit into the return value of the 16-bit system calls.<ref>{{cite web|url=https://lwn.net/Articles/532593/ |title=Namespaces in operation, part 5: User namespaces |website=Lwn.net |date= |accessdate=2016-09-24}}</ref> An alternative convention assigns the last UID of the range statically allocated for system use (0-99) to nobody: 99.\n\n==See also==\n* [[setuid]]\n* [[Sticky bit]]\n* [[Group identifier]]\n* [[Process identifier]]\n* [[File system permissions]]\n* [[Open (system call)]]\n* [[Mount (Unix)]]\n* [[FAT access rights]]\n* [[Security Identifier]] (SID) \u2013 the [[Windows NT]] equivalent\n\n==References==\n{{Reflist}}\n\n{{DEFAULTSORT:User Identifier}}\n[[Category:Unix]]\n[[Category:Unix file system technology]]"}]}}}}