{"batchcomplete":"","query":{"normalized":[{"from":"routing","to":"Routing"}],"pages":{"25750":{"pageid":25750,"ns":0,"title":"Routing","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{about|routing in [[packet switching]] networks}}\n\n'''Routing''' is the process of selecting a path for traffic in a [[Network theory|network]], or between or across multiple networks. Routing is performed for many types of networks, including [[circuit switching|circuit-switched network]]s, such as the [[public switched telephone network]] (PSTN), [[computer network]]s, such as the [[Internet]], as well as in networks used in public and private transportation, such as the system of [[road network|streets, roads, and highways]] in national infrastructure.\n\nIn packet switching networks, routing is the higher-level decision making that directs [[network packet]]s from their source toward their destination through intermediate [[Node (networking)|network nodes]] by specific packet forwarding mechanisms. [[Packet forwarding]] is the transit of logically addressed network packets from one [[network interface]] to another.  Intermediate nodes are typically [[network hardware]] devices such as [[Router (computing)|routers]], [[Bridging (networking)|bridges]], [[gateway (telecommunications)|gateways]], [[Firewall (computing)|firewalls]], or [[network switch|switches]]. General-purpose [[computer]]s also forward packets and perform routing, although they have no specially optimized hardware for the task. The routing process usually directs forwarding on the basis of [[routing table]]s, which maintain a record of the routes to various network destinations. Thus, constructing routing tables, which are held in the router's [[Computer storage|memory]], is very important for efficient routing. Most routing algorithms use only one network path at a time. [[Multipath routing]] techniques enable the use of multiple alternative paths.\n\nRouting, in a narrower sense of the term, is often contrasted with [[bridging (networking)|bridging]] in its assumption that [[network address]]es are structured and that similar addresses imply proximity within the network. Structured addresses allow a single routing table entry to represent the route to a group of devices.  In large networks, structured addressing (routing, in the narrow sense) outperforms unstructured addressing (bridging). Routing has become the dominant form of addressing on the Internet. Bridging is still widely used within localized environments.\n\n==Delivery schemes==\n<!--{{routing scheme}} links to this section-->\n{{routing scheme}}\nRouting schemes differ in how they deliver messages:\n* [[unicast]] delivers a message to a single specific node\n* [[anycast]] delivers a message to anyone out of a group of nodes, typically the one nearest to the source\n* [[multicast]] delivers a message to a group of nodes that have expressed interest in receiving the message\n* [[geocast]] delivers a message to a geographic area\n* [[Broadcasting (computing)|broadcast]] delivers a message to all nodes in the network\n\nUnicast is the dominant form of message delivery on the Internet.  This article focuses on unicast routing algorithms.\n\n==Topology distribution==\nIn [[static routing]] (or non-dynamic routing), small networks may use manually configured routing tables. Larger networks have complex [[network topology|topologies]] that can change rapidly, making the manual construction of routing tables unfeasible. Nevertheless, most of the [[public switched telephone network]] (PSTN) uses pre-computed routing tables, with fallback routes if the most direct route becomes blocked (see [[routing in the PSTN]]).\n\n[[Dynamic routing]] attempts to solve this problem by constructing routing tables automatically, based on information carried by [[routing protocol]]s, allowing the network to act nearly autonomously in avoiding network failures and blockages. Dynamic routing dominates the Internet. Examples of dynamic-routing protocols and algorithms include [[Routing Information Protocol]] (RIP), [[Open Shortest Path First]] (OSPF) and [[Enhanced Interior Gateway Routing Protocol]] (EIGRP).\n\n===Distance vector algorithms===\n{{main|Distance-vector routing protocol}}\nDistance vector algorithms use the [[Bellman\u2013Ford algorithm]]. This approach assigns a ''cost'' number to each of the links between each node in the network. Nodes send information from point A to point B via the path that results in the lowest ''total cost'' (i.e. the sum of the costs of the links between the nodes used).\n\nThe algorithm operates in a very simple manner. When a node first starts, it only knows of its immediate neighbours, and the direct cost involved in reaching them. (This information \u2014 the list of destinations, the total cost to each, and the ''next hop'' to send data to get there \u2014 makes up the routing table, or ''distance table''.) Each node, on a regular basis, sends to each neighbour node its own current assessment of the total cost to get to all the destinations it knows of. The neighbouring nodes examine this information and compare it to what they already 'know'; anything that represents an improvement on what they already have, they insert in their own routing table(s). Over time, all the nodes in the network discover the best next hop for all destinations, and the best total cost.\n\nWhen one network node goes down, any nodes that used it as their next hop discard the entry, and create new routing-table information. These nodes convey the updated routing information to all adjacent nodes, which in turn repeat the process. Eventually all the nodes in the network receive the updates, and discover new paths to all the destinations they can still \"reach\".\n\n===Link-state algorithms===\n{{main|Link-state routing protocol}}\nWhen applying link-state algorithms, a [[Graph (discrete mathematics)|graphical]] [[map]] of the network is the fundamental data used for each node. To produce its map, each node floods the entire network with information about the other nodes it can connect to.  Each node then independently assembles this information into a map. Using this map, each router independently determines the least-cost path from itself to every other node using a standard [[Shortest path problem|shortest paths]] algorithm such as [[Dijkstra's algorithm]]. The result is a [[Tree (graph theory)|tree graph]] rooted at the current node, such that the path through the tree from the root to any other node is the least-cost path to that node. This tree then serves to construct the routing table, which specifies the best next hop to get from the current node to any other node.\n\n===Optimised Link State Routing algorithm===\n{{main|Optimized Link State Routing Protocol}}\nA link-state routing algorithm optimised for [[mobile ad hoc network]]s is the ''Optimised Link State Routing Protocol (OLSR)''.<ref>RFC 3626</ref> OLSR is proactive; it uses Hello and Topology Control (TC) messages to discover and disseminate link state information through the [[mobile ad hoc network]]. Using Hello messages, each node discovers 2-hop neighbor information and elects a set of ''[[multipoint relay]]s'' (MPRs). MPRs distinguish OLSR from other link state routing protocols.\n\n===Path vector protocol===\n{{main|Path vector protocol}}\nDistance vector and link state routing are both intra-domain routing protocols. They are used inside an [[Autonomous system (Internet)|autonomous system]], but not between autonomous systems. Both of these routing protocols become intractable in large networks and cannot be used in [[Inter-domain]] routing. Distance vector routing is subject to instability if there are more than a few hops in the domain. Link state routing needs huge amount of resources to calculate routing tables. It also creates heavy traffic due to flooding.\n\nPath vector routing is used for inter-domain routing. It is similar to distance vector routing. Path vector routing assumes that one node (there can be many) in each autonomous system acts on behalf of the entire autonomous system. This node is called the ''speaker node.'' The speaker node creates a routing table and advertises it to neighboring speaker nodes in neighboring autonomous systems. The idea is the same as distance vector routing except that only speaker nodes in each autonomous system can communicate with each other. The speaker node advertises the path, not the metric, of the nodes in its autonomous system or other autonomous systems.\nPath vector routing is discussed in RFC 1322; the path vector routing algorithm is somewhat similar to the distance vector algorithm in the sense that each border router advertises the destinations it can reach to its neighboring router. However, instead of advertising networks in terms of a destination and the distance to that destination, networks are advertised as destination addresses and path descriptions to reach those destinations. A route is defined as a pairing between a destination and the attributes of the path to that destination, thus the name, path vector routing, where the routers receive a vector that contains paths to a set of destinations.\nThe path, expressed in terms of the domains (or confederations) traversed so far, is carried in a special path attribute that records the sequence of routing domains through which the reachability information has passed.\n\n==Path selection==\nPath selection involves applying a [[Metrics (networking)|routing metric]] to multiple routes to select (or predict) the best route.\n\nIn computer networking, the metric is computed by a routing algorithm, and can cover information such as [[Bandwidth (computing)|bandwidth]], [[network delay]], [[hop count]], path cost, load, [[MTU (networking)|MTU]] (maximum transmission unit), reliability, and communication cost (see e.g. [http://rainer.baumann.info/public/tik262.pdf this survey ] for a list of proposed routing metrics). The routing table stores only the best possible routes, while [[link-state]] or topological databases may store all other information as well.\n\nIn case of overlapping or equal routes, algorithms consider the following elements to decide which routes to install into the routing table (sorted by priority):\n#''Prefix-Length'': where longer subnet masks are preferred (independent of whether it is within a routing protocol or over different routing protocol)\n#''Metric'': where a lower metric/cost is preferred (only valid within one and the same routing protocol)\n#''[[Administrative distance]]'': where a route learned from a more reliable routing protocol is preferred (only valid between different routing protocols)\n\nBecause a routing metric is specific to a given routing protocol, multi-protocol routers must use some external [[heuristic]] to select between routes learned from different routing protocols. [[Cisco]] routers, for example, attribute a value known as the [[administrative distance]] to each route, where smaller administrative distances indicate routes learned from a supposedly more reliable protocol.\n\nA local network administrator, in special cases, can set up host-specific routes to a particular device that provides more control over network usage, permits testing, and better overall security. This is useful for debugging network connections or routing tables.\n\nIn some small systems, a single central device decides ahead of time the complete path of every packet.\nIn some other small systems, whichever edge device injects a packet into the network decides ahead of time the complete path of that particular packet.\nIn both of these systems, that route-planning device needs to know a lot of information about what devices are connected to the network and how they are connected to each other.\nOnce it has this information, it can use an algorithm such as [[A* search algorithm]] to find the best path.\n\nIn high-speed systems, there are so many packets transmitted every second that it is infeasible for a single device to calculate the complete path for each and every packet. Early high-speed systems dealt with this by setting up a [[circuit switching]] [[relay channel]] once for the first packet between some source and some destination; later packets between that same source and that same destination continue to follow the same path without recalculating until the channel [[teardown (communications)|teardown]]. Later high-speed systems inject packets into the network without any one device ever calculating a complete path for that packet\u2014multiple agents.\n\nIn large systems, there are so many connections between devices, and those connections change so frequently, that it is infeasible for any one device to even know how all the devices are connected to each other, much less calculate a complete path through them.\nSuch systems generally use [[hop (networking)#Next hop|next-hop]] routing.\n\nMost systems use a deterministic [[dynamic routing]] algorithm:\nWhen a device chooses a path to a particular final destination, that device always chooses the same path to that destination until it receives information that makes it think some other path is better.\nA few routing algorithms do not use a deterministic algorithm to find the \"best\" link for a packet to get from its original source to its final destination.\nInstead, to avoid congestion in switched systems or network hot spots in packet systems, a few algorithms use a randomized algorithm\u2014Valiant's paradigm\u2014that routes a path to a randomly picked intermediate destination, and from there to its true final destination.<ref>\nMichael Mitzenmacher;  Andr\u00e9a W. Richa; Ramesh Sitaraman.\n[http://www.eecs.harvard.edu/~michaelm/postscripts/handbook2001.pdf \"The Power of Two Random Choices: A Survey of Techniques and Results\"].\nSection \"Randomized Protocols for Circuit Routing\".\np. 34.\n</ref><ref>\nStefan Haas.\n[http://inspirehep.net/record/887357/files/cer-002474543.pdf \"The IEEE 1355 Standard: Developments, Performance and Application in High Energy Physics\"].\n1998.\np. 15.\nquote:\n\"To eliminate network hot spots, ... a two phase routing algorithm.\nThis involves every packet being first sent to a randomly chosen intermediate destination;\nfrom the intermediate destination it is forwarded to its final destination.\nThis algorithm, referred to as Universal Routing, is designed to maximize capacity and minimize delay\nunder conditions of heavy load.\"\n</ref>\nIn many early telephone switches, a [[randomizer]] was often used to select the start of a path through a [[1ESS switch#Switching fabric|multistage switching fabric]].\n\n==Multiple agents==\nIn some networks, routing is complicated by the fact that no single entity is responsible for selecting paths; instead, multiple entities are involved in selecting paths or even parts of a single path. Complications or inefficiency can result if these entities choose paths to optimize their own objectives, which may conflict with the objectives of other participants.\n\nA classic example involves traffic in a road system, in which each driver picks a path that minimizes their travel time. With such routing, the [[Nash equilibrium|equilibrium]] routes can be longer than optimal for all drivers. In particular, [[Braess' paradox]] shows that adding a new road can ''lengthen'' travel times for all drivers.\n\nIn another model, for example, used for routing [[automated guided vehicle]]s (AGVs) on a terminal, reservations are made for each vehicle to prevent simultaneous use of the same part of an infrastructure. This approach is also referred to as context-aware routing.<ref>\nJonne Zutt, Arjan J.C. van Gemund, Mathijs M. de Weerdt, and Cees Witteveen (2010). [http://www.st.ewi.tudelft.nl/~mathijs/publications/intinfra09.pdf Dealing with Uncertainty in Operational Transport Planning]. In R.R. Negenborn and Z. Lukszo and H. Hellendoorn (Eds.) Intelligent Infrastructures, Ch. 14, pp. 355\u2013382. Springer.</ref>\n\nThe Internet is partitioned into [[autonomous system (Internet)|autonomous systems]] (ASs) such as [[internet service provider]]s (ISPs), each of which controls routes involving its network, at multiple levels. First, AS-level paths are selected via the [[Border Gateway Protocol|BGP]] protocol, which produces a sequence of ASs through which packets flow. Each AS may have multiple paths, offered by neighboring ASs, from which to choose. Its decision often involves business relationships with these neighboring ASs,<ref>Matthew Caesar and [[Jennifer Rexford]]. [http://www.cs.princeton.edu/~jrex/papers/policies.pdf BGP routing policies in ISP networks]. IEEE Network Magazine, special issue on Interdomain Routing, Nov/Dec 2005.</ref> which may be unrelated to path quality or latency. Second, once an AS-level path has been selected, there are often multiple corresponding router-level paths, in part because two ISPs may be connected in multiple locations. In choosing the single router-level path, it is common practice for each ISP to employ [[hot-potato routing]]: sending traffic along the path that minimizes the distance through the ISP's own network\u2014even if that path lengthens the total distance to the destination.\n\nConsider two ISPs, ''A'' and ''B''. Each has a presence in [[New York City|New York]], connected by a fast link with latency 5 [[millisecond|ms]]\u2014and each has a presence in [[London]] connected by a 5 ms link. Suppose both ISPs have trans-Atlantic links that connect their two networks, but ''A''<nowiki>'s</nowiki> link has latency 100 ms and B's has latency 120 ms. When routing a message from a source in ''A''<nowiki>'s</nowiki> London network to a destination in ''B''<nowiki>'s</nowiki> New York network, ''A'' may choose to immediately send the message to ''B'' in London. This saves ''A'' the work of sending it along an expensive trans-Atlantic link, but causes the message to experience latency 125 ms when the other route would have been 20 ms faster.\n\nA 2003 measurement study of Internet routes found that, between pairs of neighboring ISPs, more than 30% of paths have inflated latency due to hot-potato routing, with 5% of paths being delayed by at least 12 ms. Inflation due to AS-level path selection, while substantial, was attributed primarily to BGP's lack of a mechanism to directly optimize for latency, rather than to selfish routing policies. It was also suggested that, were an appropriate mechanism in place, ISPs would be willing to cooperate to reduce latency rather than use hot-potato routing.<ref>Neil Spring, Ratul Mahajan, and Thomas Anderson. [http://www.cs.washington.edu/research/networking/rocketfuel/papers/sigcomm2003.pdf Quantifying the Causes of Path Inflation]. Proc. [[SIGCOMM]] 2003.</ref>\n\nSuch a mechanism was later published by the same authors, first for the case of two ISPs<ref>Ratul Mahajan, David Wetherall, and Thomas Anderson. [http://research.microsoft.com/en-us/um/people/ratul/papers/nsdi2005-nexit.pdf Negotiation-Based Routing Between Neighboring ISPs]. Proc. [[NSDI]] 2005.</ref> and then for the global case.<ref>Ratul Mahajan, David Wetherall, and Thomas Anderson. [http://research.microsoft.com/en-us/um/people/ratul/papers/nsdi2007-wiser.pdf Mutually Controlled Routing with Independent ISPs]. Proc. [[NSDI]] 2007.</ref>\n\n==Route analytics==\nAs the Internet and IP networks become [[mission critical]] business tools, there has been increased interest in techniques and methods to monitor the routing posture of networks. Incorrect routing or routing issues cause undesirable performance degradation, [[route flapping|flapping]] and/or downtime. Monitoring routing in a network is achieved using [[route analytics]] tools and techniques.\n\n==See also==\n{{colbegin|2}}\n* [[Deflection routing]]\n* [[Edge Disjoint Shortest Pair Algorithm]]\n* [[Flood search routing]]\n* [[Fuzzy routing]]\n* [[Geographic routing]]\n* [[Heuristic routing]]\n* [[Path computation element]] (PCE)\n* [[Policy-based routing]]\n* [[Wormhole routing]]\n* [[Small world routing]]\n{{colend}}\n\n==References==\n{{reflist}}\n\n==Further reading==\n{{refbegin}}\n* {{cite book | author=Ash, Gerald | title=Dynamic Routing in Telecommunication Networks | publisher=McGraw\u2013Hill | year=1997 | isbn=0-07-006414-8}}\n* {{cite book |author1=Doyle, Jeff  |author2=Carroll, Jennifer  |lastauthoramp=yes | title=Routing TCP/IP, Volume I, Second Ed. | publisher=Cisco Press | year=2005 | isbn=1-58705-202-4}}[http://www.ciscopress.com/title/1587052024 <nowiki>Ciscopress ISBN 1-58705-202-4</nowiki>]\n* {{cite book |author1=Doyle, Jeff  |author2=Carroll, Jennifer  |lastauthoramp=yes | title=Routing TCP/IP, Volume II, | publisher=Cisco Press | year=2001 | isbn=1-57870-089-2}}[http://www.ciscopress.com/title/1578700892 <nowiki>Ciscopress ISBN 1-57870-089-2</nowiki>]\n* {{cite book | author=Huitema, Christian | title=Routing in the Internet, Second Ed. | publisher=Prentice\u2013Hall | year=2000 | isbn=0-321-22735-2}}\n* {{cite book |author1=Kurose, James E.  |author2=Ross, Keith W.  |lastauthoramp=yes | title=Computer Networking, Third Ed. | publisher=Benjamin/Cummings | year=2004 | isbn=0-321-22735-2}}\n* {{cite book |author1=Medhi, Deepankar  |author2=Ramasamy, Karthikeyan  |lastauthoramp=yes | title=Network Routing: Algorithms, Protocols, and Architectures | publisher=Morgan Kaufmann | year=2007 | isbn=0-12-088588-3}}\n{{refend}}\n\n==External links==\n{{Wikiversity | Routing}}\n{{Commons category}}\n* [https://web.archive.org/web/20061209093728/http://wiki.uni.lu/secan-lab/Count-To-Infinity+Problem.html Count-To-Infinity Problem]\n* [http://wwwlehre.dhbw-stuttgart.de/~schulte/htme/55024.htm#HDR3 \"Stability Features\"] are ways of avoiding the \"count to infinity\" problem.\n* [https://web.archive.org/web/20070216114435/http://www.cisco.com/web/about/ciscoitatwork/case_studies/routing.html Cisco IT Case Studies] about Routing and Switching\n* [http://www.eventhelix.com/Realtimemantra/Networking/ip_routing.htm good example at event-helix]\n\n{{Routing protocols}}\n\n[[Category:Internet architecture]]\n[[Category:Routing| ]]"}]}}}}