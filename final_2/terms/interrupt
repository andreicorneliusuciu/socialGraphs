{"batchcomplete":"","query":{"normalized":[{"from":"interrupt","to":"Interrupt"}],"pages":{"15289":{"pageid":15289,"ns":0,"title":"Interrupt","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{About|computer interrupts|the study of the effect of disruptions on job performance|Interruption science|other uses|Interruption (disambiguation){{!}}Interruption}}\n{{More references|date=February 2014}}\n[[File:Interrupt Process.PNG|thumb|right|300px|interrupt sources and processor handling]]\n\nIn [[system programming]], an '''interrupt''' is a signal to the [[central processing unit|processor]] emitted by hardware or software indicating an event that needs immediate attention. An interrupt alerts the processor to a high-priority condition requiring the interruption of the current code the processor is executing.  The processor responds by suspending its current activities, saving its [[state (computer science)|state]], and executing a [[Function (programming)|function]] called an ''[[interrupt handler]]'' (or an interrupt service routine, ISR) to deal with the event.  This interruption is temporary, and, after the interrupt handler finishes, the processor resumes normal activities.<ref>{{cite web\n | url = https://lwn.net/images/pdf/LDD3/ch10.pdf\n | title = ''Linux Device Drivers'', Third Edition, Chapter 10. Interrupt Handling\n | year = 2005 | accessdate = December 25, 2014\n | author1 = Jonathan Corbet | author2 = Alessandro Rubini | author3 = Greg Kroah-Hartman\n | publisher = [[O'Reilly Media]] | format = PDF | page = 269\n | quote = Then it's just a matter of cleaning up, running software interrupts, and getting back to regular work.  The \"regular work\" may well have changed as a result of an interrupt (the handler could <code>wake_up</code> a process, for example), so the last thing that happens on return from an interrupt is a possible rescheduling of the processor.\n}}</ref>  There are two types of interrupts: hardware interrupts and software interrupts.\n\n'''Hardware interrupts''' are used by devices to communicate that they require attention from the [[operating system]].<ref>{{cite web|url=https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_MRG/1.3/html/Realtime_Reference_Guide/chap-Realtime_Reference_Guide-Hardware_interrupts.html |title=Hardware interrupts |date= |accessdate=2014-02-09}}</ref>  Internally, hardware interrupts are implemented using electronic alerting signals that are sent to the processor from an external device, which is either a part of the computer itself, such as a [[disk controller]], or an external [[peripheral]]. For example, pressing a key on the [[Keyboard (computing)|keyboard]] or moving the [[Mouse (computing)|mouse]] triggers hardware interrupts that cause the processor to read the keystroke or mouse position.  Unlike the software type (described below), hardware interrupts are [[asynchronous communication|asynchronous]] and can occur in the middle of instruction execution, requiring additional care in programming.  The act of initiating a hardware interrupt is referred to as an [[interrupt request]] (IRQ).\n\nA '''software interrupt''' is caused either by an exceptional condition in the processor itself, or a special [[instruction (computer science)|instruction]] in the [[instruction set]] which causes an interrupt when it is executed.  The former is often called a ''[[Trap (computing)|trap]]'' or ''[[exception handling|exception]]'' and is used for errors or events occurring during program execution that are exceptional enough that they cannot be handled within the program itself.  For example, a divide-by-zero exception will be thrown if the processor's [[arithmetic logic unit]] is commanded to divide a number by zero as this instruction is in error and impossible. The operating system will catch this exception, and can choose to abort the instruction. Software interrupt instructions can also function similarly to [[subroutine call]]s and be used for a variety of purposes, such as to request services from [[device driver]]s, like interrupts sent to and from a [[disk controller]] to request reading or writing of data to and from the disk.\n\nEach interrupt has its own interrupt handler.  The number of hardware interrupts is limited by the number of interrupt request (IRQ) lines to the processor, but there may be hundreds of different software interrupts.  Interrupts are a commonly used technique for [[computer multitasking]], especially in [[real-time computing]].  Such a system is said to be interrupt-driven.<ref>{{cite web|url=http://www.sltf.com/articles/pein/pein9505.htm |title=Basics of Interrupts |date= |accessdate=2010-11-11}}</ref>\n\n== Overview ==\nHardware interrupts were introduced as an optimization, eliminating unproductive waiting time in [[Polling (computer science)|polling loops]], waiting for external events. They may be implemented in hardware as a distinct system with control lines, or they may be integrated into the memory subsystem.\n\nIf implemented in hardware, an interrupt controller circuit such as the IBM PC's [[Programmable Interrupt Controller]] (PIC) may be connected between the interrupting device and the processor's interrupt pin to [[multiplexing|multiplex]] several sources of interrupt onto the one or two CPU lines typically available. If implemented as part of the [[memory controller]], interrupts are mapped into the system's memory [[address space]].<!-- Expand on how memory mapped interrupts work. e.g. PowerPC -->\n\nInterrupts can be categorized into these different types:\n* ''Maskable interrupt'' ([[Interrupt request|IRQ]]): a hardware interrupt that may be ignored by setting a bit in an [[interrupt mask register]]'s (IMR) bit-mask.\n* ''[[Non-maskable interrupt]]'' (NMI): a hardware interrupt that lacks an associated bit-mask, so that it can never be ignored.  NMIs are used for the highest priority tasks such as timers, especially [[watchdog timer]]s.\n* ''[[Inter-processor interrupt]]'' (IPI): a special case of interrupt that is generated by one processor to interrupt another processor in a [[multiprocessor]] system.\n* ''Software interrupt'': an interrupt generated within a processor by executing an instruction. Software interrupts are often used to implement [[system call]]s because they result in a subroutine call with a [[Ring (computer security)|CPU ring level]] change.\n* ''Spurious interrupt'': a hardware interrupt that is unwanted. They are typically generated by system conditions such as [[electrical interference]] on an interrupt line or through incorrectly designed hardware.\n\nProcessors typically have an internal ''interrupt mask'' which allows software to ignore all external hardware interrupts while it is set. Setting or clearing this mask may be faster than accessing an interrupt mask register (IMR) in a PIC or disabling interrupts in the device itself. In some cases, such as the [[x86]] architecture, disabling and enabling interrupts on the processor itself act as a [[memory barrier]]; however, it may actually be slower.\n\nAn interrupt that leaves the machine in a well-defined state is called a ''precise interrupt''. Such an interrupt has four properties:\n* [[Program counter|The Program Counter (PC)]] is saved in a known place.\n* All instructions before the one pointed to by the PC have fully executed.\n* No instruction beyond the one pointed to by the PC has been executed (that is no prohibition on instruction beyond that in PC, it is just that any changes they make to registers or memory must be undone before the interrupt happens).\n* The execution state of the instruction pointed to by the PC is known.\n\nAn interrupt that does not meet these requirements is called an ''imprecise interrupt''.\n\nThe phenomenon where the overall system performance is severely hindered by excessive amounts of processing time spent handling interrupts is called an [[interrupt storm]].\n\n== {{Anchor|MECHANISMS}}Types of interrupts ==\n\n=== Level-triggered ===\nA ''level-triggered interrupt'' is an interrupt signalled by maintaining the interrupt line at a high or low level. A device wishing to signal a Level-triggered interrupt drives the [[interrupt request]] line to its active level (high or low), and then holds it at that level until it is serviced.  It ceases asserting the line when the CPU commands it to or otherwise handles the condition that caused it to signal the interrupt.\n\nTypically, the processor samples the interrupt input at predefined times during each bus cycle such as state T2 for the [[Z80]] microprocessor. If the interrupt isn't active when the processor samples it, the CPU doesn't see it. One possible use for this type of interrupt is to minimize spurious signals from a noisy interrupt line: a spurious pulse will often be so short that it is not noticed.\n\nMultiple devices may share a level-triggered interrupt line if they are designed to.  The interrupt line must have a pull-down or [[pull-up resistor]] so that when not actively driven it settles to its inactive state.  Devices actively assert the line to indicate an outstanding interrupt, but let the line float (do not actively drive it) when not signalling an interrupt.  The line is then in its asserted state when any (one or more than one) of the sharing devices is signalling an outstanding interrupt.\n\nLevel-triggered interrupt is favored by some because it is easy to share the [[interrupt request]] line without losing the interrupts, when multiple shared devices interrupt at the same time.  Upon detecting assertion of the interrupt line, the CPU must search through the devices sharing the [[interrupt request]] line until one who triggered the interrupt is detected.  After servicing this device, the CPU may recheck the interrupt line status to determine whether any other devices also needs service.  If the line is now de-asserted, the CPU avoids checking the remaining devices on the line.  Since some devices interrupt more frequently than others, and other device interrupts are particularly expensive, a careful ordering of device checks is employed to increase efficiency. The original [[Peripheral Component Interconnect|PCI]] standard mandated level-triggered interrupts because of this advantage of sharing interrupts. \n\nThere are also serious problems with sharing level-triggered interrupts.  As long as any device on the line has an outstanding request for service the line remains asserted, so it is not possible to detect a change in the status of any other device.  Deferring servicing a low-priority device is not an option, because this would prevent detection of service requests from higher-priority devices.  If there is a device on the line that the CPU does not know how to service, then any interrupt from that device permanently blocks all interrupts from the other devices.\n\n===Edge-triggered===\nAn ''edge-triggered interrupt'' is an interrupt signalled by a [[signal edge|level transition]] on the interrupt line, either a falling edge (high to low) or  a rising edge (low to high). A device, wishing to signal an interrupt, drives a pulse onto the line and then releases the line to its inactive state. If the pulse is too short to be detected by [[polled I/O]] then special hardware may be required to detect the edge.\n\nMultiple devices may share an edge-triggered interrupt line if they are designed to.  The interrupt line must have a pull-down or pull-up resistor so that when not actively driven it settles to one particular state. Devices signal an interrupt by briefly driving the line to its non-default state, and let the line float (do not actively drive it) when not signalling an interrupt. This type of connection is also referred to as [[open collector]]. The line then carries all the pulses generated by all the devices. (This is analogous to the [[pull cord]] on some buses and trolleys that any passenger can pull to signal the driver that they are requesting a stop.) However, interrupt pulses from different devices may merge if they occur close in time. To avoid losing interrupts the CPU must trigger on the trailing edge of the pulse (e.g. the rising edge if the line is pulled up and driven low).  After detecting an interrupt the CPU must check all the devices for service requirements.\n\nEdge-triggered interrupts do not suffer the problems that level-triggered interrupts have with sharing.  Service of a low-priority device can be postponed arbitrarily, and interrupts will continue to be received from the high-priority devices that are being serviced. If there is a device that the CPU does not know how to service, it may cause a spurious interrupt, or even periodic spurious interrupts, but it does not interfere with the interrupt signalling of the other devices. However, it is fairly easy for an edge triggered interrupt to be missed - for example if interrupts have to be masked for a period - and unless there is some type of hardware latch that records the event it is impossible to recover. Such problems caused many \"lockups\" in early computer hardware because the processor did not know it was expected to do something. More modern hardware often has one or more interrupt status registers that latch the interrupt requests; well written edge-driven interrupt software often checks such registers to ensure events are not missed.\n\nThe elderly [[Industry Standard Architecture]] (ISA) bus uses edge-triggered interrupts, but does not mandate that devices be able to share them. The [[parallel port]] also uses edge-triggered interrupts. Many older devices assume that they have exclusive use of their interrupt line, making it electrically unsafe to share them. However, ISA motherboards include pull-up resistors on the IRQ lines, so well-behaved devices share ISA interrupts just fine.\n\n===Hybrid===\nSome systems use a hybrid of level-triggered and edge-triggered signalling. The hardware not only looks for an edge, but it also verifies that the interrupt signal stays active for a certain period of time.\n\nA common use of a hybrid interrupt is for the NMI (non-maskable interrupt) input. Because NMIs generally signal major \u2013 or even catastrophic \u2013 system events, a good implementation of this signal tries to ensure that the interrupt is valid by verifying that it remains active for a period of time. This 2-step approach helps to eliminate false interrupts from affecting the system.\n\n===Message-signaled===<!-- This section is linked from [[Interrupt]] -->\n{{main|Message Signaled Interrupts}}\n\nA ''message-signalled interrupt'' does not use a physical interrupt line.  Instead, a device signals its request for service by sending a short message over some communications medium, typically a [[computer bus]]. The message might be of a type reserved for interrupts, or it might be of some pre-existing type such as a memory write.\n\nMessage-signalled interrupts behave very much like edge-triggered interrupts, in that the interrupt is a momentary signal rather than a continuous condition.  Interrupt-handling software treats the two in much the same manner. Typically, multiple pending message-signalled interrupts with the same message (the same virtual interrupt line) are allowed to merge, just as closely spaced edge-triggered interrupts can merge.\n\nMessage-signalled [[interrupt vector]]s can be shared, to the extent that the underlying communication medium can be shared. No additional effort is required.\n\nBecause the identity of the interrupt is indicated by a pattern of data bits, not requiring a separate physical conductor, many more distinct interrupts can be efficiently handled.  This reduces the need for sharing. Interrupt messages can also be passed over a serial bus, not requiring any additional lines.\n\n[[PCI Express]], a serial computer bus, uses [[Message Signaled Interrupts|message-signalled interrupts]] exclusively.\n\n===Doorbell===\nIn a [[push button]] analogy applied to [[computer systems]], the term ''doorbell'' or ''doorbell interrupt'' is often used to describe a mechanism whereby a [[software]] system can signal or notify a [[computer hardware]] device that there is some work to be done.  Typically, the software system will place data in some well-known and mutually agreed upon memory location(s), and \"ring the doorbell\" by writing to a different memory location.  This different memory location is often called the doorbell region, and there may even be multiple doorbells serving different purposes in this region. It is this act of writing to the doorbell region of memory that \"rings the bell\" and notifies the hardware device that the data are ready and waiting.  The hardware device would now know that the data are valid and can be acted upon.  It would typically write the data to a  [[hard disk drive]], or send them over a [[Computer network|network]], or [[encrypt]] them, etc. \n\nThe term ''doorbell interrupt'' is usually  a [[misnomer]].  It's similar to an interrupt, because it causes some work to be done by the device; however, the doorbell region is sometimes implemented as a [[Polling (computer science)|polled]] region, sometimes the doorbell region writes through to physical device [[Hardware register|registers]], and sometimes the doorbell region is hardwired directly to physical device registers. When either writing through or directly to physical device registers, this may cause a real interrupt to occur at the device's central processor unit ([[CPU]]), if it has one.\n\nDoorbell interrupts can be compared to [[Message Signaled Interrupts]], as they have some similarities.\n\n==Difficulty with sharing interrupt lines==\nMultiple devices sharing an interrupt line (of any triggering style) all act as spurious interrupt sources with respect to each other.  With many devices on one line the workload in servicing interrupts grows in proportion to the square of the number of devices.  It is therefore preferred to spread devices evenly across the available interrupt lines.  Shortage of interrupt lines is a problem in older system designs where the interrupt lines are distinct physical conductors.  Message-signalled interrupts, where the interrupt line is virtual, are favored in new system architectures (such as [[PCI Express]]) and relieve this problem to a considerable extent.\n\nSome devices with a poorly designed programming interface provide no way to determine whether they have requested service. They may lock up or otherwise misbehave if serviced when they do not want it.  Such devices cannot tolerate spurious interrupts, and so also cannot tolerate sharing an interrupt line. [[Industry Standard Architecture|ISA]] cards, due to often cheap design and construction, are notorious for this problem.  Such devices are becoming much rarer, as [[hardware logic]] becomes cheaper and new system architectures mandate shareable interrupts.\n\n== {{Anchor|AFFINITY|RPS|RFS}}Performance issues ==\nInterrupts provide low overhead and good [[Interrupt latency|latency]] at low load, but degrade significantly at high interrupt rate unless care is taken to prevent several pathologies. These are various forms of [[livelock]]s, when the system spends all of its time processing interrupts to the exclusion of other required tasks. Under extreme conditions, a large number of interrupts (like very high network traffic) may completely stall the system. To avoid such problems, an [[operating system]] must schedule network interrupt handling as carefully as it schedules process execution.<ref>{{cite web|url=http://portal.acm.org/citation.cfm?id=263335 |title=Eliminating receive livelock in an interrupt-driven kernel |doi=10.1145/263326.263335 |date= |accessdate=2010-11-11}}</ref>\n\nWith multi-core processors, additional performance improvements in interrupt handling can be achieved through [[receive-side scaling]] (RSS) when [[multiqueue NIC]]s are used.  Such NICs provide multiple receive [[Queue (abstract data type)|queues]] associated to separate interrupts; by routing each of those interrupts to different cores, processing of the interrupt requests triggered by the network traffic received by a single NIC can be distributed among multiple cores.  Distribution of the interrupts among cores can be performed automatically by the operating system, or the routing of interrupts (usually referred to as ''IRQ affinity'') can be manually configured.<ref name=\"linux-net-scaling\">{{cite web\n | url = https://www.kernel.org/doc/Documentation/networking/scaling.txt\n | title = Documentation/networking/scaling.txt\n | work = Linux kernel documentation\n | date = May 9, 2014 | accessdate = November 16, 2014\n | author1 = Tom Herbert | author2 = Willem de Bruijn\n | publisher = [[kernel.org]]\n}}</ref><ref>{{cite web\n | url = http://www.intel.com/content/dam/doc/datasheet/82574l-gbe-controller-datasheet.pdf\n | title = Intel 82574 Gigabit Ethernet Controller Family Datasheet\n | date = June 2014 | accessdate = November 16, 2014\n | publisher = [[Intel]] | format = PDF\n | page = 1\n}}</ref>\n\nA purely software-based implementation of the receiving traffic distribution, known as ''receive packet steering'' (RPS), distributes received traffic among cores later in the data path, as part of the [[interrupt handler]] functionality.  Advantages of RPS over RSS include no requirements for specific hardware, more advanced traffic distribution filters, and reduced rate of interrupts produced by a NIC.  As a downside, RPS increases the rate of [[inter-processor interrupt]]s (IPIs).  ''Receive flow steering'' (RFS) takes the software-based approach further by accounting for [[application locality]]; further performance improvements are achieved by processing interrupt requests by the same cores on which particular network packets will be consumed by the targeted application.<ref name=\"linux-net-scaling\" /><ref>{{cite web\n | url = https://lwn.net/Articles/362339/\n | title = Receive packet steering\n | date = November 17, 2009 | accessdate = November 16, 2014\n | author = Jonathan Corbet | publisher = [[LWN.net]]\n}}</ref><ref>{{cite web\n | url = https://lwn.net/Articles/382428/\n | title = Receive flow steering\n | date = April 7, 2010 | accessdate = November 16, 2014\n | author = Jake Edge | publisher = [[LWN.net]]\n}}</ref>\n\n== Typical uses ==\nTypical uses of interrupts include the following: system timers, disk I/O, power-off signals, and [[Exception handling|traps]]. Other interrupts exist to transfer data bytes using [[UART]]s or [[Ethernet]]; sense key-presses; control motors; or anything else the equipment must do.\n\nAnother typical use is to generate periodic interrupts by dividing the output of a crystal oscillator and having an interrupt handler count the interrupts in order for a processor to keep time. These periodic interrupts are often used by the OS's task [[Scheduling (computing)|scheduler]] to reschedule the priorities of running [[process (computing)|processes]]. Some older computers generated periodic interrupts from the [[power line frequency]] because it was controlled by the utilities to eliminate long-term drift of electric clocks.\n\nFor example, a disk interrupt signals the completion of a data transfer from or to the disk peripheral; a process waiting to read or write a file starts up again.  As another example, a power-off interrupt predicts or requests a loss of power, allowing the computer equipment to perform an orderly shut-down.  Also, interrupts are used in [[typeahead]] features for buffering events like [[keystrokes]].\n\n== See also ==\n{{Portal|Computing|Electronics}}\n\n{{Div col||25em}}\n* [[Advanced Programmable Interrupt Controller]] (APIC)\n* [[BIOS interrupt call]]\n* [[Event-driven programming]]\n* [[Exception handling]]\n* [[INT (x86 instruction)]]\n* [[Interrupt coalescing]]\n* [[Interrupt handler]]\n* [[Interrupt latency]]\n* [[Interrupts in 65xx processors]]\n* [[Ralf Brown's Interrupt List]]\n* [[IBM System/360 architecture#Interruption system|Interrupts on IBM System/360 architecture]]\n* [[Time-triggered system]]\n{{Div col end}}\n\n== References ==\n{{Reflist|40em}}\n\n== External links ==\n{{Wiktionary|interrupt|interruption}}\n\n*[http://www.atarimagazines.com/compute/issue149/60_Interrupts_made_easy.php Interrupts Made Easy]\n*[http://www.microautomate.com/PIC/pic-interrupts.php Interrupts for Microchip PIC Microcontroller]\n*[http://stanislavs.org/helppc/int_table.html IBM PC Interrupt Table]\n*[https://web.archive.org/web/20120313195304/http://ugweb.cs.ualberta.ca/~c296/Arduino-UofA/ConcreteComputing/section/interrupts.htm University of Alberta CMPUT 296 Concrete Computing Notes on Interrupts], archived from the original on March 13, 2012\n\n{{Operating system|state=collapsed}}\n{{Authority control}}\n\n[[Category:Interrupts| ]]"}]}}}}