{"batchcomplete":"","query":{"normalized":[{"from":"Error_detection_and_correction","to":"Error detection and correction"}],"pages":{"10375":{"pageid":10375,"ns":0,"title":"Error detection and correction","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{distinguish|error handling}}\n{{Refimprove|article|date=August 2008}}\nNotes By Deepak\nIn [[information theory]] and [[coding theory]] with applications in [[computer science]] and [[telecommunication]], '''error detection and correction''' or '''error control''' are techniques that enable reliable delivery of [[digital data]] over unreliable [[communication channel]]s. Many communication channels are subject to [[noise (electronics)|channel noise]],<!--really need an article on [[channel noise]]--> and thus errors may be introduced during transmission from the source to a receiver. Error detection techniques allow detecting such errors, while error correction enables reconstruction of the original data in many cases.\n\n== Definitions ==\nThe general definitions of the terms are as follows:\n* ''Error detection '' is the detection of errors caused by noise or other impairments during transmission from the transmitter to the receiver.\n* ''Error correction'' is the detection of errors and reconstruction of the original, error-free data.\n\n== History ==\n\nThe modern development of error-correcting codes in 1947 is due to [[Richard W. Hamming]].<ref name=Thompson>{{citation|first=Thomas M.|last=Thompson|title=From Error-Correcting Codes through Sphere Packings to Simple Groups|publisher=The Mathematical Association of America|year=1983|series=The Carus Mathematical Monographs (#21)|isbn=0-88385-023-0|page=vii}}</ref> A description of Hamming's code appeared in [[Claude Shannon]]'s ''A Mathematical Theory of Communication''<ref>{{citation|first=C.E.|last=Shannon|title=A Mathematical Theory of Communication|journal=Bell System Tech. Journal|volume=27|year=1948|location= p. 418}}</ref> and was quickly generalized by [[Marcel J. E. Golay]].<ref>{{citation|first=Marcel J. E.|last=Golay|title=Notes on Digital Coding|journal=Proc.I.R.E. (I.E.E.E.)|volume=37|year=1949|location= p. 657}}</ref>\n\n== Introduction ==\nThe general idea for achieving error detection and correction is to add some [[Redundancy (information theory)|redundancy]] (i.e., some extra data) to a message, which receivers can use to check consistency of the delivered message, and to recover data determined to be corrupted. Error-detection and correction schemes can be either [[systematic code|systematic]] or non-systematic: In a systematic scheme, the transmitter sends the original data, and attaches a fixed number of ''check bits'' (or ''parity data''), which are derived from the data bits by some [[deterministic algorithm]]. If only error detection is required, a receiver can simply apply the same algorithm to the received data bits and compare its output with the received check bits; if the values do not match, an error has occurred at some point during the transmission. In a system that uses a non-systematic code, the original message is transformed into an encoded message that has at least as many bits as the original message.\n\nGood error control performance requires the scheme to be selected based on the characteristics of the communication channel. Common [[channel model]]s include memory-less models where errors occur randomly and with a certain probability, and dynamic models where errors occur primarily in [[burst error|bursts]]. Consequently, error-detecting and correcting codes can be generally distinguished between ''random-error-detecting/correcting'' and ''burst-error-detecting/correcting''. Some codes can also be suitable for a mixture of random errors and burst errors.\n\nIf the [[channel capacity]] cannot be determined, or is highly variable, an error-detection scheme may be combined with a system for retransmissions of erroneous data. This is known as [[#Automatic repeat request|automatic repeat request]] (ARQ), and is most notably used in the Internet. An alternate approach for error control is [[#Hybrid schemes|hybrid automatic repeat request]] (HARQ), which is a combination of ARQ and error-correction coding.\n\n== Implementation ==\nError correction may generally be realized in two different ways:\n* ''[[Automatic repeat request]] (ARQ)'' (sometimes also referred to as ''backward error correction''): This is an error control technique whereby an error detection scheme is combined with requests for retransmission of erroneous data. Every block of data received is checked using the error detection code used, and if the check fails, retransmission of the data is requested \u2013 this may be done repeatedly, until the data can be verified.\n* ''[[Forward error correction]] (FEC)'': The sender encodes the data using an ''error-correcting code (ECC)'' prior to transmission. The additional information ([[redundancy (information theory)|redundancy]]) added by the code is used by the receiver to recover the original data. In general, the reconstructed data is what is deemed the \"most likely\" original data.\n\nARQ and FEC may be combined, such that minor errors are corrected without retransmission, and major errors are corrected via a request for retransmission: this is called ''[[hybrid automatic repeat-request]] (HARQ)''.\n\n== Error detection schemes ==\nError detection is most commonly realized using a suitable [[hash function]] (or [[checksum]] algorithm). A hash function adds a fixed-length ''tag'' to a message, which enables receivers to verify the delivered message by recomputing the tag and comparing it with the one provided.\n\nThere exists a vast variety of different hash function designs. However, some are of particularly widespread use because of either their simplicity or their suitability for detecting certain kinds of errors (e.g., the [[cyclic redundancy check]]'s performance in detecting [[burst error]]s).\n\nA random-[[Forward error correction|error-correcting code]] based on [[Maximum likelihood decoding#Minimum distance decoding|minimum distance]] coding can provide a strict guarantee on the number of detectable errors, but it may not protect against a [[preimage attack]]. A repetition code, described in the section below, is a special case of error-correcting code: although rather inefficient, a repetition code is suitable in some applications of error correction and detection due to its simplicity.\n\n=== Repetition codes ===\n{{Main|Repetition code}}\nA ''repetition code'' is a coding scheme that repeats the bits across a channel to achieve error-free communication. Given a stream of data to be transmitted, the data are divided into blocks of bits. Each block is transmitted some predetermined number of times. For example, to send the bit pattern \"1011\", the four-bit block can be repeated three times, thus producing \"1011 1011 1011\". However, if this twelve-bit pattern was received as \"1010 1011 1011\" \u2013 where the first block is unlike the other two \u2013 it can be determined that an error has occurred.\n\nA repetition code is very inefficient, and can be susceptible to problems if the error occurs in exactly the same place for each group (e.g., \"1010 1010 1010\" in the previous example would be detected as correct). The advantage of repetition codes is that they are extremely simple, and are in fact used in some transmissions of [[numbers station]]s.<ref>{{cite web\n|url=http://www.cisquet.nl/numbers.htm\n|title=Numbers (and other mysterious) stations\n|author=Frank van Gerwen\n|accessdate={{date|2012-03-12}}}}</ref><ref>{{cite web\n|url=http://www.gizmodo.com.au/2010/08/mysterious-russian-numbers-station-changes-broadcast-after-20-years/\n|publisher=''Gizmodo''\n|accessdate={{date|2012-03-12}}\n|date={{date|2010-08-25}}\n|author=Gary Cutlack\n|title=Mysterious Russian \u2018Numbers Station\u2019 Changes Broadcast After 20 Years\n}}</ref>\n\n=== Parity bits ===\n{{Main|Parity bit}}\nA ''parity bit'' is a bit that is added to a group of source bits to ensure that the number of set bits (i.e., bits with value 1) in the outcome is even or odd. It is a very simple scheme that can be used to detect single or any other odd number (i.e., three, five, etc.) of errors in the output. An even number of flipped bits will make the parity bit appear correct even though the data is erroneous.\n\nExtensions and variations on the parity bit mechanism are [[horizontal redundancy check]]s, [[vertical redundancy check]]s, and \"double,\" \"dual,\" or \"diagonal\" parity (used in [[Non-standard RAID levels#RAID-DP|RAID-DP]]).\n\n=== Checksums ===\n{{Main|Checksum}}\nA ''checksum'' of a message is a [[modular arithmetic]] sum of message code words of a fixed word length (e.g., byte values). The sum may be negated by means of a [[Ones' complement|ones'-complement]] operation prior to transmission to detect errors resulting in all-zero messages.\n\nChecksum schemes include [[parity bit]]s, [[check digit]]s, and [[longitudinal redundancy check]]s. Some checksum schemes, such as the [[Damm algorithm]], the [[Luhn algorithm]], and the [[Verhoeff algorithm]], are specifically designed to detect errors commonly introduced by humans in writing down or remembering identification numbers.\n\n=== Cyclic redundancy checks (CRCs) ===\n{{Main|Cyclic redundancy check}}\nA ''cyclic redundancy check (CRC)'' is a non-secure [[hash function]] designed to detect accidental changes to digital data in computer networks; as a result, it is not suitable for detecting maliciously introduced errors. It is characterized by specification of what is called a ''generator polynomial'', which is used as the [[divisor]] in a [[polynomial long division]] over a [[finite field]], taking the input data as the [[dividend]], such that the [[remainder]] becomes the result.\n\nA cyclic code has favorable properties that make it well suited for detecting [[burst error]]s. CRCs are particularly easy to implement in hardware, and are therefore commonly used in digital [[computer network|networks]] and storage devices such as [[hard disk drives]].\n\nEven parity is a special case of a cyclic redundancy check, where the single-bit CRC is generated by the divisor ''x'' + 1.\n\n=== Cryptographic hash functions ===\n{{Main|Cryptographic hash function}}\nThe output of a ''cryptographic hash function'', also known as a ''message digest'', can provide strong assurances about [[data integrity]], whether changes of the data are accidental (e.g., due to transmission errors) or maliciously introduced. Any modification to the data will likely be detected through a mismatching hash value. Furthermore, given some hash value, it is infeasible to find some input data (other than the one given) that will yield the same hash value.  If an attacker can change not only the message but also the hash value, then a ''keyed hash'' or [[message authentication code]] (MAC) can be used for additional security.  Without knowing the key, it is infeasible for the attacker to calculate the correct keyed hash value for a modified message.\n\n=== Error-correcting codes ===\n{{Main|Forward error correction}}\nAny error-correcting code can be used for error detection. A code with ''minimum [[Hamming distance]]'', ''d'', can detect up to ''d'' \u2212 1 errors in a code word. Using minimum-distance-based error-correcting codes for error detection can be suitable if a strict limit on the minimum number of errors to be detected is desired.\n\nCodes with minimum Hamming distance ''d'' = 2 are degenerate cases of error-correcting codes, and can be used to detect single errors. The [[parity bit]] is an example of a single-error-detecting code.\n\n== Error correction ==\n\n=== Automatic repeat request (ARQ) ===\n{{Main|Automatic repeat request}}\nNotes By Deepak\n[[Automatic repeat request|Automatic Repeat reQuest]] (ARQ) is an error control method for data transmission that makes use of error-detection codes, acknowledgment and/or negative acknowledgment messages, and [[Timeout (computing)|timeouts]] to achieve reliable data transmission. An ''acknowledgment'' is a message sent by the receiver to indicate that it has correctly received a [[Frame (networking)|data frame]].\n\nUsually, when the transmitter does not receive the acknowledgment before the timeout occurs (i.e., within a reasonable amount of time after sending the data frame), it retransmits the frame until it is either correctly received or the error persists beyond a predetermined number of retransmissions.\n\nThree types of ARQ protocols are [[Stop-and-wait ARQ]], [[Go-Back-N ARQ]], and [[Selective Repeat ARQ]].\n\nARQ is appropriate if the communication channel has varying or unknown [[channel capacity|capacity]], such as is the case on the Internet. However, ARQ requires the availability of a [[Backward channel|back channel]], results in possibly increased [[Latency (engineering)|latency]] due to retransmissions, and requires the maintenance of buffers and timers for retransmissions, which in the case of [[network congestion]] can put a strain on the server and overall network capacity.<ref name=\"reliable-erasure-code\">A. J. McAuley, ''Reliable Broadband Communication Using a Burst Erasure Correcting Code'', ACM SIGCOMM, 1990.</ref>\n\nFor example, ARQ is used on shortwave radio data links in the form of [[ARQ-E]], or combined with multiplexing as [[ARQ-M]].\n\n=== Error-correcting code ===\nAn [[error-correcting code]] (ECC) or forward error correction (FEC) code is a process of adding [[redundancy (information theory)|redundant]] data, or ''parity data'', to a message, such that it can be recovered by a receiver even when a number of errors (up to the capability of the code being used) were introduced, either during the process of transmission, or on storage. Since the receiver does not have to ask the sender for retransmission of the data, a [[backchannel]] is not required in forward error correction, and it is therefore suitable for [[simplex communication]] such as [[broadcasting]].  Error-correcting codes are frequently used in [[OSI model|lower-layer]] communication, as well as for reliable storage in media such as [[Compact Disc|CDs]], [[DVD]]s, [[hard disk]]s, and [[random access memory|RAM]].\n\nError-correcting codes are usually distinguished between [[convolutional code]]s and [[block code]]s:\n* ''Convolutional codes'' are processed on a bit-by-bit basis. They are particularly suitable for implementation in hardware, and the [[Viterbi decoder]] allows [[maximum likelihood decoding|optimal decoding]].\n* ''Block codes'' are processed on a [[Block (telecommunications)|block-by-block]] basis. Early examples of block codes are [[repetition code]]s, [[Hamming code]]s and [[multidimensional parity-check code]]s. They were followed by a number of efficient codes, [[Reed\u2013Solomon code]]s being the most notable due to their current widespread use. [[Turbo code]]s and [[low-density parity-check code]]s (LDPC) are relatively new constructions that can provide almost [[:Category:Capacity-approaching codes|optimal efficiency]].\n\n[[Shannon's theorem]] is an important theorem in forward error correction, and describes the maximum [[information rate]] at which reliable communication is possible over a channel that has a certain error probability or [[signal-to-noise ratio]] (SNR). This strict upper limit is expressed in terms of the [[channel capacity]]. More specifically, the theorem says that there exist codes such that with increasing encoding length the probability of error on a [[channel model|discrete memoryless channel]] can be made arbitrarily small, provided that the [[code rate]] is smaller than the channel capacity. The code rate is defined as the fraction ''k/n'' of ''k'' source symbols and ''n'' encoded symbols.\n\nThe actual maximum code rate allowed depends on the error-correcting code used, and may be lower. This is because Shannon's proof was only of existential nature, and did not show how to construct codes which are both optimal and have [[polynomial time|efficient]] encoding and decoding algorithms.\n\n=== Hybrid schemes ===\n{{Main|Hybrid ARQ}}\n[[Hybrid ARQ]] is a combination of ARQ and forward error correction. There are two basic approaches:<ref name=\"reliable-erasure-code\" />\n* Messages are always transmitted with FEC parity data (and error-detection redundancy). A receiver decodes a message using the parity information, and requests retransmission using ARQ only if the parity data was not sufficient for successful decoding (identified through a failed integrity check).\n* Messages are transmitted without parity data (only with error-detection information). If a receiver detects an error, it requests FEC information from the transmitter using ARQ, and uses it to reconstruct the original message.\n\nThe latter approach is particularly attractive on an [[Binary erasure channel|erasure channel]] when using a [[Fountain code|rateless erasure code]].\n\n== Applications ==\nApplications that require low latency (such as telephone conversations) cannot use [[Automatic repeat request|Automatic Repeat reQuest]] (ARQ); they must use [[forward error correction]] (FEC). By the time an [[Automatic repeat request|ARQ]] system discovers an error and re-transmits it, the re-sent data will arrive too late to be any good.\n\nApplications where the transmitter immediately forgets the information as soon as it is sent (such as most television cameras) cannot use [[Automatic repeat request|ARQ]]; they must use [[Forward error correction|FEC]] because when an error occurs, the original data is no longer available. (This is also why [[Forward error correction|FEC]] is used in data storage systems such as [[RAID]] and [[distributed data store]]).\n\nApplications that use ARQ must have a [[return channel]]; applications having no return channel cannot use ARQ.  Applications that require extremely low error rates (such as digital money transfers) must use [[Automatic repeat request|ARQ]].  Reliability and inspection engineering also make use of the theory of error-correcting codes.<ref>{{cite journal\n|url= http://www.eng.tau.ac.il/~bengal/SCI_paper.pdf\n|title=Self-correcting inspection procedure under inspection errors\n|author1=Ben-Gal I. |author2=Herer Y. |author3=Raz T. |publisher=IIE Transactions on Quality and Reliability, 34(6), pp. 529-540.\n|year=2003|format=PDF\n}}</ref>\n\n=== Internet ===\nIn a typical [[TCP/IP]] stack, error control is performed at multiple levels:\n* Each [[Ethernet]] [[Data frame|frame]] carries a [[Cyclic redundancy check|CRC-32]] [[checksum]]. Frames received with incorrect checksums are discarded by the receiver hardware.\n* The [[IPv4]] header contains a checksum protecting the contents of the header. [[Packet (information technology)|Packets]] with mismatching checksums are dropped within the network or at the receiver.\n* The checksum was omitted from the [[IPv6]] header in order to minimize processing costs in [[network routing]] and because current [[link layer]] technology is assumed to provide sufficient error detection (see also RFC 3819).\n* [[User Datagram Protocol|UDP]] has an optional checksum covering the payload and addressing information from the UDP and IP headers. Packets with incorrect checksums are discarded by the [[operating system]] [[network stack]]. The checksum is optional under IPv4, only, because the Data-Link layer checksum may already provide the desired level of error protection.\n* [[Transmission Control Protocol|TCP]] provides a checksum for protecting the payload and addressing information from the TCP and IP headers. Packets with incorrect checksums are discarded within the network stack, and eventually get retransmitted using ARQ, either explicitly (such as through [[triple-ack]]) or implicitly due to a [[timeout (computing)|timeout]].\n\n=== Deep-space telecommunications ===\nDevelopment of error-correction codes was tightly coupled with the history of deep-space missions due to the extreme dilution of signal power over interplanetary distances, and the limited power availability aboard space probes. Whereas early missions sent their data uncoded, starting from 1968 digital error correction was implemented in the form of (sub-optimally decoded) [[convolutional code]]s and [[Reed\u2013Muller code]]s.<ref name=\"deep-space-codes\">K. Andrews et al., ''The Development of Turbo and LDPC Codes for Deep-Space Applications'', Proceedings of the IEEE, Vol. 95, No. 11, Nov. 2007.</ref> The Reed\u2013Muller code was well suited to the noise the spacecraft was subject to (approximately matching a [[Gaussian function|bell curve]]), and was implemented at the Mariner spacecraft for missions between 1969 and 1977.\n\nThe [[Voyager 1]] and [[Voyager 2]] missions, which started in 1977, were designed to deliver color imaging amongst scientific information of [[Jupiter]] and [[Saturn]].<ref name=\"voyager\">{{cite book |first1=William Cary |last1=Huffman |first2=Vera S. |last2=Pless |author-link2=Vera Pless |title=Fundamentals of Error-Correcting Codes |publisher=[[Cambridge University Press]] |year=2003 |isbn=978-0-521-78280-7}}</ref> This resulted in increased coding requirements, and thus the spacecraft were supported by (optimally [[Viterbi decoder|Viterbi-decoded]]) convolutional codes that could be [[concatenated code|concatenated]] with an outer [[Binary Golay code|Golay (24,12,8) code]].\n\nThe Voyager 2 craft additionally supported an implementation of a [[Reed\u2013Solomon code]]: the concatenated Reed\u2013Solomon\u2013Viterbi (RSV) code allowed for very powerful error correction, and enabled the spacecraft's extended journey to [[Uranus]] and [[Neptune]]. Both craft use V2 RSV coding due to ECC system upgrades after 1989.\n\nThe [[CCSDS]] currently recommends usage of error correction codes with performance similar to the Voyager 2 RSV code as a minimum. Concatenated codes are increasingly falling out of favor with space missions, and are replaced by more powerful codes such as [[Turbo code]]s or [[LDPC code]]s.\n\nThe different kinds of deep space and orbital missions that are conducted suggest that trying to find a \"one size fits all\" error correction system will be an ongoing problem for some time to come. For missions close to Earth the nature of the [[Channel (communications)|channel]] [[Noise (electronics)|noise]] is different from that which a spacecraft on an interplanetary mission experiences. Additionally, as a spacecraft increases its distance from Earth, the problem of correcting for noise gets larger.\n\n=== Satellite broadcasting (DVB) ===\nThe demand for satellite [[transponder]] bandwidth continues to grow, fueled by the desire to deliver television (including new channels and [[High Definition TV]]) and IP data. Transponder availability and bandwidth constraints have limited this growth, because transponder capacity is determined by the selected [[modulation]] scheme and [[Forward error correction]] (FEC) rate.\n\nOverview\n* [[QPSK]] coupled with traditional Reed Solomon and Viterbi codes have been used for nearly 20 years for the delivery of digital satellite TV.\n* Higher order modulation schemes such as [[8PSK]], [[Quadrature amplitude modulation|16QAM]] and [[32QAM]] have enabled the satellite industry to increase transponder efficiency by several orders of magnitude.\n* This increase in the information rate in a transponder comes at the expense of an increase in the carrier power to meet the threshold requirement for existing antennas.\n* Tests conducted using the latest chipsets demonstrate that the performance achieved by using Turbo Codes may be even lower than the 0.8 [[Decibel|dB]] figure assumed in early designs.\n\n=== Data storage ===\n\nError detection and correction codes are often used to improve the reliability of data storage media.{{citation needed|date=January 2012}}  A \"parity track\" was present on the first [[magnetic tape data storage]] in 1951. The \"Optimal Rectangular Code\" used in [[group code recording]] tapes not only detects but also corrects single-bit errors.  Some [[file format]]s, particularly [[archive formats]], include a checksum (most often [[CRC32]]) to detect corruption and truncation and can employ redundancy and/or [[parity file]]s to recover portions of corrupted data.  [[Cross-interleaved Reed\u2013Solomon coding|Reed Solomon codes]] are used in [[compact disc]]s to correct errors caused by scratches.\n\nModern hard drives use CRC codes to detect and Reed\u2013Solomon codes to correct minor errors in sector reads, and to recover data from sectors that have \"gone bad\" and store that data in the spare sectors.<ref>[http://web.archive.org/web/20080202143103/http://www.myharddrivedied.com/presentations_whitepaper.html My Hard Drive Died]. Scott A. Moulton</ref>  [[RAID]] systems use a variety of error correction techniques to correct errors when a hard drive completely fails.  Filesystems such as [[ZFS]] or [[Btrfs]], as well as some [[RAID]] implementations, support [[data scrubbing]] and resilvering, which allows bad blocks to be detected and (hopefully) recovered before they are used.  The recovered data may be re-written to exactly the same physical location, to spare blocks elsewhere on the same piece of hardware, or to replacement hardware.\n\n=== {{Anchor|LINUX-EDAC|BLUESMOKE}}Error-correcting memory ===\n{{Main|ECC memory}}\n\n[[Dynamic random access memory|DRAM]] memory may provide increased protection against [[soft error]]s by relying on error correcting codes. Such [[Dynamic random access memory#Errors and error correction|error-correcting memory]], known as ''ECC'' or ''EDAC-protected'' memory, is particularly desirable for high fault-tolerant applications, such as servers, as well as deep-space applications due to increased [[cosmic ray|radiation]].\n\nError-correcting memory controllers traditionally use [[Hamming code]]s, although some use [[triple modular redundancy]].\n\n[[Forward error correction#Interleaving|Interleaving]] allows distributing the effect of a single cosmic ray potentially upsetting multiple physically neighboring bits across multiple words by associating neighboring bits to different words. As long as a [[single event upset]] (SEU) does not exceed the error threshold (e.g., a single error) in any particular word between accesses, it can be corrected (e.g., by a single-bit error correcting code), and the illusion of an error-free memory system may be maintained.<ref>{{cite web\n|title=Using StrongArm SA-1110 in the On-Board Computer of Nanosatellite\n|publisher=Tsinghua Space Center, [[Tsinghua University]], Beijing |accessdate=2009-02-16\n|url=http://www.apmcsta.org/File/doc/Conferences/6th%20meeting/Chen%20Zhenyu.doc}}\n<!-- I wish I had a better reference --></ref>\n\nIn addition to hardware providing features required for ECC memory to operate, [[operating system]]s usually contain related reporting facilities that are used to provide notifications when soft errors are transparently recovered.  An increasing rate of soft errors might indicate that a [[DIMM]] module needs replacing, and such feedback information would not be easily available without the related reporting capabilities.  An example is the [[Linux kernel]]'s ''EDAC'' subsystem (previously known as ''bluesmoke''), which collects the data from error-checking-enabled components inside a computer system; beside collecting and reporting back the events related to ECC memory, it also supports other checksumming errors, including those detected on the [[Conventional PCI|PCI bus]].<ref>{{cite web\n | url = http://www.admin-magazine.com/Articles/Monitoring-Memory-Errors\n | title = Error Detection and Correction\n | accessdate = 2014-08-12\n | author = Jeff Layton | publisher = ''[[Linux Magazine]]''\n}}</ref><ref>{{cite web\n | url = http://bluesmoke.sourceforge.net/\n | title = EDAC Project\n | accessdate = 2014-08-12\n | website = bluesmoke.sourceforge.net\n}}</ref><ref>{{cite web\n | url = https://www.kernel.org/doc/Documentation/edac.txt\n | title = Documentation/edac.txt | work = Linux kernel documentation\n | date = 2014-06-16 | accessdate = 2014-08-12\n | publisher = [[kernel.org]]\n}}</ref>\n\nA few systems also support [[memory scrubbing]].\n\n== See also ==\n{{Portal|Computer science}}\n\n* [[Berger code]]\n* [[Burst error-correcting code]]\n* [[Forward error correction]]\n* [[Link adaptation]]\n* [[List of algorithms#Error detection and correction|List of algorithms for error detection and correction]]\n* [[Forward error correction#List of error-correcting codes|List of error-correcting codes]]\n* [[List of hash functions]]\n* [[Reliability (computer networking)]]\n\n== References ==\n{{Reflist|30em}}\n\n== Further reading ==\n* {{cite book|author1=Shu Lin |author2=Daniel J. Costello, Jr. | title = Error Control Coding: Fundamentals and Applications| year = 1983| publisher = [[Prentice Hall]]| isbn = 0-13-283796-X }}\n\n== External links ==\n* [http://www.inference.phy.cam.ac.uk/mackay/itila/ The on-line textbook: Information Theory, Inference, and Learning Algorithms], by [[David J.C. MacKay]], contains chapters on elementary error-correcting codes; on the theoretical limits of error-correction; and on the latest state-of-the-art error-correcting codes, including [[low-density parity-check code]]s, [[turbo code]]s, and [[fountain codes]].\n* [http://ipsit.bu.edu/comp.html Compute parameters of linear codes] \u2013 an on-line interface for generating and computing parameters (e.g. [[Decoding methods#Minimum distance decoding|minimum distance]], [[covering radius]]) of [[Linear code|linear error-correcting codes]].\n* [http://www.eccpage.com/ ECC Page]\n* [http://pdos.csail.mit.edu/papers/softecc:ddopson-meng/softecc_ddopson-meng.pdf SoftECC: A System for Software Memory Integrity Checking]\n* [http://www.fiala.me/pubs/papers/libsdc11.pdf A Tunable, Software-based DRAM Error Detection and Correction Library for HPC]\n* [http://www.fiala.me/pubs/papers/sc12-redmpi.pdf Detection and Correction of Silent Data Corruption for Large-Scale High-Performance Computing]\n\n[[Category:Error detection and correction| ]]\n[[Category:Computer errors|Detection and correction]]"}]}}}}