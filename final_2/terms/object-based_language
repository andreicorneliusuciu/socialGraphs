{"batchcomplete":"","query":{"normalized":[{"from":"Object-based_language","to":"Object-based language"}],"pages":{"1759766":{"pageid":1759766,"ns":0,"title":"Object-based language","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"The term \"'''object-based language'''\" may be used in a technical sense to describe ''any'' [[programming language]] that uses the idea of encapsulating state and operations inside [[object (computer science)|\"objects\"]]. Object-based languages need not support [[inheritance (computer science)|inheritance]] or [[subtype|subtyping]], but those that do are also said to be [[object-oriented programming|\"object-oriented\"]]. Object-based languages that do not support inheritance or subtyping are usually not considered to be true object-oriented languages.\n\nExamples of [[object-oriented programming language|object-oriented languages]], in rough chronological order, include [[Simula]], [[Smalltalk]], [[C++]] (whose object model was based on Simula's), [[Objective-C]] (whose object model was based on Smalltalk's), [[Eiffel (programming language)|Eiffel]], [[Xojo]] (previously REALbasic), [[Python (programming language)|Python]], [[Ruby (programming language)|Ruby]], [[Java (programming language)|Java]], [[Visual Basic .NET]], [[C Sharp (programming language)|C#]], and [[Fortran 2003]]. Examples of a language that is object-based, but not object-oriented are early versions of [[Ada (programming language)|Ada]], [[Visual Basic]] (VB), and [[Fortran 90]]. These languages all support the definition of an object as a data structure, but lack polymorphism and inheritance.\n\nIn practice, the term \"object-based\" is usually applied to those object-based languages that are not also object-oriented, although all object-oriented languages are also object-based, by definition. Instead, the terms \"object-based\" and \"object-oriented\" are normally used as mutually exclusive alternatives, rather than as categories that overlap.\n\nSometimes, the term \"object-based\" is applied to [[prototype-based languages]], true object-oriented languages that do not have classes, but in which objects instead inherit their code and data directly from other \"template\" objects. An example of a commonly used prototype-based [[scripting language]] is [[JavaScript]].\n\nBoth object-based and object-oriented languages (whether class-based or prototype-based) may be [[Static typing|statically type-check]]ed. Statically checking prototype-based languages can be difficult, because these languages often allow objects to be dynamically extended with new behavior, and even to have their parent object (from which they inherit) changed, at run time.<ref>{{cite journal|last=Wegner|first=Peter|title=Dimensions of Object-Based Language Design|journal=OOPSLA'87 Conference Proceedings|date=December 1987|volume=22|issue=12|pages=168--182|editor1-first=Norman|editor1-last=Meyrowitz}}</ref><ref>{{cite journal|last=Barbey|first=S |author2=M. Kempe |author3=A. Strohmeier|title=Object-Oriented Programming with Ada 9X|journal=Draft Technical Report|year=1993|url=http://www.adahome.com/9X/OOP-Ada9X.html|accessdate=15 December 2013|publisher=Swiss Federal Institute of Technology in Lausanne Software Engineering Laboratory|quote=Ada 83 itself is generally not considered to be object-oriented; rather, according to the terminology of Wegner [Weg 87], it is said to be object-based, since it provides only a restricted form of inheritance and it lacks polymorphism.}}</ref>\n\n==Difference between Object-oriented and Object-based languages==\n\n{| class=\"wikitable\" style=\"text-align: center; \"\n|-\n! Object-oriented language !! Object-based language\n|-\n| style=\"width: 50%;\" | Object-oriented language supports all the features of OOPs. || Object-based language doesn't support all the features of [[Object-oriented programming|OOP]]s like [[Polymorphism (computer science)|polymorphism]] or [[Inheritance (object-oriented programming)|inheritance]].\n|-\n| style=\"width: 50%;\" | Object-oriented language doesn't have in-built objects. || Object-based language has in-built objects like JavaScript has the <tt>window</tt> object.\n|-\n| style=\"width: 50%;\" | Examples: [[C++]], [[C Sharp (programming language)|C#]], [[Java (programming language)|Java]] etc. || Examples: [[JavaScript]], [[Visual Basic|VB]] etc.\n|}\n\n==References==\n{{reflist}}\n\n{{Programming language}}\n\n[[Category:Computer programming]]"}]}}}}