{"batchcomplete":"","query":{"normalized":[{"from":"Client\u2013server_model","to":"Client\u2013server model"}],"pages":{"6513":{"pageid":6513,"ns":0,"title":"Client\u2013server model","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"[[File:Client-server-model.svg|thumb|250px|A [[computer network diagram]] of clients communicating with a server via the [[Internet]].]] \n\nThe ''client\u2013server model'' is a [[distributed application]] structure that partitions tasks or workloads between the providers of a resource or service, called [[server (computing)|server]]s, and service requesters, called [[client (computing)|client]]s.<ref>{{cite web|url=http://java.sun.com/developer/Books/jdbc/ch07.pdf|publisher=Sun Microsystem|title=Distributed Application Architecture|accessdate=2009-06-16}}</ref> Often clients and servers communicate over a [[computer network]] on separate hardware, but both client and server may reside in the same system. A server [[Host (network)|host]]  runs one or more server programs which share their resources with clients. A client does not share any of its resources, but requests a server's content or service function. Clients therefore initiate communication sessions with servers which await incoming requests.\nExamples of computer applications that use the client\u2013server model are [[Email]], [[network printing]], and the [[World Wide Web]].\n\n==Client and server role==\nThe ''Client-server'' characteristic describes the relationship of cooperating programs in an application. The server component provides a function or service to one or many clients, which initiate requests for such services.\n\nServers are classified by the services they provide. For instance, a [[web server]] serves [[web page]]s and a [[file server]] serves [[computer file]]s.  A shared resource may be any of the server computer's software and electronic components, from [[Computer program|programs]] and [[Data (computing)|data]] to [[Microprocessor|processors]] and [[Data storage device|storage devices]]. The sharing of resources of a server constitutes a ''service''.\n\nWhether a computer is a client, a server, or both, is determined by the nature of the application that requires the service functions. For example, a single computer can run web server and file server software at the same time to serve different data to clients making different kinds of requests. Client software can also communicate with server software within the same computer.<ref>The [[X Window System]] is one example.</ref> Communication between servers, such as to synchronize data, is sometimes called ''[[inter-server]]'' or ''server-to-server'' communication.\n\n==Client and server communication==\nIn general, a service is an [[Abstraction (computer science)|abstraction]] of computer resources and a client does not have to be [[Concern (computer science)|concerned]] with how the server performs while fulfilling the request and delivering the response. The client only has to understand the response based on the well-known application protocol, i.e. the content and the formatting of the data for the requested service.\n\nClients and servers exchange messages in a [[request\u2013response]] [[messaging pattern]]: The client sends a request, and the server returns a response. This exchange of messages is an example of [[inter-process communication]]. To communicate, the computers must have a common language, and they must follow rules so that both the client and the server know what to expect. The language and rules of communication are defined in a [[communications protocol]]. All client-server protocols operate in the [[application layer]]. The application-layer protocol defines the basic patterns of the dialogue. To formalize the data exchange even further, the server may implement an [[Application programming interface|API]] (such as a [[web service]]).<ref>{{Cite journal | last1 = Benatallah | first1 = B. | last2 = Casati | first2 = F. | last3 = Toumani | first3 = F. | title = Web service conversation modeling: A cornerstone for e-business automation | doi = 10.1109/MIC.2004.1260703 | journal = IEEE Internet Computing | volume = 8 | pages = 46 | year = 2004 | pmid =  | pmc = }}</ref> The API is an [[abstraction layer]] for such resources as databases and [[custom software]]. By restricting communication to a specific [[content format]], it facilitates [[parsing]]. By abstracting access, it facilitates [[cross-platform]] data exchange.<ref>{{Cite journal | last1 = Dustdar | first1 = S. | last2 = Schreiner | first2 = W. | doi = 10.1504/IJWGS.2005.007545 | title = A survey on web services composition | journal = International Journal of Web and Grid Services | volume = 1 | pages = 1 | year = 2005 | pmid =  | pmc = }}</ref>\n\nA server may receive requests from many different clients in a very short period of time. Because the computer can perform a limited number of [[Task (computing)|tasks]] at any moment, it relies on a [[Scheduling (computing)|scheduling]] system to prioritize incoming requests from clients in order to accommodate them all in turn. To prevent abuse and maximize [[uptime]], the server's [[software]] limits how a client can use the server's resources. Even so, a server is not immune from abuse. A [[denial of service attack]] exploits a server's obligation to process requests by bombarding it with requests incessantly. This inhibits the server's ability to respond to legitimate  requests that can make the communication of web easier.\n\n==Example==\nWhen a [[bank]] customer accesses [[online banking]] services with a [[web browser]] (the client), the client initiates a request to the bank's web server. The customer's [[login]] credentials may be stored in a [[database]], and the web server accesses the [[database server]] as a client. An [[application server]] interprets the returned data by applying the bank's [[business logic]], and provides the [[Input/output|output]] to the web server. Finally, the web server returns the result to the client web browser for display.\n\nIn each step of this sequence of client\u2013server message exchanges, a computer processes a request and returns data. This is the request-response messaging pattern. When all the requests are met, the sequence is complete and the web browser presents the data to the customer.\n\nThis example illustrates a [[design pattern]] applicable to the client\u2013server model: [[separation of concerns]].\n\n==Early history==\nAn early form of client\u2013server architecture is [[remote job entry]], dating at least to [[OS/360]] (announced 1964), where the request was to run a [[job (computing)|job]], and the response was the output.\n\nWhile formulating the client\u2013server model in the 1960s and 1970s, [[computer scientist]]s building [[ARPANET]] (at the [[Stanford Research Institute]]) used the terms ''server-host'' (or ''serving host'') and ''user-host'' (or ''using-host''), and these appear in the early documents RFC 5<ref name=\"rulifson\">{{cite IETF |title=DEL |rfc=5 |last=Rulifson |first=Jeff |authorlink=Jeff Rulifson |year=1969 |month=June |publisher=[[Internet Engineering Task Force|IETF]] |accessdate=30 November 2013}}</ref> and RFC 4.<ref>{{cite IETF |title=Network Timetable |rfc=4 |last=Shapiro |first=Elmer B. |year=1969 |month=March |publisher=[[Internet Engineering Task Force|IETF]] |accessdate=30 November 2013}}</ref> This usage was continued at [[Xerox PARC]] in the mid-1970s.\n\nOne context in which researchers used these terms was in the design of a [[computer network programming]] language called Decode-Encode Language (DEL).<ref name=\"rulifson\"/> The purpose of this language was to accept commands from one computer (the user-host), which would return status reports to the user as it encoded the commands in network packets. Another DEL-capable computer, the server-host, received the packets, decoded them, and returned formatted data to the user-host. A DEL program on the user-host received the results to present to the user. This is a client\u2013server transaction. Development of DEL was just beginning in 1969, the year that the [[United States Department of Defense]] established [[ARPANET]] (predecessor of [[Internet]]).\n\n===Client-host and server-host===\n''Client-host'' and ''server-host'' have subtly different meanings than ''client'' and ''server''. A [[Host (network)|host]] is any computer connected to a network. Whereas the words ''server'' and ''client'' may refer either to a computer or to a computer program, ''server-host'' and ''user-host'' always refer to computers. The host is a versatile, multifunction computer; ''clients'' and ''servers'' are just programs that run on a host. In the client\u2013server model, a server is more likely to be devoted to the task of serving.\n\nAn early use of the word ''client'' occurs in \"Separating Data from Function in a Distributed File System\", a 1978 paper by Xerox PARC computer scientists Howard Sturgis, James Mitchell, and Jay Israel. The authors are careful to define the term for readers, and explain that they use it to distinguish between the user and the user's network node (the client).<ref>{{Cite journal | title=Separating Data from Function in a Distributed File System |last = Sturgis |first = Howard E. |last2 = Mitchell |first2 = James George |last3 = Israel | first3 = Jay E. |publisher=[[Xerox PARC]] |url=http://ip.com/IPCOM/000128883 |year = 1978}}</ref> (By 1992, the word ''server'' had entered into general parlance.)<ref>{{OEtymD|server|accessdate=30 November 2013}}</ref><ref>{{cite web |url=https://getinfo.de/app/Separating-data-from-function-in-a-distributed/id/TIBKAT%3A509976956 |title=Separating data from function in a distributed file system |author=<!--Staff writer(s); no by-line.--> |website=[[GetInfo]] |publisher=[[German National Library of Science and Technology]] |accessdate=29 November 2013}}</ref>\n\n==Centralized computing==\n{{Further|History of personal computers|Decentralized computing|Computer cluster}}\n\nThe client\u2013server model does not dictate that server-hosts must have more resources than client-hosts. Rather, it enables any general-purpose computer to extend its capabilities by using the shared resources of other hosts. [[Centralized computing]], however, specifically allocates a large amount of resources to a small number of computers. The more computation is offloaded from client-hosts to the central computers, the simpler the client-hosts can be.<ref name=\"Columbia\">{{cite journal |last = Nieh |first = Jason |last2 = Novik |first2 = Naomi |last3 = Yang |first3 = S. Jae |title = A Comparison of Thin-Client Computing Architectures |journal = Technical Report CUCS-022-00 |publisher = Network Computing Laboratory, [[Columbia University]] |location = New York |url = Deccmu.edu/~dga/papers/tolia06-ieee.pdf |format=PDF}}</ref> It relies heavily on network resources (servers and infrastructure) for computation and storage. A [[diskless node]] loads even its [[operating system]] from the network, and a [[computer terminal]] has no operating system at all; it is only an input/output interface to the server. In contrast, a [[fat client]], such as a [[personal computer]], has many resources, and does not rely on a server for essential functions.\n\nAs [[microcomputer]]s decreased in price and increased in power from the 1980s to the late 1990s, many organizations transitioned computation from centralized servers, such as [[Mainframe computer|mainframe]]s and [[minicomputer]]s, to fat clients.<ref>{{Cite book | last1 = d'Amore | first1 = M. J. | last2 = Oberst | first2 = D. J. | doi = 10.1145/800041.801417 | chapter = Microcomputers and mainframes | title = Proceedings of the 11th annual ACM SIGUCCS conference on User services  - SIGUCCS '83 | pages = 7 | year = 1983 | isbn = 0897911164 | pmid =  | pmc = }}</ref> This afforded greater, more individualized dominion over computer resources, but complicated [[information technology management]].<ref name=\"Columbia\"/><ref name=\"tolia\">{{Cite journal |last = Tolia |first = Niraj |last2 = Andersen |first2 = David G. |last3 = Satyanarayanan |first3 = M. |title = Quantifying Interactive User Experience on Thin Clients |journal = [[Computer (magazine)|Computer]] |volume = 39 |number = 3 |date = March 2006 |publisher = [[IEEE Computer Society]] |url = http://www.cs.cmu.edu/~dga/papers/tolia06-ieee.pdf |format=PDF}}</ref><ref>{{cite web |url=http://sqlmag.com/cloud/cloud-really-just-return-mainframe-computing |title=Is the Cloud Really Just the Return of Mainframe Computing? |last=Otey |first=Michael |date=22 March 2011 |website=[[SQL Server Pro]] |publisher=[[Penton Media]] |accessdate=1 December 2013}}</ref> During the 2000s, [[web application]]s matured enough to rival [[application software]] developed for a specific [[microarchitecture]]. This maturation, more affordable [[mass storage]], and the advent of [[service-oriented architecture]] were among the factors that gave rise to the [[cloud computing]] trend of the 2010s.<ref>{{Cite journal | last1 = Barros | first1 = A. P. | last2 = Dumas | first2 = M. | doi = 10.1109/MITP.2006.123 | title = The Rise of Web Service Ecosystems | journal = IT Professional | volume = 8 | issue = 5 | pages = 31 | year = 2006 | pmid =  | pmc = }}</ref>\n\n==Comparison with peer-to-peer architecture==\nIn addition to the client\u2013server model, [[distributed computing]] applications often use the [[peer-to-peer]] (P2P) application architecture.\n\nIn the client\u2013server model, the server is often designed to be a centralized system that serves many clients. The computing power, memory and storage requirements of a server must be scaled appropriately to the expected work load (''i.e.'', the number of clients connecting simultaneously). [[Load balancing (computing)|Load balancing]] and [[failover]] systems are often employed to scale the server implementation.\n\nIn a [[peer-to-peer]] network, two or more computers (''peers'') pool their resources and communicate in a [[decentralized system]]. Peers are coequal, or equipotent [[Node (networking)|nodes]] in a non-hierarchical network. Unlike clients in a client\u2013server or [[client\u2013queue\u2013client]] network, peers communicate with each other directly.<ref name=\"Yongsheng\">{{Cite journal \n| last1 = Yongsheng | first1 = H. \n| last2 = Xiaoyu | first2 = T. \n| last3 = Zhongbin | first3 = T. \n| doi = 10.3923/jas.2013.700.707 \n| title = An Optimization Model for the Interconnection among Peers of the P2P Network \n| journal = Journal of Applied Sciences \n| volume = 13 \n| issue = 5 \n| pages = 700 \n| year = 2013 \n| pmid =  \n| pmc = \n}}</ref> In peer-to-peer networking, an [[Computer algorithm|algorithm]] in the peer-to-peer communications protocol balances [[Load (computing)|load]], and even peers with modest resources can help to share the load.<ref name=\"Yongsheng\"/> If a node becomes unavailable, its shared resources remain available as long as other peers offer it. Ideally, a peer does not need to achieve [[high availability]] because other, [[Redundancy (engineering)|redundant]] peers make up for any resource [[downtime]]; as the availability and load capacity of peers change, the protocol reroutes requests.\n\n==See also==\n{{Columns-list|2|\n* [[Front and back ends]]\n* [[Modular programming]]\n* [[Observer pattern]]\n* [[Publish\u2013subscribe pattern]]\n* [[Pull technology]]\n* [[Push technology]]\n* [[Remote procedure call]]\n}}\n\n==Notes==\n{{Reflist|30em}}\n\n{{IPC}}\n\n{{DEFAULTSORT:Client-server model}}\n[[Category:Application layer protocols| ]]\n[[Category:Clients (computing)| ]]\n[[Category:Inter-process communication]]\n[[Category:Servers (computing)| ]]\n[[Category:Network architecture]]"}]}}}}