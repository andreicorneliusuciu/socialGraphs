{"batchcomplete":"","query":{"pages":{"24998792":{"pageid":24998792,"ns":0,"title":"Debugging","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{redirect|Debug|the shell command|debug (command)|the German magazine|Debug (magazine)|the 2014 film|Debug (film)}}\n{{Software development process}}\n'''Debugging''' is the process of finding and resolving of defects that prevent correct operation of [[computer software]] or a [[system]].  \n\n\nNumerous books have been written about debugging (see below: [[#Further reading|Further reading]]), as it involves numerous aspects, including [[interactive]] debugging, [[control flow]], [[integration testing]], [[Logfile|log files]], monitoring ([[Application monitoring|application]], [[System Monitoring|system]]), [[memory dump]]s, [[Profiling (computer programming)|profiling]], [[Statistical Process Control]], and special design tactics to improve detection while simplifying changes.\n\n==Origin==\n[[File:H96566k.jpg|thumb|A computer log entry from the Mark&nbsp;II, with a moth taped to the page]]\n\nThe terms \"bug\" and \"debugging\" are popularly attributed to [[Admiral Grace Hopper]] in the 1940s.<ref>[http://foldoc.org/?Grace+Hopper Grace Hopper]  from FOLDOC</ref> While she was working on a [[Harvard Mark II|Mark II]] Computer at Harvard University, her associates discovered a moth stuck in a relay and thereby impeding operation, whereupon she remarked that they were \"debugging\" the system. However the term \"bug\" in the meaning of technical error dates back at least to 1878 and [[Thomas Edison]] (see [[software bug]] for a full discussion), and \"debugging\" seems to have been used as a term in aeronautics before entering the world of computers. Indeed, in an interview Grace Hopper remarked that she was not coining the term{{Citation needed|date=July 2015}}. The moth fit the already existing terminology, so it was saved.  A letter from [[J. Robert Oppenheimer]] (director of the WWII atomic bomb \"Manhattan\" project at Los Alamos, NM) used the term in a letter to Dr. [[Ernest Lawrence]] at UC Berkeley, dated October 27, 1944,<ref>http://bancroft.berkeley.edu/Exhibits/physics/images/bigscience25.jpg</ref> regarding the recruitment of additional technical staff.\n\nThe [[Oxford English Dictionary]] entry for \"debug\" quotes the term \"debugging\" used in reference to airplane engine testing in a 1945 article in the Journal of the Royal Aeronautical Society. An article in \"Airforce\" (June 1945 p.&nbsp;50) also refers to debugging, this time of aircraft cameras.  Hopper's [[computer bug|bug]] was found on September 9, 1947. The term was not adopted by computer programmers until the early 1950s.\nThe seminal article by Gill<ref>S. Gill, [http://links.jstor.org/sici?sici=0080-4630%2819510522%29206%3A1087%3C538%3ATDOMIP%3E2.0.CO%3B2-9 The Diagnosis of Mistakes in Programmes on the EDSAC], Proceedings of the Royal Society of London. Series A, Mathematical and Physical Sciences, Vol. 206, No. 1087 (May 22, 1951), pp. 538-554</ref> in 1951 is the earliest in-depth discussion of programming errors, but it does not use the term \"bug\" or \"debugging\".\nIn the [[Association for Computing Machinery|ACM]]'s digital library, the term \"debugging\" is first used in three papers from 1952 ACM National Meetings.<ref>Robert V. D. Campbell, [http://portal.acm.org/citation.cfm?id=609784.609786 Evolution of automatic computation], Proceedings of the 1952 ACM national meeting (Pittsburgh), p 29-32, 1952.</ref><ref>Alex Orden, [http://portal.acm.org/citation.cfm?id=609784.609793 Solution of [[systems of linear inequalities]] on a digital computer], Proceedings of the 1952 ACM national meeting (Pittsburgh), p. 91-95, 1952.</ref><ref>Howard B. Demuth, John B. Jackson, Edmund Klein, N. Metropolis, Walter Orvedahl, James H. Richardson, [http://portal.acm.org/citation.cfm?id=800259.808982 MANIAC], Proceedings of the 1952 ACM national meeting (Toronto), p. 13-16</ref> Two of the three use the term in quotation marks.\nBy 1963 \"debugging\" was a common enough term to be mentioned in passing without explanation on page 1 of the [[Compatible Time-Sharing System|CTSS]] manual.<ref>[http://www.bitsavers.org/pdf/mit/ctss/CTSS_ProgrammersGuide.pdf The Compatible Time-Sharing System], M.I.T. Press, 1963</ref>\n\nKidwell's article ''Stalking the Elusive Computer Bug''<ref>Peggy Aldrich Kidwell, [http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?tp=&arnumber=728224&isnumber=15706 Stalking the Elusive Computer Bug], IEEE Annals of the History of Computing, 1998.</ref> discusses the etymology of \"bug\" and \"debug\" in greater detail.\n\n==Scope==\nAs software and electronic systems have become generally more complex, the various common debugging techniques have expanded with more methods to detect anomalies, assess impact, and schedule [[software patch]]es or full updates to a system. The words \"anomaly\" and \"discrepancy\" can be used, as being more neutral terms, to avoid the words \"error\" and \"defect\" or \"bug\" where there might be an implication that all so-called ''errors'', ''defects'' or ''bugs'' must be fixed (at all costs). Instead, an [[impact assessment]] can be made to determine if changes to remove an ''anomaly'' (or ''discrepancy'') would be cost-effective for the system, or perhaps a scheduled new release might render the change(s) unnecessary. Not all issues are [[life-critical]] or [[mission-critical]] in a system. Also, it is important to avoid the situation where a change might be more upsetting to users, long-term, than living with the known problem(s) (where the \"cure would be worse than the disease\"). Basing decisions of the acceptability of some anomalies can avoid a culture of a \"zero-defects\" mandate, where people might be tempted to deny the existence of problems so that the result would appear as zero ''defects''. Considering the collateral issues, such as the cost-versus-benefit impact assessment, then broader debugging techniques will expand to determine the frequency of anomalies (how often the same \"bugs\" occur) to help assess their impact to the overall system.\n\n==Tools==\n[[File:Xbox-Debug-Console-Set.jpg|thumb|right|250px|Debugging on video game consoles is usually done with special hardware such as this [[Xbox (console)|Xbox]] debug unit intended only for developers.]]\n{{See also|Debugger}}\n\nDebugging ranges in complexity from fixing simple errors to performing lengthy and tiresome tasks of data collection, analysis, and scheduling updates.  The debugging skill of the programmer can be a major factor in the ability to debug a problem, but the difficulty of software debugging varies greatly with the complexity of the system, and also depends, to some extent, on the [[programming language]](s) used and the available tools, such as ''[[debugger]]s''. Debuggers are software tools which enable the [[programmer]] to monitor the [[execution (computers)|execution]] of a program, stop it, restart it, set [[breakpoint]]s, and change values in memory. The term ''debugger'' can also refer to the person who is doing the debugging.\n\nGenerally, [[high-level programming language]]s, such as [[Java (programming language)|Java]], make debugging easier, because they have features such as [[exception handling]] that make real sources of erratic behaviour easier to spot. In programming languages such as [[C (programming language)|C]] or [[assembly language|assembly]], bugs may cause silent problems such as [[memory corruption]], and it is often difficult to see where the initial problem happened. In those cases, [[memory debugging|memory debugger]] tools may be needed.\n\nIn certain situations, general purpose software tools that are language specific in nature can be very useful.  These take the form of ''[[List of tools for static code analysis|static code analysis tools]]''.  These tools look for a very specific set of known problems, some common and some rare, within the source code.  All such issues detected by these tools would rarely be picked up by a compiler or interpreter, thus they are not syntax checkers, but more semantic checkers.  Some tools claim to be able to detect 300+ unique problems. Both commercial and free tools exist in various languages.  These tools can be extremely useful when checking very large source trees, where it is impractical to do code walkthroughs.  A typical example of a problem detected would be a variable dereference that occurs ''before'' the variable is assigned a value.  Another example would be to perform strong type checking when the language does not require such.  Thus, they are better at locating likely errors, versus actual errors.  As a result, these tools have a reputation of false positives.  The old Unix ''[[Lint programming tool|lint]]'' program is an early example.\n\nFor debugging electronic hardware (e.g., [[computer hardware]]) as well as low-level software (e.g., [[BIOS]]es, [[device driver]]s) and [[firmware]], instruments such as [[oscilloscope]]s, [[logic analyzer]]s or [[in-circuit emulator|in-circuit emulators (ICEs)]] are often used, alone or in combination.  An ICE may perform many of the typical software debugger's tasks on low-level [[software]] and [[firmware]].\n\n== Typical debugging process ==\nNormally the first step in debugging is to attempt to reproduce the problem. This can be a non-trivial task, for example as with [[Parallel computing|parallel processes]] or some [[unusual software bugs]]. Also, specific user environment and usage history can make it difficult to reproduce the problem.\n\nAfter the bug is reproduced, the input of the program may need to be simplified to make it easier to debug. For example, a bug in a compiler can make it [[Crash (computing)|crash]] when parsing some large source file. However, after simplification of the test case, only few lines from the original source file can be sufficient to reproduce the same crash. Such simplification can be made manually, using a [[Divide and conquer algorithm|divide-and-conquer]] approach. The programmer will try to remove some parts of original test case and check if the problem still exists. When debugging the problem in a [[Graphical user interface|GUI]], the programmer can try to skip some user interaction from the original problem description and check if remaining actions are sufficient for bugs to appear.\n\nAfter the test case is sufficiently simplified, a programmer can use a [[debugger]] tool to examine program states (values of variables, plus the [[call stack]]) and track down the origin of the problem(s). Alternatively, [[Tracing (software)|tracing]] can be used. In simple cases, tracing is just a few print statements, which output the values of variables at certain points of program execution.{{citation needed|date=February 2016}}\n\n== Techniques ==\n* ''{{visible anchor|Print debugging}}'' (or tracing) is the act of watching (live or recorded) trace statements, or print statements, that indicate the flow of execution of a process. This is sometimes called ''{{visible anchor|printf debugging}}'', due to the use of the [[printf]] function in C. This kind of debugging was turned on by the command TRON in the original versions of the novice-oriented [[BASIC]] programming language. TRON stood for, \"Trace On.\" TRON caused the line numbers of each BASIC command line to print as the program ran.\n* ''Remote debugging'' is the process of debugging a program running on a system different from the debugger. To start remote debugging, a debugger connects to a remote system over a network. The debugger can then control the execution of the program on the remote system and retrieve information about its state.\n* ''Post-mortem debugging'' is debugging of the program after it has already [[Crash (computing)|crashed]]. Related techniques often include various tracing techniques (for example,<ref>[http://www.drdobbs.com/tools/185300443 Postmortem Debugging, Stephen Wormuller, Dr. Dobbs Journal, 2006]</ref>) and/or analysis of [[memory dump]] (or [[core dump]]) of the crashed process. The dump of the process could be obtained automatically by the system (for example, when process has terminated due to an unhandled exception), or by a programmer-inserted instruction, or manually by the interactive user.\n* ''\"Wolf fence\" algorithm:'' Edward Gauss described this simple but very useful and now famous algorithm in a 1982 article for communications of the ACM as follows: \"There's one wolf in Alaska; how do you find it? First build a fence down the middle of the state, wait for the wolf to howl, determine which side of the fence it is on. Repeat process on that side only, until you get to the point where you can see the wolf.\"<ref name=\"communications of the ACM\">{{cite journal | title=\"Pracniques: The \"Wolf Fence\" Algorithm for Debugging\", | author=E. J. Gauss | year=1982}}</ref> This is implemented e.g. in the [[Git (software)|Git]] [[version control system]] as the command ''git bisect'', which uses the above algorithm to determine which [[Commit (data management)|commit]] introduced a particular bug.\n* ''[[Delta Debugging]]''{{snd}} a technique of automating test case simplification.<ref>Andreas Zeller: <cite>Why Programs Fail: A Guide to Systematic Debugging</cite>, Morgan Kaufmann, 2005. ISBN 1-55860-866-4</ref>{{rp|p.123}}<!-- for redirect from 'Saff Squeeze' -->\n* ''Saff Squeeze''{{snd}} a technique of isolating failure within the test using progressive inlining of parts of the failing test.<ref>[http://www.threeriversinstitute.org/HitEmHighHitEmLow.html Kent Beck, Hit 'em High, Hit 'em Low: Regression Testing and the Saff Squeeze]</ref>\n\n==Debugging for embedded systems==\nIn contrast to the general purpose computer software design environment, a primary characteristic of embedded environments is the sheer number of different platforms available to the developers (CPU architectures, vendors, operating systems and their variants). Embedded systems are, by definition, not general-purpose designs: they are typically developed for a single task (or small range of tasks), and the platform is chosen specifically to optimize that application. Not only does this fact make life tough for embedded system developers, it also makes debugging and testing of these systems harder as well, since different debugging tools are needed in different platforms.\n\n*to identify and fix bugs in the system (e.g. logical or synchronization problems in the code, or a design error in the hardware);\n*to collect information about the operating states of the system that may then be used to analyze the system: to find ways to boost its performance or to optimize other important characteristics (e.g. energy consumption, reliability, real-time response etc.).\n\n==Anti-debugging==\nAnti-debugging is \"the implementation of one or more techniques within computer code that hinders attempts at [[reverse engineering]] or debugging a target process\".<ref name=\"veracode-antidebugging\">{{cite web |url=http://www.veracode.com/blog/2008/12/anti-debugging-series-part-i/ |title=Anti-Debugging Series - Part I |last=Shields |first=Tyler |date=2008-12-02 |work=[[Veracode]] |accessdate=2009-03-17}}</ref> It is actively used by recognized publishers in [[copy protection|copy-protection schemas]], but is also used by [[malware]] to complicate its detection and elimination.<ref name=\"soft-prot\">[http://people.seas.harvard.edu/~mgagnon/software_protection_through_anti_debugging.pdf Software Protection through Anti-Debugging Michael N Gagnon, Stephen Taylor, Anup Ghosh]</ref> Techniques used in anti-debugging include:\n*API-based: check for the existence of a debugger using system information\n*Exception-based: check to see if exceptions are interfered with\n*Process and thread blocks: check whether process and thread blocks have been manipulated\n*Modified code: check for code modifications made by a debugger handling software breakpoints\n*Hardware- and register-based: check for hardware breakpoints and CPU registers\n*Timing and latency: check the time taken for the execution of instructions\n*Detecting and penalizing debugger<ref name=\"soft-prot\" /><!-- reference does not exist -->\n\nAn early example of anti-debugging existed in early versions of [[Microsoft Word]] which, if a debugger was detected, produced a message that said: \"The tree of evil bears bitter fruit. Now trashing program disk.\", after which it caused the floppy disk drive to emit alarming noises with the intent of scaring the user away from attempting it again.<ref name=\"SecurityEngineeringRA\">{{cite book | url=http://www.cl.cam.ac.uk/~rja14/book.html | author=[[Ross J. Anderson]] | title=Security Engineering | isbn = 0-471-38922-6 | page=684 }}</ref><ref name=\"toastytech\">{{cite web | url=http://toastytech.com/guis/word1153.html | title=Microsoft Word for DOS 1.15}}</ref>\n\n== See also ==\n{{Portal|Software Testing}}\n\n{{Div col||20em}}\n* [[Assertion (computing)]]\n* [[Debugger]]\n* [[Debugging patterns]]\n* [[Magic number (programming)#Magic debug values|Magic debug values]]\n* [[Software bug]]\n* [[Software testing]]\n* [[Shotgun debugging]]\n{{Div col end}}\n\n== References ==\n{{Reflist|30em}}\n\n==Further reading==\n* David J. Agans: <cite>Debugging: The Nine Indispensable Rules for Finding Even the Most Elusive Software and Hardware Problems</cite>, AMACOM, 2002. ISBN 0-8144-7168-4\n* [[Bill Blunden (author)|Bill Blunden]]: <cite>Software Exorcism: A Handbook for Debugging and Optimizing Legacy Code</cite>, APress, 2003. ISBN 1-59059-234-4\n* Ann R. Ford, Toby J. Teorey: <cite>Practical Debugging in C++</cite>, Prentice Hall, 2002. ISBN 0-13-065394-2\n* Thorsten Gr\u00f6tker, Ulrich Holtmann, Holger Keding, Markus Wloka, <cite>The Developer's Guide to Debugging, Second Edition</cite>, Createspace, 2012. ISBN 1-4701-8552-0\n* Robert C. Metzger: <cite>Debugging by Thinking : A Multidisciplinary Approach</cite>, Digital Press, 2003. ISBN 1-55558-307-5\n* Glenford J Myers: <cite>*The Art of Software Testing</cite>, John Wiley & Sons inc, 2004. ISBN 0-471-04328-1\n* John Robbins: <cite>Debugging Applications</cite>, Microsoft Press, 2000. ISBN 0-7356-0886-5\n* Matthew A. Telles, Yuan Hsieh: <cite>The Science of Debugging</cite>, The Coriolis Group, 2001. ISBN 1-57610-917-8\n* Dmitry Vostokov: <cite>Memory Dump Analysis Anthology, Volume 1</cite>, OpenTask, 2008. ISBN 978-0-9558328-0-2\n* Andreas Zeller: <cite>Why Programs Fail, Second Edition: A Guide to Systematic Debugging</cite>, Morgan Kaufmann, 2009. ISBN 0-1237-4515-2\n* {{cite journal|last=Artzi|first=Shay|author2=Adam Kiezun |author3=Julian Dolby |author4=Frank Tip |author5=Danny Dig |author6=Amit Paradkar |author7=Michael D. Ernst |year=2008|title=Finding bugs in dynamic web applications|page=261|doi=10.1145/1390630.1390662}}\n\n==External links==\n{{wikiquote|Programming#Debugging|Debugging}}\n{{wikibooks|Computer Programming Principles|Maintaining/Debugging|Debugging}}\n\n* [http://www.dumpanalysis.org/ Crash dump analysis patterns]{{snd}} in-depth articles on analyzing and finding bugs in crash dumps\n* [https://web.archive.org/web/20070218145734/http://www-128.ibm.com/developerworks/web/library/wa-debug.html?ca=dgr-lnxw03Dbug Learn the essentials of debugging]{{snd}} how to improve your debugging skills, a good article at [[IBM]] developerWorks (archived from the original on February 18, 2007)\n* [http://www.clarinox.com/docs/whitepapers/EmbeddedDebugger.pdf Plug-in Based Debugging For Embedded Systems]\n* [https://web.archive.org/web/20120112200659/http://www.byteparadigm.com/embedded-systems-test-and-debug---about-digital-input-generation-135.html Embedded Systems test and debug - about digital input generation]{{snd}} results of a survey about embedded system test and debug, Byte Paradigm (archived from the original on January 12, 2012)\n\n[[Category:Debuggers|*]]\n[[Category:Debugging|*]]"}]}}}}