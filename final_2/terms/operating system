{"batchcomplete":"","query":{"normalized":[{"from":"operating_system","to":"Operating system"}],"pages":{"22194":{"pageid":22194,"ns":0,"title":"Operating system","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{pp-move-indef}}\n{{pp-protected|small=yes}}\n{{Use dmy dates|date=July 2015}}\n{{OS}}\nAn '''operating system''' ('''OS''') is [[system software]] that manages [[computer hardware]] and [[computer software|software]] resources and provides common [[operating system services|services]] for [[computer program]]s. All [[Computer program|computer programs]], excluding [[firmware]], require an operating system to function.\n\n[[Time-sharing]] operating systems schedule tasks for efficient use of the system and may also include accounting software for cost allocation of processor time, mass storage, printing, and other resources.\n\nFor hardware functions such as input and output and [[dynamic memory allocation|memory allocation]], the operating system acts as an intermediary between programs and the computer hardware,<ref>{{cite book | last = Stallings | title = Operating Systems, Internals and Design Principles | publisher = Prentice Hall | year = 2005 | location = Pearson |page=6}}</ref><ref>{{cite book | last = Dhotre| first = I.A.| title = Operating Systems. | publisher = Technical Publications | year = 2009 |page=1}}</ref> although the application code is usually executed directly by the hardware and frequently makes [[system call]]s to an OS function or is interrupted by it. Operating systems are found on many devices that contain a computer{{snd}} from [[cellular phone]]s and [[video game console]]s to [[web server]]s and [[supercomputer]]s.\n\nThe dominant desktop operating system is [[Microsoft Windows]] with a market share of around 82%. [[OS X]] by [[Apple Inc.]] is in second place (9.8%), and [[Linux]] is in third position (1.5%).<ref>http://gs.statcounter.com/#desktop-os-ww-monthly-201507-201608</ref> In the [[Mobile operating system|mobile]] ([[smartphone]] and [[Tablet computer|tablet]] combined) sector, based on Strategy Analytics Q3 2016 data,  [[Android (operating system)|Android]] by [[Google]] is dominant with 87.5 percent or growth by 10.3 percent in one year and [[iOS]] by Apple is placed second with 12.1 percent or decrease by 5.2 percent in one year, while other operating systems amount to just 0.3 percent.<ref>{{cite web |url=http://www.businesswire.com/news/home/20161102006440/en/Strategy-Analytics-Android-Captures-Record-88-Percent |title=Strategy Analytics: Android Captures Record 88 Percent Share of Global Smartphone Shipments in Q3 2016 |date=November 2, 2016}}</ref> Linux is dominant in the server and supercomputing sectors. Other specialized classes of operating systems, such as embedded and real-time systems, exist for many applications.\n\n==Types of operating systems==\n\n===Single- and multi-tasking===\nA single-tasking system can only run one program at a time, while a [[multi-tasking]] operating system allows more than one program to be running in concurrency. This is achieved by [[time-sharing]], dividing the available processor time between multiple processes that are each interrupted repeatedly in time slices by a task-scheduling subsystem of the operating system. Multi-tasking may be characterized in preemptive and co-operative types. In preemptive multitasking, the operating system slices the [[Central processing unit|CPU]] time and dedicates a slot to each of the programs. Unix-like operating systems, e.g., Solaris, [[Linux]], as well as [[AmigaOS]] support preemptive multitasking. Cooperative multitasking is achieved by relying on each process to provide time to the other processes in a defined manner. [[16-bit]] versions of Microsoft Windows used cooperative multi-tasking. [[32-bit]] versions of both Windows NT and Win9x, used preemptive multi-tasking.\n\n===Single- and multi-user===\nSingle-user operating systems have no facilities to distinguish users, but may allow multiple programs to run in tandem.<ref>Lorch, Jacob R., and Alan Jay Smith. \"Reducing processor power consumption by improving processor time management in a single-user operating system.\" Proceedings of the 2nd annual international conference on Mobile computing and networking. ACM, 1996.</ref> A [[multi-user]] operating system extends the basic concept of multi-tasking with facilities that identify processes and resources, such as disk space, belonging to multiple users, and the system permits multiple users to interact with the system at the same time. Time-sharing operating systems schedule tasks for efficient use of the system and may also include accounting software for cost allocation of processor time, mass storage, printing, and other resources to multiple users.\n\n===Distributed===\nA [[distributed operating system]] manages a group of distinct computers and makes them appear to be a single computer. The development of networked computers that could be linked and communicate with each other gave rise to distributed computing. Distributed computations are carried out on more than one machine. When computers in a group work in cooperation, they form a distributed system.<ref>{{cite book |last1=Mishra |first1=B. |last2=Singh |first2=N. |last3=Singh |first3=R. |chapter=Master-slave group based model for co-ordinator selection, an improvement of bully algorithm |title=International Conference on Parallel, Distributed and Grid Computing (PDGC) |year=2014 |pages=457\u2013460 |doi=10.1109/PDGC.2014.7030789 |isbn=978-1-4799-7682-9 }}</ref>\n\n===Templated===\nIn an OS, distributed and [[cloud computing]] context, [[Glossary of operating systems terms|templating]] refers to creating a single [[virtual machine image]] as a guest operating system, then saving it as a tool for multiple running virtual machines. The technique is used both in [[virtualization]] and cloud computing management, and is common in large server warehouses.<ref name=\"Operating Sytems Concepts\">{{cite book |isbn=978-1118063330|title=Operating Systems Concepts |author=Gagne, Silberschatz Galvin |page=716|location=New York|publisher=Wiley|year=2012}}</ref>\n\n===Embedded===\n[[Embedded operating system]]s are designed to be used in [[Embedded system|embedded computer systems]]. They are designed to operate on small machines like PDAs with less autonomy. They are able to operate with a limited number of resources. They are very compact and extremely efficient by design. Windows CE and Minix 3 are some examples of embedded operating systems.\n\n===Real-time===\nA [[real-time operating system]] is an operating system that guarantees to process events or data by a specific moment in time. A real-time operating system may be single- or multi-tasking, but when multitasking, it uses specialized scheduling algorithms so that a deterministic nature of behavior is achieved. An event-driven system switches between tasks based on their priorities or external events while time-sharing operating systems switch tasks based on clock interrupts\n\n===Library===\nA library operating system is one in which the services that a typical operating system provides, such as networking, are provided in the form of libraries.  These libraries are composed with the application and configuration code to construct [[unikernel]]s{{snd}} which are specialized, [[Single address space operating system|single address space]], machine images that can be deployed to cloud or embedded environments.\n\n==History==\n{{Main|History of operating systems}}\n{{See also|Resident monitor}}\n\nEarly computers were built to perform a series of single tasks, like a calculator. Basic operating system features were developed in the 1950s, such as [[resident monitor]] functions that could automatically run different programs in succession to speed up processing. Operating systems did not exist in their modern and more complex forms until the early 1960s.<ref name=\"google4\">{{Cite book |title= Classic Operating Systems|editor1-first= Per Brinch|editor1-last= Hansen|year= 2001|publisher= Springer|location= |isbn= 0-387-95113-X|pages=4\u20137|url= https://books.google.com/?id=-PDPBvIPYBkC&lpg=PP1&pg=PP1#v=onepage&q}}</ref>   Hardware features were added, that enabled use of [[Runtime library|runtime libraries]], [[Programmable Interrupt Controller|interrupts]], and [[Parallel computing|parallel processing]]. When [[personal computer]]s became popular in the 1980s, operating systems were made for them similar in concept to those used on larger computers.\n\nIn the 1940s, the earliest electronic digital systems had no operating systems.  Electronic systems of this time were programmed on rows of mechanical switches or by jumper wires on plug boards.  These were special-purpose systems that, for example, generated ballistics tables for the military or controlled the printing of payroll checks from data on punched paper cards.  After programmable general purpose computers were invented, machine languages (consisting of strings of the binary digits 0 and 1 on punched paper tape) were introduced that sped up the programming process (Stern, 1981).{{Full citation needed|date=August 2014}}\n[[File:IBM360-65-1.corestore.jpg|thumb|[[OS/360]] was used on most IBM mainframe computers beginning in 1966, including computers used by the [[Apollo program]].]]\n\nIn the early 1950s, a computer could execute only one program at a time.  Each user had sole use of the computer for a limited period of time and would arrive at a scheduled time with program and data on punched paper cards or punched tape. The program would be loaded into the machine, and the machine would be set to work until the program completed or crashed. Programs could generally be debugged via a front panel using toggle switches and panel lights. It is said that [[Alan Turing]] was a master of this on the early [[Manchester Mark 1]] machine, and he was already deriving the primitive conception of an operating system from the principles of the [[universal Turing machine]].<ref name=\"google4\"/>\n\nLater machines came with libraries of [[Computer software|programs]], which would be linked to a user's program to assist in operations such as input and output and generating [[Machine code|computer code]] from human-readable [[Assembly language|symbolic code]]. This was the genesis of the modern-day operating system. However, machines still ran a single job at a time.  At Cambridge University in England the job queue was at one time a washing line ([[clothes line]]) from which tapes were hung with different colored clothes-pegs to indicate job-priority.{{citation needed|date=September 2010}}\n\nAn improvement was the [[Atlas Supervisor]] introduced with the Manchester [[Atlas (computer)|Atlas]] commissioned in 1962, \"considered by many to be the first recognisable modern operating system\".<ref>{{cite book |last=Lavington |first=Simon |title=A History of Manchester Computers |year=1998 |edition=2nd |publisher=The British Computer Society |location=Swindon |isbn=978-1-902505-01-5|pages=50\u201352}}</ref> [[Per Brinch Hansen|Brinch Hansen]] described it as \"the most significant breakthrough in the history of operating systems.\"<ref>{{cite book |last=Brinch Hansen |first=Per |title=Classic Operating Systems: From Batch Processing to Distributed Systems |year=2000 |publisher=Springer-Verlag}}</ref>\n\n===Mainframes===\n{{Main| Mainframe computer}}\n{{See also|History of IBM mainframe operating systems}}\n\nThrough the 1950s, many major features were pioneered in the field of operating systems, including [[batch processing]], input/output [[interrupt]], [[Data buffer|buffering]], [[Computer multitasking|multitasking]], [[spooling]], [[runtime library|runtime libraries]], [[Linker (computing)|link-loading]], and programs for [[Sorting algorithm|sorting records]] in files. These features were included or not included in application software at the option of application programmers, rather than in a separate operating system used by all applications.  In 1959, the [[SHARE Operating System]] was released as an integrated utility for the [[IBM 704]], and later in the [[IBM 709|709]] and [[IBM 7090|7090]] mainframes, although it was quickly supplanted by [[IBM 7090/94 IBSYS|IBSYS]]/IBJOB on the 709, 7090 and 7094.\n\nDuring the 1960s, IBM's [[OS/360]] introduced the concept of a single OS spanning an entire product line, which was crucial for the success of the System/360 machines. [[IBM]]'s current mainframe operating systems are [[History of IBM mainframe operating systems|distant descendants]] of this original system and applications written for OS/360 can still be run on modern machines.{{Citation needed|date=June 2010}}\n\n[[OS/360]] also pioneered the concept that the operating system keeps track of all of the system resources that are used, including program and data space allocation in main memory and file space in secondary storage, and [[file locking]] during update. When the process is terminated for any reason, all of these resources are re-claimed by the operating system.\n\nThe alternative [[CP-67]] system for the [[IBM System/360 Model 67|S/360-67]] started a whole line of IBM operating systems focused on the concept of [[virtual machine]]s. Other operating systems used on IBM S/360 series mainframes included systems developed by IBM: COS/360 (Compatibility Operating System), [[DOS/360]] (Disk Operating System), [[TSS/360]] (Time Sharing System), [[TOS/360]] (Tape Operating System), [[BOS/360]] (Basic Operating System), and [[IBM Airline Control Program|ACP]] (Airline Control Program), as well as a few non-IBM systems: [[Michigan Terminal System|MTS]] (Michigan Terminal System), [[MUSIC/SP|MUSIC]] (Multi-User System for Interactive Computing), and [[ORVYL]] (Stanford Timesharing System).\n\n[[Control Data Corporation]] developed the [[SCOPE (software)|SCOPE]] operating system in the 1960s, for [[batch processing]]. In cooperation with the University of Minnesota, the [[CDC Kronos|Kronos]] and later the [[NOS (software)|NOS]] operating systems were developed during the 1970s, which supported simultaneous batch and timesharing use. Like many commercial timesharing systems, its interface was an extension of the Dartmouth BASIC operating systems, one of the pioneering efforts in timesharing and programming languages. In the late 1970s, Control Data and the University of Illinois developed the [[PLATO (computer system)|PLATO]] operating system, which used plasma panel displays and long-distance time sharing networks. Plato was remarkably innovative for its time, featuring real-time chat, and multi-user graphical games.\n\nIn 1961, [[Burroughs Corporation]] introduced the [[B5000]] with the [[Master Control Program|MCP]], ([[MCP (Burroughs Large Systems)|Master Control Program]]) operating system. The [[B5000]] was a [[stack machine]] designed to exclusively support high-level languages with no machine language or assembler, and indeed the [[Master Control Program|MCP]] was the first OS to be written exclusively in a high-level language{{snd}} [[Executive Systems Problem Oriented Language|ESPOL]], a dialect of [[ALGOL]]. [[Master Control Program|MCP]] also introduced many other ground-breaking innovations, such as being the first commercial implementation of [[virtual memory]]. During development of the [[AS/400]], [[IBM]] made an approach to Burroughs to licence MCP to run on the AS/400 hardware. This proposal was declined by Burroughs management to protect its existing hardware production. [[Master Control Program|MCP]] is still in use today in the [[Unisys]] [[ClearPath/MCP]] line of computers.\n\nUNIVAC, the first commercial computer manufacturer, produced a series of EXEC operating systems{{citation needed|date=February 2015}}. Like all early main-frame systems, this batch-oriented system managed magnetic drums, disks, card readers and line printers. In the 1970s, UNIVAC produced the Real-Time Basic (RTB) system to support large-scale time sharing, also patterned after the Dartmouth BC system.\n\n[[General Electric]] and [[MIT]] developed General Electric Comprehensive Operating Supervisor (GECOS), which introduced the concept of ringed security privilege levels. After acquisition by [[Honeywell]] it was renamed [[General Comprehensive Operating System]] (GCOS).\n\nDigital Equipment Corporation developed many operating systems for its various computer lines, including [[TOPS-10]] and [[TOPS-20]] time sharing systems for the [[36-bit]] PDP-10 class systems. Before the widespread use of UNIX, TOPS-10 was a particularly popular system in universities, and in the early [[ARPANET]] community.\n\nFrom the late 1960s through the late 1970s, several hardware capabilities evolved that allowed similar or ported software to run on more than one system. Early systems had utilized microprogramming to implement features on their systems in order to permit different underlying [[computer architecture]]s to appear to be the same as others in a series. In fact, most 360s after the 360/40 (except the 360/165 and 360/168) were microprogrammed implementations.\n\nThe enormous investment in software for these systems made since the 1960s caused most of the original computer manufacturers to continue to develop compatible operating systems along with the hardware. Notable supported mainframe operating systems include:\n\n* [[MCP (Burroughs Large Systems)|Burroughs MCP]]{{snd}} [[Burroughs large systems|B5000]], 1961 to [[Unisys]] Clearpath/MCP, present\n* IBM [[OS/360]]{{snd}} [[IBM System/360]], 1966 to IBM [[z/OS]], present\n* IBM [[CP-67]]{{snd}} [[IBM System/360]], 1967 to IBM [[z/VM]]\n* UNIVAC [[EXEC 8]]{{snd}} [[UNIVAC 1108]], 1967, to [[Unisys OS 2200 operating system|OS 2200]] [[Unisys]] Clearpath Dorado, present\n\n===Microcomputers===\n[[File:PC DOS 1.10 screenshot.png|thumb|256px|PC DOS was an early personal computer OS that featured a command line interface.]]\n[[File:Apple Macintosh Desktop.png|thumb|256px|Mac OS by [[Apple Computer]] became the first widespread OS to feature a [[graphical user interface]]. Many of its features such as windows and icons would later become commonplace in GUIs.]]\n\nThe first [[microcomputer]]s did not have the capacity or need for the elaborate operating systems that had been developed for mainframes and minis; minimalistic operating systems were developed, often loaded from [[Read-only memory|ROM]] and known as ''[[resident monitor|monitors]]''. One notable early [[disk operating system]] was [[CP/M]], which was supported on many early microcomputers and was closely imitated by [[Microsoft]]'s [[MS-DOS]], which became widely popular as the operating system chosen for the [[IBM PC]] (IBM's version of it was called IBM DOS or [[PC DOS]]). In the 1980s, Apple Computer Inc. (now [[Apple Inc.]]) abandoned its popular [[Apple II]] series of microcomputers to introduce the [[Apple Macintosh]] computer with an innovative [[graphical user interface]] (GUI) to the [[Classic Mac OS|Mac OS]].\n\nThe introduction of the [[Intel 80386]] CPU chip in October 1985,<ref>{{Cite web|url=http://www.intel.com/pressroom/kits/quickrefyr.htm#1985|title=Intel\u00ae Microprocessor Quick Reference Guide - Year|website=www.intel.com|access-date=2016-04-24}}</ref> with [[32-bit]] architecture and [[paging]] capabilities, provided personal computers with the ability to run [[Computer multitasking|multitasking]] operating systems like those of earlier [[minicomputer]]s and [[mainframe computer|mainframes]]. Microsoft responded to this progress by hiring [[Dave Cutler]], who had developed the [[OpenVMS|VMS]] operating system for [[Digital Equipment Corporation]]. He would lead the development of the [[Windows NT]] operating system, which continues to serve as the basis for Microsoft's operating systems line. [[Steve Jobs]], a co-founder of [[Apple Inc.]], started [[NeXT]] Computer Inc., which developed the [[NEXTSTEP]] operating system. NEXTSTEP would later be acquired by [[Apple Inc.]] and used, along with code from [[FreeBSD]] as the core of Mac OS X.\n\nThe [[GNU Project]] was started by activist and programmer [[Richard Stallman]] with the goal of creating a complete [[free software]] replacement to the proprietary [[UNIX]] operating system. While the project was highly successful in duplicating the functionality of various parts of UNIX, development of the [[GNU Hurd]] kernel proved to be unproductive. In 1991, Finnish computer science student [[Linus Torvalds]], with cooperation from volunteers collaborating over the Internet, released the first version of the [[Linux kernel]]. It was soon merged with the GNU [[user space]] components and [[system software]] to form a complete operating system. Since then, the combination of the two major components has usually been referred to as simply \"Linux\" by the software industry, a naming convention that Stallman and the [[Free Software Foundation]] remain opposed to, preferring the name GNU/Linux. The Berkeley Software Distribution, known as [[BSD (operating system)|BSD]], is the UNIX derivative distributed by the University of California, Berkeley, starting in the 1970s. Freely distributed and [[ported]] to many minicomputers, it eventually also gained a following for use on PCs, mainly as [[FreeBSD]], [[NetBSD]] and [[OpenBSD]].\n\n==Examples of operating systems==\n\n===Unix and Unix-like operating systems===\n{{Main|Unix}}\n<imagemap>\nFile:Unix history-simple.png|256px|thumb|Evolution of [[Unix]] systems\ndefault [[File:Unix history-simple.svg]]\n</imagemap>\n\nUnix was originally written in [[assembly language]].<ref>{{cite web|last=Ritchie|first=Dennis|title=Unix Manual, first edition|url=http://cm.bell-labs.com/cm/cs/who/dmr/1stEdman.html|publisher=Lucent Technologies|accessdate=22 November 2012}}</ref> [[Ken Thompson]] wrote [[B (programming language)|B]], mainly based on [[BCPL]], based on his experience in the [[MULTICS]] project. B was replaced by [[C (programming language)|C]], and Unix, rewritten in C, developed into a large, complex family of inter-related operating systems which have been influential in every modern operating system (see [[History of operating systems|History]]).\n\nThe ''[[Unix-like]]'' family is a diverse group of operating systems, with several major sub-categories including [[System V]], [[BSD (operating system)|BSD]], and [[Linux]]. The name \"[[UNIX]]\" is a trademark of [[The Open Group]] which licenses it for use with any operating system that has been shown to conform to their definitions. \"UNIX-like\" is commonly used to refer to the large set of operating systems which resemble the original UNIX.\n\nUnix-like systems run on a wide variety of [[computer architecture]]s. They are used heavily for [[server (computing)|servers]] in business, as well as [[workstation]]s in academic and engineering environments. [[Free software|Free]] UNIX variants, such as [[Linux]] and [[Berkeley Software Distribution|BSD]], are popular in these areas.\n\nFour operating systems are certified by [[The Open Group]] (holder of the Unix trademark) as Unix. HP's [[HP-UX]] and IBM's [[AIX operating system|AIX]] are both descendants of the original System V Unix and are designed to run only on their respective vendor's hardware. In contrast, [[Sun Microsystems]]'s [[Solaris (operating system)|Solaris]] can run on multiple types of hardware, including [[x86]] and [[Sparc]] servers, and PCs. Apple's [[OS X]], a replacement for Apple's earlier (non-Unix) Mac OS, is a [[hybrid kernel]]-based BSD variant derived from [[NeXTSTEP]], [[Mach (kernel)|Mach]], and [[FreeBSD]].\n\nUnix interoperability was sought by establishing the [[POSIX]] standard. The POSIX standard can be applied to any operating system, although it was originally created for various Unix variants.\n\n====BSD and its descendants====\n{{Main|Berkeley Software Distribution}}\n[[File:First Web Server.jpg|thumb|256px|The [[CERN httpd|first server]] for the [[World Wide Web]] ran on NeXTSTEP, based on BSD.]]\n\nA subgroup of the Unix family is the [[Berkeley Software Distribution]] family, which includes [[FreeBSD]], [[NetBSD]], and [[OpenBSD]]. These operating systems are most commonly found on [[webserver]]s, although they can also function as a personal computer OS. The Internet owes much of its existence to BSD, as many of the protocols now commonly used by computers to connect, send and receive data over a network were widely implemented and refined in BSD. The [[World Wide Web]] was also first demonstrated on a number of computers running an OS based on BSD called [[NeXTSTEP]].\n\nIn 1974, [[University of California, Berkeley]] installed its first Unix system. Over time, students and staff in the computer science department there began adding new programs to make things easier, such as text editors. When Berkeley received new [[VAX]] computers in 1978 with Unix installed, the school's undergraduates modified Unix even more in order to take advantage of the computer's hardware possibilities. The [[Defense Advanced Research Projects Agency]] of the US [[United States Department of Defense|Department of Defense]] took interest, and decided to fund the project. Many schools, corporations, and government organizations took notice and started to use Berkeley's version of Unix instead of the official one distributed by AT&T.\n\n[[Steve Jobs]], upon leaving Apple Inc. in 1985, formed [[NeXT|NeXT Inc.]], a company that manufactured high-end computers running on a variation of BSD called [[NeXTSTEP]]. One of these computers was used by [[Tim Berners-Lee]] as the first webserver to create the World Wide Web.\n\nDevelopers like [[Keith Bostic]] encouraged the project to replace any non-free code that originated with Bell Labs. Once this was done, however, AT&T sued. After two years of legal disputes, the BSD project spawned a number of free derivatives, such as [[NetBSD]] and [[FreeBSD]] (both in 1993), and [[OpenBSD]] (from NetBSD in 1995).\n\n=====OS X=====\n{{Main|OS X}}\n[[File:Mac OSX Lion screen.png|256px|thumb|The standard user interface of OS X]]\n\n'''OS X''' (formerly \"Mac OS X\")  is a line of [[open core]] graphical operating systems developed, marketed, and sold by [[Apple Inc.]], the latest of which is pre-loaded on all currently shipping [[Macintosh]] computers. OS X is the successor to the original [[classic Mac OS]], which had been Apple's primary operating system since 1984. Unlike its predecessor, OS X is a [[UNIX]] operating system built on technology that had been developed at [[NeXT]] through the second half of the 1980s and up until Apple purchased the company in early 1997.\nThe operating system was first released in 1999 as [[Mac OS X Server 1.0]], with a desktop-oriented version ([[Mac OS X v10.0|Mac OS X v10.0 \"Cheetah\"]]) following in March 2001. Since then, six more distinct \"client\" and \"[[OS X Server|server]]\" editions of OS X have been released, until the two were merged in [[Mac OS X Lion|OS X 10.7 \"Lion\"]].\n\nPrior to its merging with OS X, the server edition{{snd}} [[OS X Server]]{{snd}} was [[software architecture|architecturally]] identical to its desktop counterpart and usually ran on Apple's line of Macintosh [[server (computing)|server]] hardware. OS X Server included work group management and administration software tools that provide simplified access to key [[network service]]s, including a [[mail transfer agent]], a [[samba software|Samba server]], an [[LDAP]] server, a [[Domain Name System|domain name server]], and others. With [[Mac OS X Lion|Mac OS X v10.7 Lion]], all server aspects of Mac OS X Server have been integrated into the client version and the product re-branded as \"OS X\" (dropping \"Mac\" from the name). The server tools are now offered as an application.<ref>{{cite web|url=http://www.apple.com/macosx/lion/ |title=OS X Mountain Lion \u2013  Move your Mac even further ahead |publisher=Apple |accessdate=2012-08-07}}</ref>\n\n====Linux====\n{{Main|Linux|Linux kernel}}\n[[File:Ubuntu 12.04 Final Live CD Screenshot.png|thumb|250px|[[Ubuntu (operating system)|Ubuntu]], desktop [[Linux distribution]] ]]\n[[File:Android 5.0-en.png|thumb|180px|left|[[Android (operating system)|Android]], a popular mobile operating system based on a modified version of the Linux kernel]]\n\nThe Linux kernel originated in 1991, as a project of [[Linus Torvalds]], while a university student in Finland. He posted information about his project on a newsgroup for computer students and programmers, and received support and assistance from volunteers who succeeded in creating a complete and functional kernel.\n\n[[Linux]] is [[Unix-like]], but was developed without any Unix code, unlike BSD and its variants. Because of its open license model, the [[Linux kernel]] code is available for study and modification, which resulted in its use on a wide range of computing machinery from supercomputers to smart-watches. Although estimates suggest that Linux is [[Usage share of operating systems|used on]] only 1.82% of all \"desktop\" (or laptop) PCs,<ref name=\"StatCounter\">{{cite web |title=Top 5 Operating Systems from January to April 2011 |url=http://gs.statcounter.com/#os-ww-monthly-201101-201104-bar |publisher=StatCounter |date = October 2009|accessdate=5 November 2009}}</ref> it has been widely adopted for use in servers<ref>{{cite web|url=http://www.idc.com/about/viewpressrelease.jsp?containerId=prUS22360110&sectionId=null&elementId=null&pageType=SYNOPSIS |title=IDC report into Server market share |publisher=Idc.com |accessdate=2012-08-07}}</ref> and embedded systems<ref>{{cite web |last=LinuxDevices Staff |title=Linux still top embedded OS |url=http://archive.linuxgizmos.com/linux-still-top-embedded-os/ |date=23 April 2008 |website=LinuxGizmos.com |access-date=5 April 2016}}</ref> such as cell phones. Linux has superseded Unix on many platforms and is used on <!--{{As of|2015|November}}, 98.8% of the world's [[TOP500|500 fastest supercomputers]] run some variant of Linux,<ref name=top500stats>{{cite web |url=http://www.top500.org/statistics/details/osfam/1 |title=TOP500 Supercomputer Sites: Operating system Family / Linux |publisher=Top500.org|accessdate=17 November 2015}}</ref> -->most supercomputers including the top 207.<ref name=\"top500-list\">{{cite web |url=http://www.top500.org/statistics/sublist/ |title=Sublist Generator |publisher=Top500.org |accessdate=November 2015}}</ref> Many of the same computers are also on [[Green500]] (but in different order), and Linux runs on the top 10. Linux is also commonly used on other small energy-efficient computers, such as [[smartphone]]s and [[smartwatch]]es. The Linux kernel is used in some popular distributions, such as [[Red Hat]], [[Debian]], [[Ubuntu (operating system)|Ubuntu]], [[Linux Mint]] and [[Google]]'s [[Android (operating system)|Android]].\n\n=====Google Chrome OS=====\n{{Main|Chrome OS|Chromium OS}}\n\nChrome OS is an operating system based on the Linux kernel and designed by [[Google]]. It is developed out in the open in the Chromium OS [[open source]] variant and Google makes a proprietary variant of it (similar to the split for the Chrome and Chromium browser). Since Chromium OS targets computer users who spend most of their time on the Internet, it is mainly a [[web browser]] with limited ability to run local applications, though it has a built-in file manager and media player (in later versions, (modified) Android apps have also been supported, since the browser has been made to support them). Instead, it relies on [[Internet application]]s (or [[Web app]]s) used in the web browser to accomplish tasks such as word processing.<ref>{{cite web|title=Chromium OS|url=http://www.chromium.org/chromium-os|publisher=Chromium.org}}</ref> Chromium OS differs from Chrome OS in that Chromium is open-source and used primarily by developers whereas Chrome OS is the operating system shipped out in Chromebooks.<ref>{{cite web|title=Chromium OS FAQ|url=http://www.chromium.org/chromium-os/chromium-os-faq|publisher=The Chromium Projects|accessdate=28 February 2014}}</ref>\n\n===Microsoft Windows===\n{{Main|Microsoft Windows}}\n\nMicrosoft Windows is a family of [[proprietary software|proprietary]] operating systems designed by [[Microsoft Corporation]] and primarily targeted to Intel architecture based computers, with an estimated 88.9 percent total usage share on Web connected computers.<ref name=\"StatCounter\"/><ref>{{cite news|title=Global Web Stats|url=http://marketshare.hitslink.com/operating-system-market-share.aspx?qprid=8|date = May 2011|publisher=Net Market Share, Net Applications |accessdate=2011-05-07}}</ref><ref name=\"w3cstats\">{{cite news|title=Global Web Stats|url=http://www.w3counter.com/globalstats.php|date=September 2009|publisher=W3Counter, Awio Web Services|accessdate=2009-10-24}}</ref><ref>{{cite web |title=Operating System Market Share |url=http://marketshare.hitslink.com/operating-system-market-share.aspx?qprid=8 |publisher=Net Applications |date = October 2009|accessdate=5 November 2009}}</ref> The latest version is [[Windows 10]].\n\nIn 2011, Windows 7 overtook Windows XP as most common version in use.<ref name=\"w3schoolsOSStats\">{{cite web|title=w3schools.com OS Platform Statistics|url=http://www.w3schools.com/browsers/browsers_os.asp|accessdate=30 October 2011}}</ref><ref name=\"gstats2011\">{{cite web|title=Stats Count Global Stats Top Five Operating Systems|url=http://gs.statcounter.com/#os-ww-monthly-201010-201110|accessdate=30 October 2011}}</ref><ref name=\"globstats\">{{cite web|title=Global statistics at w3counter.com|url=http://www.w3counter.com/globalstats.php|accessdate=23 January 2012}}</ref>\n\nMicrosoft Windows was first released in 1985, as an [[operating environment]] running on top of [[MS-DOS]], which was the standard operating system shipped on most Intel architecture personal computers at the time. In 1995, [[Windows 95]] was released which only used MS-DOS as a bootstrap. For backwards compatibility, Win9x could run real-mode MS-DOS<ref>{{cite web|url=http://support.microsoft.com/kb/130179/EN-US |title=Troubleshooting MS-DOS Compatibility Mode on Hard Disks |publisher=Support.microsoft.com |accessdate=2012-08-07}}</ref><ref>{{cite web|url=http://support.microsoft.com/kb/134748/en |title=Using NDIS 2 PCMCIA Network Card Drivers in Windows 95 |publisher=Support.microsoft.com |accessdate=2012-08-07}}</ref> and 16-bit [[Windows 3.x]]<ref>{{cite web|url=http://support.microsoft.com/kb/163354/en |title=INFO: Windows 95 Multimedia Wave Device Drivers Must be 16 bit |publisher=Support.microsoft.com |accessdate=2012-08-07}}</ref> drivers. [[Windows ME]], released in 2000, was the last version in the Win9x family. Later versions have all been based on the [[Windows NT]] [[kernel (computing)|kernel]]. Current client versions of Windows run on [[IA-32]], [[x86-64]] and 32-bit [[ARMv7|ARM]] [[microprocessor]]s.<ref>{{cite news|last=Arthur|first=Charles|title=Windows 8 will run on ARM chips - but third-party apps will need rewrite|url=http://www.theguardian.com/technology/2011/jan/05/microsoft-windows-8-arm-processors|newspaper=The Guardian}}</ref> In addition [[Itanium]] is still supported in older server version [[Windows Server 2008 R2]]. In the past, Windows NT supported additional architectures.\n\nServer editions of Windows are widely used. In recent years, Microsoft has expended significant capital in an effort to promote the use of Windows as a [[server operating system]]. However, Windows' usage on servers is not as widespread as on personal computers as Windows competes against Linux and BSD for server market share.<ref>{{cite web|url=http://news.netcraft.com/SSL-Survey/CMatch/osdv_all|title=Operating System Share by Groups for Sites in All Locations January 2009}}</ref><ref>{{cite web|url = http://blogs.zdnet.com/microsoft/?p=5408|title=Behind the IDC data: Windows still No. 1 in server operating systems|date=2010-02-26|publisher=ZDNet}}</ref>\n\n[[ReactOS]] is a Windows-alternative operating system, which is being developed on the principles of Windows{{snd}} without using any of Microsoft's code.\n\n===Other===\nThere have been many operating systems that were significant in their day but are no longer so, such as [[AmigaOS]]; [[OS/2]] from IBM and Microsoft; [[classic Mac OS]], the non-Unix precursor to Apple's Mac OS X; [[BeOS]]; [[XTS-400|XTS-300]]; [[RISC OS]]; [[MorphOS]]; [[Haiku (operating system)|Haiku]]; [[BareMetal]] and [[FreeMint]]. Some are still used in niche markets and continue to be developed as minority platforms for enthusiast communities and specialist applications. [[OpenVMS]], formerly from [[Digital Equipment Corporation|DEC]], is still under active development by [[Hewlett-Packard]]. Yet other operating systems are used almost exclusively in academia, for operating systems education or to do research on operating system concepts. A typical example of a system that fulfills both roles is [[MINIX]], while for example [[Singularity (operating system)|Singularity]] is used purely for research.\n\nOther operating systems have failed to win significant market share, but have introduced innovations that have influenced mainstream operating systems, not least Bell Labs' [[Plan 9 from Bell Labs|Plan 9]].\n\n==Components==\nThe components of an operating system all exist in order to make the different parts of a computer work together. All user software needs to go through the operating system in order to use any of the hardware, whether it be as simple as a mouse or keyboard or as complex as an Internet component.\n\n===Kernel===\n{{Main|Kernel (computing)}}\n[[File:Kernel Layout.svg|thumb|A kernel connects the application software to the hardware of a computer.]]\n\nWith the aid of the [[firmware]] and [[device driver]]s, the kernel provides the most basic level of control over all of the computer's hardware devices. It manages memory access for programs in the [[Random-access memory|RAM]], it determines which programs get access to which hardware resources, it sets up or resets the CPU's operating states for optimal operation at all times, and it organizes the data for long-term [[non-volatile storage]] with [[file system]]s on such media as disks, tapes, flash memory, etc.\n\n====Program execution====\n{{Main|Process (computing)}}\n\nThe operating system provides an interface between an application program and the computer hardware, so that an application program can interact with the hardware only by obeying rules and procedures programmed into the operating system.  The operating system is also a set of services which simplify development and execution of application programs. Executing an application program involves the creation of a process by the operating system [[kernel (computer science)|kernel]] which assigns memory space and other resources, establishes a priority for the process in multi-tasking systems, loads program binary code into memory, and initiates execution of the application program which then interacts with the user and with hardware devices.\n\n====Interrupts====\n{{Main|Interrupt}}\n\n[[Interrupt]]s are central to operating systems, as they provide an efficient way for the operating system to interact with and react to its environment.  The alternative{{snd}} having the operating system \"watch\" the various sources of input for events (polling) that require action{{snd}} can be found in older systems with very small [[Call stack|stacks]] (50 or 60 bytes) but is unusual in modern systems with large stacks. [[Interrupt]]-based programming is directly supported by most modern CPUs. Interrupts provide a computer with a way of automatically saving local register contexts, and running specific code in response to events. Even very basic computers support hardware interrupts, and allow the programmer to specify code which may be run when that event takes place.\n\nWhen an interrupt is received, the computer's hardware automatically suspends whatever program is currently running, saves its status, and runs computer code previously associated with the interrupt; this is analogous to placing a bookmark in a book in response to a phone call.  In modern operating systems, interrupts are handled by the operating system's [[kernel (computer science)|kernel]]. Interrupts may come from either the computer's hardware or the running program.\n\nWhen a hardware device triggers an interrupt, the operating system's kernel decides how to deal with this event, generally by running some processing code. The amount of code being run depends on the priority of the interrupt (for example: a person usually responds to a smoke detector alarm before answering the phone). The processing of hardware interrupts is a task that is usually delegated to software called a [[device drivers|device driver]], which may be part of the operating system's kernel, part of another program, or both. Device drivers may then relay information to a running program by various means.\n\nA program may also trigger an interrupt to the operating system. If a program wishes to access hardware, for example, it may interrupt the operating system's kernel, which causes control to be passed back to the kernel. The kernel then processes the request.  If a program wishes additional resources (or wishes to shed resources) such as memory, it triggers an interrupt to get the kernel's attention.\n\n====Modes====\n{{Main|Protected mode|Supervisor mode}}\n[[File:Priv rings.svg|300px|thumb|right|Privilege rings for the [[x86]] available in [[protected mode]]. Operating systems determine which processes run in each mode.]]\n\nModern CPUs support multiple modes of operation. CPUs with this capability use at least two modes: [[protected mode]] and [[supervisor mode]]. The supervisor mode is used by the operating system's kernel for low level tasks that need unrestricted access to hardware, such as controlling how memory is written and erased, and communication with devices like graphics cards. Protected mode, in contrast, is used for almost everything else. Applications operate within protected mode, and can only use hardware by communicating with the kernel, which controls everything in supervisor mode. CPUs might have other modes similar to protected mode as well, such as the virtual modes in order to emulate older processor types, such as 16-bit processors on a 32-bit one, or 32-bit processors on a [[64-bit computing|64-bit]] one.\n\nWhen a computer first starts up, it is automatically running in [[supervisor mode]]. The first few programs to run on the computer, being the [[BIOS]] or [[Extensible Firmware Interface|EFI]], [[bootloader]], and the operating system have unlimited access to hardware{{snd}} and this is required because, by definition, initializing a protected environment can only be done outside of one. However, when the operating system passes control to another program, it can place the CPU into [[protected mode]].\n\nIn [[protected mode]], programs may have access to a more limited set of the CPU's instructions. A user program may leave [[protected mode]] only by triggering an interrupt, causing control to be passed back to the [[kernel (computer science)|kernel]]. In this way the operating system can maintain exclusive control over things like access to hardware and memory.\n\nThe term \"protected mode resource\" generally refers to one or more CPU registers, which contain information that the running program isn't allowed to alter. Attempts to alter these resources generally causes a switch to supervisor mode, where the operating system can deal with the illegal operation the program was attempting (for example, by killing the program).\n\n====Memory management====\n{{Main|Memory management}}\n\nAmong other things, a multiprogramming operating system [[kernel (computer science)|kernel]] must be responsible for managing all system memory which is currently in use by programs. This ensures that a program does not interfere with memory already in use by another program. Since programs time share, each program must have independent access to memory.\n\nCooperative memory management, used by many early operating systems, assumes that all programs make voluntary use of the [[kernel (computer science)|kernel]]'s memory manager, and do not exceed their allocated memory. This system of memory management is almost never seen any more, since programs often contain bugs which can cause them to exceed their allocated memory. If a program fails, it may cause memory used by one or more other programs to be affected or overwritten. Malicious programs or viruses may purposefully alter another program's memory, or may affect the operation of the operating system itself. With cooperative memory management, it takes only one misbehaved program to crash the system.\n\n[[Memory protection]] enables the [[kernel (computer science)|kernel]] to limit a process' access to the computer's memory. Various methods of memory protection exist, including [[memory segmentation]] and [[paging]]. All methods require some level of hardware support (such as the [[80286]] MMU), which doesn't exist in all computers.\n\nIn both segmentation and paging, certain [[protected mode]] registers specify to the CPU what memory address it should allow a running program to access. Attempts to access other addresses trigger an interrupt which cause the CPU to re-enter [[supervisor mode]], placing the [[kernel (computer science)|kernel]] in charge. This is called a [[segmentation violation]] or Seg-V for short, and since it is both difficult to assign a meaningful result to such an operation, and because it is usually a sign of a misbehaving program, the [[kernel (computer science)|kernel]] generally resorts to terminating the offending program, and reports the error.\n\nWindows versions 3.1 through ME had some level of memory protection, but programs could easily circumvent the need to use it. A [[general protection fault]] would be produced, indicating a segmentation violation had occurred; however, the system would often crash anyway.\n\n====Virtual memory====\n{{Main|Virtual memory}}\n{{Further|Page fault}}\n[[File:Virtual memory.svg|thumb|250px|Many operating systems can \"trick\" programs into using memory scattered around the hard disk and RAM as if it is one continuous chunk of memory, called virtual memory.]]\n\nThe use of virtual memory addressing (such as paging or segmentation) means that the kernel can choose what memory each program may use at any given time, allowing the operating system to use the same memory locations for multiple tasks.\n\nIf a program tries to access memory that isn't in its current range of accessible memory, but nonetheless has been allocated to it, the kernel is interrupted in the same way as it would if the program were to exceed its allocated memory. (See section on memory management.) Under UNIX this kind of interrupt is referred to as a [[page fault]].\n\nWhen the kernel detects a page fault it generally adjusts the virtual memory range of the program which triggered it, granting it access to the memory requested. This gives the kernel discretionary power over where a particular application's memory is stored, or even whether or not it has actually been allocated yet.\n\nIn modern operating systems, memory which is accessed less frequently can be temporarily stored on disk or other media to make that space available for use by other programs. This is called [[paging|swapping]], as an area of memory can be used by multiple programs, and what that memory area contains can be swapped or exchanged on demand.\n\n\"Virtual memory\" provides the programmer or the user with the perception that there is a much larger amount of RAM in the computer than is really there.<ref name=\"Operating System\">{{cite book|last=Stallings|first=William|title=Computer Organization & Architecture|year=2008|publisher=Prentice-Hall of India Private Limited|location=New Delhi|isbn=978-81-203-2962-1|page=267}}</ref>\n\n====Multitasking====\n{{Main|Computer multitasking|Process management (computing)}}\n{{Further|Context switch|Preemptive multitasking|Cooperative multitasking}}\n\n[[Computer multitasking|Multitasking]] refers to the running of multiple independent computer programs on the same computer; giving the appearance that it is performing the tasks at the same time. Since most computers can do at most one or two things at one time, this is generally done via time-sharing, which means that each program uses a share of the computer's time to execute.\n\nAn operating system [[kernel (computer science)|kernel]] contains a [[scheduling (computing)|scheduling]] program which determines how much time each process spends executing, and in which order execution control should be passed to programs. Control is passed to a process by the kernel, which allows the program access to the [[Central processing unit|CPU]] and memory. Later, control is returned to the kernel through some mechanism, so that another program may be allowed to use the CPU. This so-called passing of control between the kernel and applications is called a [[context switch]].\n\nAn early model which governed the allocation of time to programs was called [[cooperative multitasking]]. In this model, when control is passed to a program by the kernel, it may execute for as long as it wants before explicitly returning control to the kernel. This means that a malicious or malfunctioning program may not only prevent any other programs from using the CPU, but it can hang the entire system if it enters an [[infinite loop]].\n\nModern operating systems extend the concepts of application preemption to device drivers and kernel code, so that the operating system has preemptive control over internal run-times as well.\n\nThe philosophy governing [[preemptive multitasking]] is that of ensuring that all programs are given regular time on the CPU. This implies that all programs must be limited in how much time they are allowed to spend on the CPU without being interrupted. To accomplish this, modern operating system kernels make use of a timed interrupt. A [[protected mode]] timer is set by the kernel which triggers a return to supervisor mode after the specified time has elapsed. (See above sections on Interrupts and Dual Mode Operation.)\n\nOn many single user operating systems cooperative multitasking is perfectly adequate, as home computers generally run a small number of well tested programs. The [[AmigaOS]] is an exception, having preemptive multitasking from its very first version. [[Windows NT]] was the first version of [[Microsoft Windows]] which enforced preemptive multitasking, but it didn't reach the home user market until [[Windows XP]] (since [[Windows NT]] was targeted at professionals).\n\n====Disk access and file systems====\n{{Main|Virtual file system}}\n[[File:Dolphin FileManager.png|thumb|256px|File systems allow users and programs to organize and sort files on a computer, often through the use of directories (or \"folders\").]]\n\nAccess to data stored on disks is a central feature of all operating systems. Computers store data on [[Hard disk drives|disks]] using [[Computer file|files]], which are structured in specific ways in order to allow for faster access, higher reliability, and to make better use of the drive's available space. The specific way in which files are stored on a disk is called a [[file system]], and enables files to have names and attributes. It also allows them to be stored in a hierarchy of directories or folders arranged in a [[directory tree]].\n\nEarly operating systems generally supported a single type of disk drive and only one kind of file system. Early file systems were limited in their capacity, speed, and in the kinds of file names and directory structures they could use. These limitations often reflected limitations in the operating systems they were designed for, making it very difficult for an operating system to support more than one file system.\n\nWhile many simpler operating systems support a limited range of options for accessing storage systems, operating systems like [[UNIX]] and [[Linux]] support a technology known as a [[virtual file system]] or VFS. An operating system such as UNIX supports a wide array of storage devices, regardless of their design or [[file system]]s, allowing them to be accessed through a common [[application programming interface]] (API). This makes it unnecessary for programs to have any knowledge about the device they are accessing. A VFS allows the operating system to provide programs with access to an unlimited number of devices with an infinite variety of file systems installed on them, through the use of specific [[device driver]]s and file system drivers.\n\nA connected [[data storage device|storage device]], such as a [[hard drive]], is accessed through a [[device driver]]. The device driver understands the specific language of the drive and is able to translate that language into a standard language used by the operating system to access all disk drives. On UNIX, this is the language of [[block device]]s.\n\nWhen the kernel has an appropriate device driver in place, it can then access the contents of the disk drive in raw format, which may contain one or more file systems. A file system driver is used to translate the commands used to access each specific file system into a standard set of commands that the operating system can use to talk to all file systems. Programs can then deal with these file systems on the basis of filenames, and directories/folders, contained within a hierarchical structure. They can create, delete, open, and close files, as well as gather various information about them, including access permissions, size, free space, and creation and modification dates.\n\nVarious differences between file systems make supporting all file systems difficult. Allowed characters in file names, [[case sensitivity]], and the presence of various kinds of [[file attribute]]s makes the implementation of a single interface for every file system a daunting task. Operating systems tend to recommend using (and so support natively) file systems specifically designed for them; for example, [[NTFS]] in Windows and [[ext3]] and [[ReiserFS]] in Linux. However, in practice, third party drivers are usually available to give support for the most widely used file systems in most general-purpose operating systems (for example, NTFS is available in Linux through [[NTFS-3g]], and ext2/3 and ReiserFS are available in Windows through third-party software).\n\nSupport for file systems is highly varied among modern operating systems, although there are several common file systems which almost all operating systems include support and drivers for. Operating systems vary on file system support and on the disk formats they may be installed on. Under Windows, each file system is usually limited in application to certain media; for example, CDs must use [[ISO 9660]] or [[Universal Disk Format|UDF]], and as of [[Windows Vista]], [[NTFS]] is the only file system which the operating system can be installed on.  It is possible to install Linux onto many types of file systems. Unlike other operating systems, Linux and UNIX allow any file system to be used regardless of the media it is stored in, whether it is a hard drive, a disc (CD, DVD...), a USB flash drive, or even contained within a file located on another file system.\n\n====Device drivers====\n{{Main|Device driver}}\n\nA [[device driver]] is a specific type of computer software developed to allow interaction with hardware devices. Typically this constitutes an interface for communicating with the device, through the specific computer bus or communications subsystem that the hardware is connected to, providing commands to and/or receiving data from the device, and on the other end, the requisite interfaces to the operating system and software applications. It is a specialized hardware-dependent computer program which is also operating system specific that enables another program, typically an operating system or applications software package or computer program running under the operating system kernel, to interact transparently with a hardware device, and usually provides the requisite interrupt handling necessary for any necessary asynchronous time-dependent hardware interfacing needs.\n\nThe key design goal of device drivers is  [[abstraction (computer science)|abstraction]]. Every model of hardware (even within the same class of device) is different. Newer models also are released by manufacturers that provide more reliable or better performance and these newer models are often controlled differently. Computers and their operating systems cannot be expected to know how to control every device, both now and in the future. To solve this problem, operating systems essentially dictate how every type of device should be controlled. The function of the device driver is then to translate these operating system mandated function calls into device specific calls. In theory a new device, which is controlled in a new manner, should function correctly if a suitable driver is available. This new driver ensures that the device appears to operate as usual from the operating system's point of view.\n\nUnder versions of Windows before Vista and versions of Linux before 2.6, all driver execution was co-operative, meaning that if a driver entered an infinite loop it would freeze the system. More recent revisions of these operating systems incorporate kernel preemption, where the kernel interrupts the driver to give it tasks, and then separates itself from the process until it receives a response from the device driver, or gives it more tasks to do.\n\n===Networking===\n{{Main|Computer network}}\n\nCurrently most operating systems support a variety of networking protocols, hardware, and applications for using them. This means that computers running dissimilar operating systems can participate in a common [[computer network|network]] for sharing resources such as [[remote procedure call|computing]], files, printers, and scanners using either wired or wireless connections. Networks can essentially allow a computer's operating system to access the resources of a remote computer to support the same functions as it could if those resources were connected directly to the local computer. This includes everything from simple communication, to using networked file systems or even sharing another computer's graphics or sound hardware. Some network services allow the resources of a computer to be accessed transparently, such as [[Secure Shell|SSH]] which allows networked users direct access to a computer's command line interface.\n\nClient/server networking allows a program on a computer, called a client, to connect via a network to another computer, called a server. Servers offer (or host) various services to other network computers and users. These services are usually provided through ports or numbered access points beyond the server's [[IP address|network address]]. Each port number is usually associated with a maximum of one running program, which is responsible for handling requests to that port. A daemon, being a user program, can in turn access the local hardware resources of that computer by passing requests to the operating system kernel.\n\nMany operating systems support one or more vendor-specific or open networking protocols as well, for example, [[Systems Network Architecture|SNA]] on [[IBM]] systems, [[DECnet]] on systems from [[Digital Equipment Corporation]], and Microsoft-specific protocols ([[Server message block|SMB]]) on Windows. Specific protocols for specific tasks may also be supported such as [[Network File System (protocol)|NFS]] for file access. Protocols like [[ESound]], or esd can be easily extended over the network to provide sound from local applications, on a remote system's sound hardware.\n\n===Security===\n{{Main|Computer security}}\n\nA computer being secure depends on a number of technologies working properly. A modern operating system provides access to a number of resources, which are available to software running on the system, and to external devices like networks via the kernel.\n\nThe operating system must be capable of distinguishing between requests which should be allowed to be processed, and others which should not be processed. While some systems may simply distinguish between \"privileged\" and \"non-privileged\", systems commonly have a form of requester ''identity'', such as a user name. To establish identity there may be a process of ''authentication''. Often a username must be quoted, and each username may have a password. Other methods of authentication, such as magnetic cards or biometric data, might be used instead. In some cases, especially connections from the network, resources may be accessed with no authentication at all (such as reading files over a network share). Also covered by the concept of requester '''identity''' is ''authorization''; the particular services and resources accessible by the requester once logged into a system are tied to either the requester's user account or to the variously configured groups of users to which the requester belongs.\n\nIn addition to the allow or disallow model of security, a system with a high level of security also offers auditing options. These would allow tracking of requests for access to resources (such as, \"who has been reading this file?\"). Internal security, or security from an already running program is only possible if all possibly harmful requests must be carried out through interrupts to the operating system kernel. If programs can directly access hardware and resources, they cannot be secured.\n\nExternal security involves a request from outside the computer, such as a login at a connected console or some kind of network connection. External requests are often passed through device drivers to the operating system's kernel, where they can be passed onto applications, or carried out directly. Security of operating systems has long been a concern because of highly sensitive data held on computers, both of a commercial and military nature. The United States [[Government of the United States|Government]] [[United States Department of Defense|Department of Defense]] (DoD) created the ''[[Trusted Computer System Evaluation Criteria]]'' (TCSEC) which is a standard that sets basic requirements for assessing the effectiveness of security. This became of vital importance to operating system makers, because the TCSEC was used to evaluate, classify and select [[trusted operating system]]s being considered for the processing, storage and retrieval of sensitive or [[classified information]].\n\nNetwork services include offerings such as file sharing, print services, email, web sites, and [[file transfer protocol]]s (FTP), most of which can have compromised security. At the front line of security are hardware devices known as [[firewall (networking)|firewalls]] or intrusion detection/prevention systems. At the operating system level, there are a number of software firewalls available, as well as intrusion detection/prevention systems. Most modern operating systems include a software firewall, which is enabled by default. A software firewall can be configured to allow or deny network traffic to or from a service or application running on the operating system. Therefore, one can install and be running an insecure service, such as Telnet or FTP, and not have to be threatened by a security breach because the firewall would deny all traffic trying to connect to the service on that port.\n\nAn alternative strategy, and the only [[sandbox (computer security)|sandbox]] strategy available in systems that do not meet the [[Popek and Goldberg virtualization requirements]], is where the operating system is not running user programs as native code, but instead either [[emulator|emulates]] a processor or provides a host for a [[p-code machine|p-code]] based system such as Java.\n\nInternal security is especially relevant for multi-user systems; it allows each user of the system to have private files that the other users cannot tamper with or read. Internal security is also vital if auditing is to be of any use, since a program can potentially bypass the operating system, inclusive of bypassing auditing.\n\n===User interface===\n{{Main|Operating system user interface}}\n[[File:Command line.png|thumb|256px|A screenshot of the [[Bash (Unix shell)|Bash]] command line. Each command is typed out after the 'prompt', and then its output appears below, working its way down the screen. The current command prompt is at the bottom.]]\n\nEvery computer that is to be operated by an individual requires a [[user interface]]. The user interface is usually referred to as a [[shell (computing)|shell]] and is essential if human interaction is to be supported.  The user interface views the [[directory structure]] and requests services from the operating system that will acquire data from [[input device|input hardware devices]], such as a [[keyboard (computing)|keyboard]], [[mouse (computing)|mouse]] or [[credit card|credit card reader]], and requests operating system services to display [[Command-line interface#Command prompt|prompts]], [[status message]]s and such on [[output device|output hardware devices]], such as a [[computer monitor|video monitor]] or [[printer (computing)|printer]]. The two most common forms of a user interface have historically been the [[command-line interface]], where computer commands are typed out line-by-line, and the [[graphical user interface]], where a visual environment (most commonly a [[WIMP (computing)|WIMP]]) is present.\n\n====Graphical user interfaces====\n[[File:KDE 4.png|thumb|left|256px|A screenshot of the [[KDE Plasma Desktop]] graphical user interface. Programs take the form of images on the screen, and the files, folders (directories), and applications take the form of icons and symbols. A mouse is used to navigate the computer.]]\n\nMost of the modern computer systems support [[graphical user interface]]s (GUI), and often include them. In some computer systems, such as the original implementation of the [[classic Mac OS]], the GUI is integrated into the [[kernel (computer science)|kernel]].\n\nWhile technically a graphical user interface is not an operating system service, incorporating support for one into the operating system kernel can allow the GUI to be more responsive by reducing the number of [[context switch]]es required for the GUI to perform its output functions. Other operating systems are [[modularity (programming)|modular]], separating the graphics subsystem from the kernel and the Operating System. In the 1980s UNIX, VMS and many others had operating systems that were built this way. Linux and Mac OS X are also built this way. Modern releases of Microsoft Windows such as [[Windows Vista]] implement a graphics subsystem that is mostly in user-space; however the graphics drawing routines of versions between [[Windows NT 4.0]] and [[Windows Server 2003]] exist mostly in kernel space. [[Windows 9x]] had very little distinction between the interface and the kernel.\n\nMany computer operating systems allow the user to install or create any user interface they desire. The [[X&nbsp;Window System]] in conjunction with [[GNOME]] or [[KDE Plasma Desktop]] is a commonly found setup on most Unix and [[Unix-like]] (BSD, Linux, Solaris) systems. A number of [[Windows shell replacement]]s have been released for Microsoft Windows, which offer alternatives to the included [[Windows shell]], but the shell itself cannot be separated from Windows.\n\nNumerous Unix-based GUIs have existed over time, most derived from X11. Competition among the various vendors of Unix (HP, IBM, Sun) led to much fragmentation, though an effort to standardize in the 1990s to [[Common Open Software Environment|COSE]] and [[Common Desktop Environment|CDE]] failed for various reasons, and were eventually eclipsed by the widespread adoption of GNOME and [[K Desktop Environment]]. Prior to [[free software]]-based toolkits and desktop environments, Motif was the prevalent toolkit/desktop combination (and was the basis upon which CDE was developed).\n\nGraphical user interfaces evolve over time. For example, Windows has modified its user interface almost every time a new major version of Windows is released, and the Mac&nbsp;OS GUI changed dramatically with the introduction of Mac&nbsp;OS&nbsp;X in 1999.<ref name=\"intro-date\">Poisson, Ken. [http://www.islandnet.com/~kpolsson/compsoft/soft1998.htm \"Chronology of Personal Computer Software\"]. Retrieved on 2008-05-07. Last checked on 2009-03-30.</ref>\n\n==Real-time operating systems==\n{{Main|Real-time operating system}}\n\nA real-time operating system (RTOS) is an operating system intended for applications with fixed deadlines ([[real-time computing]]). Such applications include some small [[embedded system]]s, automobile engine controllers, industrial robots, spacecraft, industrial control, and some large-scale computing systems.\n\nAn early example of a large-scale real-time operating system was [[Transaction Processing Facility]] developed by [[American Airlines]] and [[International Business Machines|IBM]] for the [[Sabre Airline Reservations System]].\n\nEmbedded systems that have fixed deadlines use a [[real-time operating system]] such as [[VxWorks]], [[PikeOS]], [[eCos]], [[QNX]], [[MontaVista Linux]] and [[RTLinux]]. [[Windows CE]] is a [[real-time operating system]] that shares similar APIs to desktop Windows but shares none of desktop Windows' codebase.{{Citation needed|date=March 2009}} [[Symbian OS]] also has an RTOS kernel (EKA2) starting with version 8.0b.\n\nSome embedded systems use operating systems such as [[Palm OS]], [[BSD (operating system)|BSD]], and [[Linux]], although such operating systems do not support real-time computing.\n\n==Operating system development as a hobby==\n{{See also|Hobbyist operating system development}}\n\nOperating system development is one of the most complicated activities in which a computing hobbyist may engage.{{citation needed|date=February 2015}} A hobby operating system may be classified as one whose code has not been directly derived from an existing operating system, and has few users and [[software development|active developers]].<ref>{{cite web\n|url=http://www.osnews.com/story/22638/My_OS_Is_Less_Hobby_than_Yours\n|work=Osnews\n|title=My OS is less hobby than yours\n|date=21 December 2009\n|accessdate=21 December 2009\n}}</ref>\n\nIn some cases, hobby development is in support of a \"[[Homebrew Computer Club|homebrew]]\" computing device, for example, a simple [[single-board computer]] powered by a [[6502 microprocessor]].  Or, development may be for an architecture already in widespread use.  Operating system development may come from entirely new concepts, or may commence by modeling an existing operating system.  In either case, the hobbyist is his/her own developer, or may interact with a small and sometimes unstructured group of individuals who have like interests.\n\nExamples of a hobby operating system include [[Syllable (operating system)|Syllable]].\n\n==Diversity of operating systems and portability==\nApplication software is generally written for use on a specific operating system, and sometimes even for specific hardware.{{Citation needed|date = April 2015}} When porting the application to run on another OS, the functionality required by that application may be implemented differently by that OS (the names of functions, meaning of arguments, etc.) requiring the application to be adapted, changed, or otherwise [[software maintenance|maintained]].<!--There really ought to be a discussion of ''software modules'' somewhere, such as those that are neither API's nor Plug-Ins (not sure what those are), but which are either hard (on cartridge), soft (on diskette), or otherwise installable by downloading). -->\n\nUnix was the first operating system not written in assembly language, making it very [[software portability|portable]] to systems different from its native [[PDP-11]].<ref name=\"byte198308\">{{cite news | url=https://archive.org/stream/byte-magazine-1983-08/1983_08_BYTE_08-08_The_C_Language#page/n189/mode/2up | title=The History of Unix | work=BYTE | date=August 1983 | accessdate=31 January 2015 | pages=188}}</ref>\n\nThis cost in supporting operating systems diversity can be avoided by instead writing applications against [[software platform]]s like [[Java (software platform)|Java]] or [[Qt (toolkit)|Qt]]. These abstractions have already borne the cost of adaptation to specific operating systems and their [[system library|system libraries]].\n\nAnother approach is for operating system vendors to adopt standards. For example, [[POSIX]] and [[operating system abstraction layer|OS abstraction layers]] provide commonalities that reduce porting costs.\n\n==Market share==\n{{Main|Usage share of operating systems}}\n\n{| class=\"wikitable\" style=\"float: center; margin:10px\"\n|+2013 worldwide device shipments by operating system<ref>{{cite web |url=http://news.cnet.com/8301-1035_3-57616768-94/android-device-shipments-to-top-1-billion-this-year-gartner/?part=rss&subj=cnet&tag=title&utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+cnet%2FNnTv+%28CNET+River+RSS%29 |title=Android device shipments to top 1 billion this year -- Gartner |first=Lance|last=Whitney |date=7 January 2014}}</ref>\n|-\n! Operating system !! 2012 (millions of units) !! 2013 (million of units)\n|-\n! Android\n| 504\n| 878\n|-\n! Windows\n| 346\n| 328\n|-\n! iOS/Mac OS\n| 214\n| 267\n|-\n! BlackBerry\n| 35\n| 24\n|-\n! Others\n| 1,117\n| 803\n|-\n! Total\n| 2,216\n| 2,300\n|}\n<small>Source: Gartner</small>\n\nIn 2014, Android was first (currently not replicated by others, in a single year) operating system ever to ship on a billion devices, becoming the most popular operating system by installed base.\n\n==See also==\n{{Portal|Computer Science|Information technology|Computer networking}}\n{{div col}}\n* [[Antivirus software]]\n* [[Comparison of operating systems]]\n* [[Hypervisor]]\n* [[Interruptible operating system]]\n* [[List of important publications in computer science#Operating systems|List of important publications in operating systems]]\n* [[List of operating systems]]\n* [[Live CD]]\n* [[Glossary of operating systems terms]]\n* [[Microcontroller]]\n* [[Mobile device]]\n* [[Mobile operating system]]\n* [[Network operating system]]\n* [[Object-oriented operating system]]\n* [[Operating System Projects]]\n* [[System Commander]]\n* [[System image]]\n* [[Timeline of operating systems]]\n* [[Usage share of operating systems]]\n{{div col end}}\n\n==References==\n{{Reflist|colwidth=30em}}\n\n==Further reading==\n{{Refbegin}}\n* {{cite journal | last =Auslander | first =Marc A. |author2=Larkin, David C. |author3=Scherr, Allan L.| title = The evolution of the MVS Operating System | publisher = IBM J. Research & Development | year=1981 | url=http://www.research.ibm.com/journal/rd/255/auslander.pdf }}\n* {{cite book | last = Deitel | first = Harvey M. |author2=Deitel, Paul |author3=Choffnes, David | title = Operating Systems | publisher = Pearson/Prentice Hall | isbn = 978-0-13-092641-8 }}\n* {{cite book | last = Bic| first = Lubomur F. |author2=Shaw, Alan C. | title = Operating Systems | publisher = [[Prentice Hall]] | year = 2003 | location = Pearson  }}\n* {{cite book | last = Silberschatz | first = Avi |author2=Galvin, Peter |author3=Gagne, Greg | title = Operating Systems Concepts | publisher = [[John Wiley & Sons]] | year = 2008 | isbn = 0-470-12872-0 }}\n* O'Brien, J.A., & Marakas, G.M.(2011). Management Information Systems. 10e. McGraw-Hill Irwin\n* {{cite book |last1=Leva |first1=Alberto |last2=Maggio |first2=Martina |last3=Papadopoulos |first3=Alessandro Vittorio |last4=Terraneo |first4=Federico |title=Control-based Operating System Design |publisher=[[Institution of Engineering and Technology|IET]] |year=2013 |isbn=978-1-84919-609-3}}\n* {{cite book |last1=Arpaci-Dusseau |first1=Remzi |last2=Arpaci-Dusseau |first2=Andrea |year=2015 |url=http://pages.cs.wisc.edu/~remzi/OSTEP/ |title=Operating Systems: Three Easy Pieces}}\n{{Refend}}\n\n==External links==\n{{Wiktionary}}\n{{Commons category|Screenshots by operating system|Screenshots of operating systems}}\n{{Wikiversity|Operating Systems}}\n* {{dmoz|Computers/Software/Operating_Systems|Operating Systems}}\n* [http://www.cbi.umn.edu/iterations/haigh.html Multics History] and the history of operating systems\n\n{{Operating system}}\n{{Systems science}}\n{{Computer_science}}\n{{Authority control}}\n\n[[Category:Operating systems| ]]"}]}}}}