{"batchcomplete":"","query":{"normalized":[{"from":"source_code","to":"Source code"}],"pages":{"27661":{"pageid":27661,"ns":0,"title":"Source code","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{For|the 2011 film|Source Code}}\n{{distinguish|source coding}}\n{{Use dmy dates|date=January 2016}}\n{{Refimprove|date=August 2010}}\n{{Program execution}}\n[[File:Hello world c.svg|thumb|300px|Simple [[C (programming language)|C-language]] source code example, a [[procedural programming language]]. The resulting program prints \"hello, world\" on the computer screen. This first known \"[[Hello world]]\" [[Snippet (programming)|snippet]] from the seminal book ''[[The C Programming Language (book)|The C Programming Language]]'' originates from [[Brian Kernighan]] in the [[Bell Labs|Bell Laboratories]] in 1974.<ref name=\"ctutorial\">{{cite web| url = http://cm.bell-labs.com/cm/cs/who/dmr/ctut.pdf| title = Programming in C: A Tutorial}}</ref><!-- See http://cm.bell-labs.com/cm/cs/who/dmr/ctut.pdf for original.-->]]\n[[Image:CodeCmmt002.svg|thumb|right|300px|A more complex [[Java (programming language)|Java]] source code example. Written in [[object oriented programming]] style, it demonstrates [[boilerplate code]]. With prologue comments indicated in red, inline comments indicated in green, and program statements indicated in blue.]]\n\nIn [[computing]], '''source code''' is  any collection of [[computer program|computer instructions]], (possibly with [[comment (computer programming)|comments]]), written using a [[human-readable]] [[programming language]], usually as [[plain text|ordinary text]]. The source code of a program is specially designed to facilitate the work of computer [[programmer]]s, who specify the actions to be performed by a computer mostly by writing source code. The source code is often transformed by an [[assembler (computing)|assembler]] or [[compiler]] into [[Binary number|binary]] [[machine code]] understood by the computer. The machine code might then be stored for [[execution (computing)|execution]] at a later time. Alternatively, source code may be [[interpreter (computing)|interpreted]] and thus immediately executed.\n\nMost [[application software]] is distributed in a form that includes only [[executable]] files. If the source code were included it would be useful to a [[user (computing)|user]], programmer or a [[system administrator]], any of whom might wish to study and/or modify the program.\n\n== Definitions ==\nThe Linux Information Project defines source code as:<ref>The Linux Information Project. [http://www.linfo.org/source_code.html \"Source Code Definition\"].</ref>\n\n<blockquote>\nSource code (also referred to as source or code) is the version of software as it is originally written (i.e., typed into a computer) by a human in [[plain text]] (i.e., human readable alphanumeric characters).\n</blockquote>\n\nThe notion of source code may also be taken more broadly, to include machine code and notations in graphical languages, neither of which are textual in nature.  An example from an article presented on the annual IEEE conference and on Source Code Analysis and Manipulation:<ref>[http://www.ieee-scam.org/ SCAM Working Conference], 2001\u20132010.</ref>\n\n<blockquote>For the purpose of clarity \u2018'''source code'''\u2019 is taken to mean any fully executable description of a software system. It is therefore so construed as to include machine code, very high level languages and executable graphical representations of systems.<ref>[http://www.cs.ucl.ac.uk/staff/M.Harman/scam10.pdf  Why Source Code Analysis and Manipulation Will Always Be Important] by [[Mark Harman (computer scientist)|Mark Harman]], 10th IEEE International Working Conference on Source Code Analysis and Manipulation (SCAM 2010). [[Timi\u015foara]], [[Romania]], 12\u201313 September 2010.</ref></blockquote>\n\nOften there are several steps of [[program translation]] or [[minification (programming)|minification]] between the original source code typed by a human and an executable program.  While some, like the [[Free software foundation|FSF]], argue that an intermediate file \"is not real source code and does not count as source code\",<ref>https://www.gnu.org/philosophy/free-sw.en.html</ref> others find it convenient to refer to each intermediate file as the source code for the next steps.\n\n== History ==\nThe earliest programs for [[stored-program computer]]s were entered in binary through the [[front panel]] switches of the computer. This [[first-generation programming language]] had no distinction between source code and [[machine code]].\n\nWhen IBM first offered software to work with its machine, the source code was provided at no additional charge.  At that time, the cost of developing and supporting software was included in the price of the hardware.  For decades, IBM distributed source code with its software product licenses, until 1983.<ref>Martin Goetz, Peter Schneider. [https://books.google.com/books?id=hSBrPSYgjI4C&q=ibm%20source%20code \"Object-code only: Is IBM playing fair?\"]. p.</ref>\n\nMost early computer magazines published source code as [[type-in program]]s.\n\nOccasionally the entire source code to a large program is published as a hardback book, such as ''\"Computers & Typesetting, Volume B: [[TeX]]: The Program\"'', ''\"[[Pretty Good Privacy|PGP Source Code and Internals]]\"'',\n''\"PC [[SpeedScript]]\"'', and ''\"[[uC/OS]]: The Real-Time Kernel\"''.\n\n== Organization ==\nThe source code which constitutes a [[computer program|program]] is usually held in one or more [[text file]]s stored on a computer's [[hard disk]]; usually these files are carefully arranged into a [[Directory (file systems)|directory tree]], known as a '''source tree'''.  Source code can also be stored in a database (as is common for [[stored procedure]]s) or elsewhere.\n\nThe source code for a particular piece of software may be contained in a single file or many files. Though the practice is uncommon, a program's source code can be written in different programming languages.<ref>{{cite web |title=Extending and Embedding the Python Interpreter<!--mdash is in title that now has \"Python 2.7.11 documentation\" not: \" \u2014 Python v2.6 Documentation\"--> |url=https://docs.python.org/extending/ |work=docs.python.org}}</ref> For example, a program written primarily in the [[C (programming language)|C programming language]], might have portions written in [[assembly language]] for optimization purposes. It is also possible for some components of a piece of software to be written and compiled separately, in an arbitrary programming language, and later integrated into the software using a technique called [[library linking]]. In some languages, such as [[Java (programming language)|Java]], this can be done at [[run time (program lifecycle phase)|run time]] (each class is compiled into a separate file that is linked by the interpreter at runtime).\n\nYet another method is to make the main program an interpreter for a programming language,{{Citation needed|date=May 2008}} either designed specifically for the application in question or general-purpose, and then write the bulk of the actual user functionality as [[Macro (computer science)|macros]] or other forms of add-ins in this language, an approach taken for example by the [[GNU Emacs]] text editor.\n\nThe '''code base''' of a [[computer programming]] project is the larger collection of all the source code of all the [[computer program]]s which make up the project. It has become common practice to maintain code bases in [[version control system]]s.  Moderately complex software customarily requires the compilation or assembly of several, sometimes dozens or even hundreds, of different source code files. In these cases, instructions for compilations, such as a [[Makefile]], are included with the source code. These describe the relationships among the source code files, and contain information about how they are to be compiled.\n\nThe [[revision control]] system is another tool frequently used by developers for source code maintenance.\n\n== Purposes ==\nSource code is primarily used as input to the process that produces an executable program (i.e., it is [[compiler|compiled]] or [[Interpreter (computing)|interpreted]]). It is also used as a method of communicating [[algorithm]]s between people (e.g., [[code snippets]] in books).<ref name=Spinellis>Spinellis, D: ''Code Reading: The Open Source Perspective''. Addison-Wesley Professional, 2003. ISBN 0-201-79940-5</ref>\n\n[[Programmer|Computer programmers]] often find it helpful to review existing source code to learn about programming techniques.<ref name=Spinellis/> The sharing of source code between developers is frequently cited as a contributing factor to the maturation of their programming skills.<ref name=Spinellis/> Some people consider source code an expressive [[Media (arts)|artistic medium]].<ref>\"''Art and Computer Programming''\" [http://www.onlamp.com/pub/a/onlamp/2005/06/30/artofprog.html ONLamp.com], (2005)</ref>\n\n[[Porting]] software to other [[computer platform]]s is usually prohibitively difficult without source code. Without the source code for a particular piece of software, portability is generally computationally expensive.{{Citation needed|date=October 2008}} Possible porting options include [[binary translation]] and emulation of the original platform.\n\n[[Decompilation]] of an executable program can be used to generate source code, either in [[assembly code]] or in a [[High-level programming language|high-level language]].\n\nProgrammers frequently adapt source code from one piece of software to use in other projects, a concept known as [[software reusability]].\n\n== Legal aspects ==\n{{see also|History of free and open-source software}}\nBefore 1974, when the US Commission on New Technological Uses of Copyrighted Works (CONTU) decided that ''\"computer programs, to the extent that they embody an author's original creation, are proper subject matter of copyright\"'',<ref name=\"sail_book\">Lemley, Menell, Merges and Samuelson. ''Software and Internet Law'', p. 34.</ref> software and its source code was not [[copyright]]able and therefore always [[public domain software]]. The 1983 ''[[Apple v. Franklin]]'' legislation clarified also for [[object code]] that the Copyright Act gave computer programs the copyright status of literary works.\n\nIn 1999, in the United States court case ''[[Bernstein v. United States]]'' it was decided if source code should be considered a constitutionally protected form of [[free speech]]. Proponents of free speech argued that because source code conveys information to programmers, is written in a language, and can be used to share humor and other artistic pursuits, it is a protected form of communication. [[University of California]] [[mathematics]] professor and cryptology specialist [[Dan Bernstein]] brought the case to court as at the time, [[encryption algorithm]]s were classified as [[munition]]s by the United States government. Exporting encryption to other countries was considered an issue of [[national security]], and had to be approved by the [[United States Department of State|State Department]].<ref>[http://cr.yp.to/export/2002/08.02-bernstein-subst.pdf]</ref> On Bernstein's behalf the [[Electronic Frontier Foundation]] sued the [[Federal government of the United States|U.S. government]].<ref>[https://www.eff.org/cases/bernstein-v-us-dept-justice Bernstein v. US Department of Justice] on eff.org</ref><ref>[https://www.eff.org/deeplinks/2015/04/remembering-case-established-code-speech EFF at 25: Remembering the Case that established Code as Speech] on EFF.org by Alison Dame-Boyle (16 April 2015)</ref> The court ruling in the case declared software as protected speech under the [[First Amendment]], and national restrictions on encryption software were overturned.\n\n=== Licensing ===\n{{Main article|Software license}}\nAn author of a [[Threshold of originality|non-trivial work]] like software,<ref name=\"sail_book\"/> has several [[exclusive right]]s, among them the copyright for the source code and [[object code]].<ref name=\"fsm\">{{cite web|url=http://www.freesoftwaremagazine.com/articles/what_if_copyright_didnt_apply_binary_executables |title=What if copyright didn't apply to binary executables? |date=2008-08-29| first=Terry |last=Hancock |publisher=[[Free Software Magazine]] |accessdate=2016-01-25}}</ref> The author has the right and possibility to grant customers and users of his software some of his exclusive rights in form of [[software licensing]]. Software, and its accompanying source code, can be associated with several licensing paradigms; the most important distinction is [[open source]] vs [[proprietary software]].\n\nGenerally speaking, software is ''open source'' if the source code is free to use, distribute, modify and study, and ''proprietary'' if the source code is kept secret, or is privately owned and restricted. One of the first software license to be published and to explicitly grant these freedoms was the [[GNU General Public License]] in 1989, the [[BSD license]] is another early example from 1990.\n\nFor proprietary software, the provisions of the various copyright laws, [[trade secret|trade secrecy]] and [[patent]]s are used to keep the source code closed.  Additionally, many pieces of [[retail software]] come with an [[end-user license agreement]] (EULA) which typically prohibits [[decompilation]], [[reverse engineering]], analysis, modification, or circumventing of [[copy protection]].  Types of source code protection{{snd}} beyond traditional [[compiler|compilation]] to [[object code]]{{snd}} include code encryption, [[code obfuscation]] or [[code morphing]].\n\n== Quality ==\n{{Main article|Software quality}}\n\nThe way a program is written can have important consequences for its maintainers. [[Coding conventions]], which stress [[readability]] and some language-specific conventions, are aimed at the maintenance of the software source code, which involves debugging and updating. Other priorities, such as the speed of the program's execution, or the ability to compile the program for multiple architectures, often make code readability a less important consideration, since code ''quality'' generally depends on its ''purpose''.\n\n== See also ==\n* [[Bytecode]]\n* [[Code as data (disambiguation)|Code as data]]\n* [[Coding conventions]]\n* [[Legacy code]]\n* [[Machine code]]\n* [[Markup language]]\n* [[Obfuscated code]]\n* [[Object code]]\n* [[Open-source software]]\n* [[Package (package management system)]]\n* [[Programming language]]\n* [[Source code repository]]\n* [[Syntax highlighting]]\n* [[Visual programming language]]\n\n== References ==\n{{reflist|30em}}\n* (VEW04) \"Using a Decompiler for Real-World Source Recovery\", M. Van Emmerik and T. Waddington, the ''Working Conference on Reverse Engineering'', [[Delft]], [[Netherlands]], 9\u201312 November 2004. [http://www.itee.uq.edu.au/~emmerik/experience_long.pdf Extended version of the paper].\n\n== External links ==\n{{Wiktionary|code|source code}}\n{{Commons category}}\n* [http://www.linfo.org/source_code.html Source Code Definition] by The [[Linux]] Information Project (LINFO)\n* {{cite web| title=Obligatory accreditation system for IT security products\n|date=22 September 2008\n|quote=will introduce rules requiring foreign firms to disclose secret information about digital household appliances and other products from May next year, the [[Yomiuri Shimbun]] said, citing unnamed sources. If a company refuses to disclose information, China would ban it from exporting the product to the Chinese market or producing or selling it in China, the paper said. <!--|accessdate=24 April 2009\nText was \"may start from May 2009, reported by Yomiuri on 2009-04-24.\"-->|url=http://www.metafilter.com/75061/Obligatory-accreditation-system-for-IT-security-products |publisher=MetaFilter.com}}\n* [http://rosettacode.org/wiki/Main_Page Same program written in multiple languages]\n\n{{Authority control}}\n\n{{DEFAULTSORT:Source Code}}\n[[Category:Source code|*]]"}]}}}}