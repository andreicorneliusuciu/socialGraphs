{"batchcomplete":"","query":{"normalized":[{"from":"Distributed_computing#Applications","to":"Distributed computing"}],"pages":{"8501":{"pageid":8501,"ns":0,"title":"Distributed computing","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{Redir|Distributed Information Processing|the computer company|DIP Research}}\n\n'''Distributed Computing''' is  a field of [[computer science]] that studies distributed systems. A ''distributed system'' is a model in which components located on [[computer network|networked computers]] communicate and coordinate their actions by [[message passing|passing messages]].<ref name=\"Coulouris\">{{cite book|last=Coulouris|first=George|author2=Jean Dollimore|author3=Tim Kindberg|author4=Gordon Blair|title=Distributed Systems: Concepts and Design (5th Edition)|publisher = Addison-Wesley|year=2011|location=Boston|isbn=0-132-14301-1}}</ref> The components interact with each other in order to achieve a common goal. Three significant characteristics of distributed systems are: concurrency of components, [[Clock synchronization|lack of a global clock]], and independent failure of components.<ref name=\"Coulouris\"/> Examples of distributed systems vary from [[Service-oriented architecture|SOA-based systems]] to [[massively multiplayer online game]]s to [[Peer-to-peer| peer-to-peer applications]].\n\nA [[computer program]] that runs in a distributed system is called a '''distributed program''', and distributed programming is the process of writing such programs.<ref>{{harvtxt|Andrews|2000}}. {{harvtxt|Dolev|2000}}. {{harvtxt|Ghosh|2007}}, p. 10.</ref> There are many alternatives for the message passing mechanism, including pure HTTP, [[Remote procedure call|RPC-like]] connectors and [[Message-oriented middleware|message queues]].{{citation needed|date=October 2016}}\n\nA goal and challenge pursued by some computer scientists and practitioners in distributed systems is [[location transparency]]; however, this goal has fallen out of favour in industry, as distributed systems are different from conventional non-distributed systems, and the differences, such as [[network partition]]s, partial system failures, and partial upgrades, cannot simply be \"papered over\" by attempts at \"transparency\" (see [[CAP theorem]]).{{citation needed|date=October 2016}}\n\n''Distributed computing'' also refers to the use of distributed systems to solve computational problems. In ''distributed computing'', a problem is divided into many tasks, each of which is solved by one or more computers,<ref>{{harvtxt|Godfrey|2002}}.</ref> which communicate with each other by message passing.<ref name=\"Andrews 2000\">{{harvtxt|Andrews|2000}}, p. 291\u2013292. {{harvtxt|Dolev|2000}}, p. 5.</ref>\n\n==Introduction==\nThe word ''distributed'' in terms such as \"distributed system\", \"distributed programming\", and \"[[distributed algorithm]]\" originally referred to computer networks where individual computers were physically distributed within some geographical area.<ref>{{harvtxt|Lynch|1996}}, p. 1.</ref> The terms are nowadays used in a much wider sense, even referring to autonomous [[Process (computing)|processes]] that run on the same physical computer and interact with each other by message passing.<ref name=\"Andrews 2000\"/>\n\nWhile there is no single definition of a distributed system,<ref name=\"harvtxt|Ghosh|2007\">{{harvtxt|Ghosh|2007}}, p. 10.</ref> the following defining properties are commonly used:\n* There are several autonomous computational entities (''computers'' or ''[[Node (networking)|nodes]]''), each of which has its own local [[Memory (computers)|memory]].<ref>{{harvtxt|Andrews|2000}}, p. 8\u20139, 291. {{harvtxt|Dolev|2000}}, p. 5. {{harvtxt|Ghosh|2007}}, p. 3. {{harvtxt|Lynch|1996}}, p. xix, 1. {{harvtxt|Peleg|2000}}, p. xv.</ref>\n* The entities communicate with each other by [[message passing]].<ref>{{harvtxt|Andrews|2000}}, p. 291. {{harvtxt|Ghosh|2007}}, p. 3. {{harvtxt|Peleg|2000}}, p. 4.</ref>\n\nA distributed system may have a common goal, such as solving a large computational problem;<ref>{{harvtxt|Ghosh|2007}}, p. 3\u20134. {{harvtxt|Peleg|2000}}, p. 1.</ref> the user then perceives the collection of autonomous processors as a unit. Alternatively, each computer may have its own user with individual needs, and the purpose of the distributed system is to coordinate the use of shared resources or provide communication services to the users.<ref>{{harvtxt|Ghosh|2007}}, p. 4. {{harvtxt|Peleg|2000}}, p. 2.</ref>\n\nOther typical properties of distributed systems include the following:\n* The system has to [[Fault tolerance|tolerate failures]] in individual computers.<ref>{{harvtxt|Ghosh|2007}}, p. 4, 8. {{harvtxt|Lynch|1996}}, p. 2\u20133. {{harvtxt|Peleg|2000}}, p. 4.</ref>\n* The structure of the system (network topology, network latency, number of computers) is not known in advance, the system may consist of different kinds of computers and network links, and the system may change during the execution of a distributed program.<ref>{{harvtxt|Lynch|1996}}, p. 2. {{harvtxt|Peleg|2000}}, p. 1.</ref>\n* Each computer has only a limited, incomplete view of the system. Each computer may know only one part of the input.<ref>{{harvtxt|Ghosh|2007}}, p. 7. {{harvtxt|Lynch|1996}}, p. xix, 2. {{harvtxt|Peleg|2000}}, p. 4.</ref>\n\n==Parallel and distributed computing==\n[[File:Distributed-parallel.svg|thumb|right|300px|(a), (b): a distributed system.<br/>(c): a parallel system.]]\nDistributed systems are groups of networked computers, which have the same goal for their work.\nThe terms \"[[concurrent computing]]\", \"[[parallel computing]]\", and \"distributed computing\" have a lot of overlap, and no clear distinction exists between them.<ref>{{harvtxt|Ghosh|2007}}, p. 10. {{harvtxt|Keidar|2008}}.</ref> The same system may be characterized both as \"parallel\" and \"distributed\"; the processors in a typical distributed system run concurrently in parallel.<ref>{{harvtxt|Lynch|1996}}, p. xix, 1\u20132. {{harvtxt|Peleg|2000}}, p. 1.</ref> Parallel computing may be seen as a particular tightly coupled form of distributed computing,<ref>{{harvtxt|Peleg|2000}}, p. 1.</ref> and distributed computing may be seen as a loosely coupled form of parallel computing.<ref name=\"harvtxt|Ghosh|2007\"/> Nevertheless, it is possible to roughly classify concurrent systems as \"parallel\" or \"distributed\" using the following criteria:\n* In parallel computing, all processors may have access to a [[shared memory architecture|shared memory]] to exchange information between processors.<ref>{{harvtxt|Papadimitriou|1994}}, Chapter 15. {{harvtxt|Keidar|2008}}.</ref>\n* In distributed computing, each processor has its own private memory ([[distributed memory]]). Information is exchanged by passing messages between the processors.<ref>See references in [[#Introduction|Introduction]].</ref>\nThe figure on the right illustrates the difference between distributed and parallel systems. Figure (a) is a schematic view of a typical distributed system; as usual, the system is represented as a network topology in which each node is a computer and each line connecting the nodes is a communication link. Figure (b) shows the same distributed system in more detail: each computer has its own local memory, and information can be exchanged only by passing messages from one node to another by using the available communication links. Figure (c) shows a parallel system in which each processor has a direct access to a shared memory.\n\nThe situation is further complicated by the traditional uses of the terms parallel and distributed ''algorithm'' that do not quite match the above definitions of parallel and distributed ''systems'' (see [[#Theoretical foundations|below]] for more detailed discussion). Nevertheless, as a rule of thumb, high-performance parallel computation in a shared-memory multiprocessor uses parallel algorithms while the coordination of a large-scale distributed system uses distributed algorithms.{{citation needed|date=October 2016}}\n\n==History==\nThe use of concurrent processes that communicate by message-passing has its roots in [[operating system]] architectures studied in the 1960s.<ref>{{harvtxt|Andrews|2000}}, p. 348.</ref> The first widespread distributed systems were [[local-area networks]] such as [[Ethernet]], which was invented in the 1970s.<ref>{{harvtxt|Andrews|2000}}, p. 32.</ref>\n\n[[ARPANET]], the predecessor of the [[Internet]], was introduced in the late 1960s, and ARPANET [[e-mail]] was invented in the early 1970s. E-mail became the most successful application of ARPANET,<ref>{{harvtxt|Peter|2004}}, [http://www.nethistory.info/History%20of%20the%20Internet/email.html The history of email].</ref> and it is probably the earliest example of a large-scale [[distributed application]]. In addition to ARPANET, and its successor, the Internet, other early worldwide computer networks included [[Usenet]] and [[FidoNet]] from the 1980s, both of which were used to support distributed discussion systems.{{citation needed|date=October 2016}}\n\nThe study of distributed computing became its own branch of computer science in the late 1970s and early 1980s. The first conference in the field, [[Symposium on Principles of Distributed Computing]] (PODC), dates back to 1982, and its European counterpart [[International Symposium on Distributed Computing]] (DISC) was first held in 1985.{{citation needed|date=October 2016}}\n\n==Architectures==\nVarious hardware and software architectures are used for distributed computing. At a lower level, it is necessary to interconnect multiple CPUs with some sort of network, regardless of whether that network is printed onto a circuit board or made up of loosely coupled devices and cables. At a higher level, it is necessary to interconnect [[Process (computing)|processes]] running on those CPUs with some sort of [[communication system]].{{citation needed|date=October 2016}}\n\nDistributed programming typically falls into one of several basic architectures: [[client\u2013server]], [[Three-tier (computing)|three-tier]], [[Multitier architecture|''n''-tier]], or [[peer-to-peer]]; or categories: [[loose coupling]], or [[Computer cluster|tight coupling]].{{citation needed|date=October 2016}}\n\n* [[Client\u2013server]]: architectures where smart clients contact the server for data then format and display it to the users. Input at the client is committed back to the server when it represents a permanent change.\n* [[Three-tier (computing)|Three-tier]]: architectures that move the client intelligence to a middle tier so that stateless clients can be used. This simplifies application deployment. Most web applications are three-tier.\n* [[Multitier architecture|''n''-tier]]: architectures that refer typically to web applications which further forward their requests to other enterprise services. This type of application is the one most responsible for the success of [[application server]]s.\n* [[Peer-to-peer]]: architectures where there are no special machines that provide a service or manage the network resources.<ref name=Vigna20150127>Vigna P, Casey MJ. ''The Age of Cryptocurrency: How Bitcoin and the Blockchain Are Challenging the Global Economic Order'' St. Martin's Press January 27, 2015 ISBN 9781250065636</ref>{{rp|227}} Instead all responsibilities are uniformly divided among all machines, known as peers. Peers can serve both as clients and as servers.{{citation needed|date=October 2016}}\n\nAnother basic aspect of distributed computing architecture is the method of communicating and coordinating work among concurrent processes. Through various message passing protocols, processes may communicate directly with one another, typically in a [[Master-slave (technology)|master/slave]] relationship. Alternatively, a [[Database-centric architecture|\"database-centric\" architecture]] can enable distributed computing to be done without any form of direct [[inter-process communication]], by utilizing a shared [[database]].<ref>{{Citation |vauthors=Lind P, Alm M |title=A database-centric virtual chemistry system |journal=J Chem Inf Model |volume=46 |issue=3 |pages=1034\u20139 |year=2006 |pmid=16711722 |doi=10.1021/ci050360b |postscript=. }}</ref>\n\n==Applications==\nReasons for using distributed systems and distributed computing may include:\n# The very nature of an application may ''require'' the use of a communication network that connects several computers: for example, data produced in one physical location and required in another location.\n# There are many cases in which the use of a single computer would be possible in principle, but the use of a distributed system is ''beneficial'' for practical reasons. For example, it may be more cost-efficient to obtain the desired level of performance by using a [[Cluster (computing)|cluster]] of several low-end computers, in comparison with a single high-end computer. A distributed system can provide more reliability than a non-distributed system, as there is no [[single point of failure]]. Moreover, a distributed system may be easier to expand and manage than a monolithic uniprocessor system.<ref>{{harvtxt|Elmasri|Navathe|2000}}, Section 24.1.2.</ref>\n\n==Examples==\nExamples of distributed systems and applications of distributed computing include the following:<ref>{{harvtxt|Andrews|2000}}, p. 10\u201311. {{harvtxt|Ghosh|2007}}, p. 4\u20136. {{harvtxt|Lynch|1996}}, p. xix, 1. {{harvtxt|Peleg|2000}}, p. xv. {{harvtxt|Elmasri|Navathe|2000}}, Section 24.</ref>\n* [[telecommunication]] networks:\n** [[telephone network]]s and [[cellular network]]s,\n** [[computer network]]s such as the [[Internet]],\n** [[wireless sensor networks]],\n** [[routing algorithm]]s;\n* network applications:\n** [[World Wide Web]] and [[peer-to-peer network]]s,\n** [[massively multiplayer online game]]s and [[virtual reality]] communities,\n** [[distributed database]]s and [[distributed database management system]]s,\n** [[Distributed file system|network file system]]s,\n** distributed information processing systems such as banking systems and airline reservation systems;\n* real-time process control:\n** [[aircraft]] control systems,\n** [[industrial control systems]];\n* [[parallel computation]]:\n** [[scientific computing]], including [[cluster computing]] and [[grid computing]] and various [[volunteer computing]] projects (see the [[list of distributed computing projects]]),\n** [[distributed rendering]] in computer graphics\n\n==Theoretical foundations==\n{{main article|Distributed algorithm}}\n<!-- Many citations are still missing, will add later -->\n\n===Models===\nMany tasks that we would like to automate by using a computer are of question\u2013answer type: we would like to ask a question and the computer should produce an answer. In [[theoretical computer science]], such tasks are called [[computational problem]]s. Formally, a computational problem consists of ''instances'' together with a ''solution'' for each instance. Instances are questions that we can ask, and solutions are desired answers to these questions.\n\nTheoretical computer science seeks to understand which computational problems can be solved by using a computer ([[Computability theory (computer science)|computability theory]]) and how efficiently ([[computational complexity theory]]). Traditionally, it is said that a problem can be solved by using a computer if we can design an [[algorithm]] that produces a correct solution for any given instance. Such an algorithm can be implemented as a [[computer program]] that runs on a general-purpose computer: the program reads a problem instance from [[Information|input]], performs some computation, and produces the solution as [[output (computing)|output]]. Formalisms such as [[random access machine]]s or [[universal Turing machine]]s can be used as abstract models of a sequential general-purpose computer executing such an algorithm.{{citation needed|date=October 2016}}\n\nThe field of concurrent and distributed computing studies similar questions in the case of either multiple computers, or a computer that executes a network of interacting processes: which computational problems can be solved in such a network and how efficiently? However, it is not at all obvious what is meant by \"solving a problem\" in the case of a concurrent or distributed system: for example, what is the task of the algorithm designer, and what is the concurrent or distributed equivalent of a sequential general-purpose computer?{{citation needed|date=October 2016}}\n\nThe discussion below focuses on the case of multiple computers, although many of the issues are the same for concurrent processes running on a single computer.\n\nThree viewpoints are commonly used:\n; Parallel algorithms in shared-memory model\n* All processors have access to a shared memory. The algorithm designer chooses the program executed by each processor.\n* One theoretical model is the [[parallel random access machine]]s (PRAM) that are used.<ref>{{harvtxt|Cormen|Leiserson|Rivest|1990}}, Section 30.</ref> However, the classical PRAM model assumes synchronous access to the shared memory.\n* Shared-memory programs can be extended to distributed systems if the underlying operating system encapsulates the communication between nodes and virtually unifies the memory across all individual systems.\n* A model that is closer to the behavior of real-world multiprocessor machines and takes into account the use of machine instructions, such as [[Compare-and-swap]] (CAS), is that of ''asynchronous shared memory''. There is a wide body of work on this model, a summary of which can be found in the literature.<ref>{{harvtxt|Herlihy|Shavit|2008}}, Chapters 2-6.</ref><ref>{{harvtxt|Lynch|1996}}</ref>\n\n; Parallel algorithms in message-passing model\n* The algorithm designer chooses the structure of the network, as well as the program executed by each computer.\n* Models such as [[Boolean circuits]] and [[sorting network]]s are used.<ref>{{harvtxt|Cormen|Leiserson|Rivest|1990}}, Sections 28 and 29.</ref> A Boolean circuit can be seen as a computer network: each gate is a computer that runs an extremely simple computer program. Similarly, a sorting network can be seen as a computer network: each comparator is a computer.\n; Distributed algorithms in message-passing model\n* The algorithm designer only chooses the computer program. All computers run the same program. The system must work correctly regardless of the structure of the network.\n* A commonly used model is a [[Graph (discrete mathematics)|graph]] with one [[finite-state machine]] per node.\n\nIn the case of distributed algorithms, computational problems are typically related to graphs. Often the graph that describes the structure of the computer network ''is'' the problem instance. This is illustrated in the following example.{{citation needed|date=October 2016}}\n\n===An example===\nConsider the computational problem of finding a coloring of a given graph ''G''. Different fields might take the following approaches:\n; Centralized algorithms{{citation needed|date=October 2016}}\n* The graph ''G'' is encoded as a string, and the string is given as input to a computer. The computer program finds a coloring of the graph, encodes the coloring as a string, and outputs the result.\n; Parallel algorithms\n* Again, the graph ''G'' is encoded as a string. However, multiple computers can access the same string in parallel. Each computer might focus on one part of the graph and produce a coloring for that part.\n* The main focus is on high-performance computation that exploits the processing power of multiple computers in parallel.\n; Distributed algorithms\n* The graph ''G'' is the structure of the computer network. There is one computer for each node of ''G'' and one communication link for each edge of ''G''. Initially, each computer only knows about its immediate neighbors in the graph ''G''; the computers must exchange messages with each other to discover more about the structure of ''G''. Each computer must produce its own color as output.\n* The main focus is on coordinating the operation of an arbitrary distributed system.{{citation needed|date=October 2016}}\n\nWhile the field of parallel algorithms has a different focus than the field of distributed algorithms, there is a lot of interaction between the two fields. For example, the [[Cole\u2013Vishkin algorithm]] for graph coloring<ref>{{harvtxt|Cole|Vishkin|1986}}. {{harvtxt|Cormen|Leiserson|Rivest|1990}}, Section 30.5.</ref> was originally presented as a parallel algorithm, but the same technique can also be used directly as a distributed algorithm.\n\nMoreover, a parallel algorithm can be implemented either in a parallel system (using shared memory) or in a distributed system (using message passing).<ref>{{harvtxt|Andrews|2000}}, p. ix.</ref> The traditional boundary between parallel and distributed algorithms (choose a suitable network vs. run in any given network) does not lie in the same place as the boundary between parallel and distributed systems (shared memory vs. message passing).\n\n===Complexity measures===\nIn parallel algorithms, yet another resource in addition to time and space is the number of computers. Indeed, often there is a trade-off between the running time and the number of computers: the problem can be solved faster if there are more computers running in parallel (see [[speedup]]). If a decision problem can be solved in [[polylogarithmic time]] by using a polynomial number of processors, then the problem is said to be in the class [[NC (complexity)|NC]].<ref>{{harvtxt|Arora|Barak|2009}}, Section 6.7. {{harvtxt|Papadimitriou|1994}}, Section 15.3.</ref> The class NC can be defined equally well by using the PRAM formalism or Boolean circuits\u2014PRAM machines can simulate Boolean circuits efficiently and vice versa.<ref>{{harvtxt|Papadimitriou|1994}}, Section 15.2.</ref>\n\nIn the analysis of distributed algorithms, more attention is usually paid on communication operations than computational steps. Perhaps the simplest model of distributed computing is a synchronous system where all nodes operate in a lockstep fashion. During each ''communication round'', all nodes in parallel (1)&nbsp;receive the latest messages from their neighbours, (2)&nbsp;perform arbitrary local computation, and (3)&nbsp;send new messages to their neighbors. In such systems, a central complexity measure is the number of synchronous communication rounds required to complete the task.<ref>{{harvtxt|Lynch|1996}}, p. 17\u201323.</ref>\n\nThis complexity measure is closely related to the [[Diameter (graph theory)|diameter]] of the network. Let ''D'' be the diameter of the network. On the one hand, any computable problem can be solved trivially in a synchronous distributed system in approximately 2''D'' communication rounds: simply gather all information in one location (''D'' rounds), solve the problem, and inform each node about the solution (''D'' rounds).\n\nOn the other hand, if the running time of the algorithm is much smaller than ''D'' communication rounds, then the nodes in the network must produce their output without having the possibility to obtain information about distant parts of the network. In other words, the nodes must make globally consistent decisions based on information that is available in their ''local neighbourhood''. Many distributed algorithms are known with the running time much smaller than ''D'' rounds, and understanding which problems can be solved by such algorithms is one of the central research questions of the field.<ref>{{harvtxt|Peleg|2000}}, Sections 2.3 and 7. {{harvtxt|Linial|1992}}. {{harvtxt|Naor|Stockmeyer|1995}}.</ref>\n\nOther commonly used measures are the total number of bits transmitted in the network (cf. [[communication complexity]]).{{citation needed|date=October 2016}}\n\n===Other problems===\nTraditional computational problems take the perspective that we ask a question, a computer (or a distributed system) processes the question for a while, and then produces an answer and stops. However, there are also problems where we do not want the system to ever stop. Examples of such problems include the [[dining philosophers problem]] and other similar [[mutual exclusion]] problems. In these problems, the distributed system is supposed to continuously coordinate the use of shared resources so that no conflicts or [[deadlock]]s occur.\n\nThere are also fundamental challenges that are unique to distributed computing. The first example is challenges that are related to ''fault-tolerance''. Examples of related problems include [[Consensus (computer science)|consensus problems]],<ref>{{harvtxt|Lynch|1996}}, Sections 5\u20137. {{harvtxt|Ghosh|2007}}, Chapter 13.</ref> [[Byzantine fault tolerance]],<ref>{{harvtxt|Lynch|1996}}, p. 99\u2013102. {{harvtxt|Ghosh|2007}}, p. 192\u2013193.</ref> and [[self-stabilisation]].<ref>{{harvtxt|Dolev|2000}}. {{harvtxt|Ghosh|2007}}, Chapter 17.</ref>\n\nA lot of research is also focused on understanding the ''asynchronous'' nature of distributed systems:\n* [[Synchronizer (algorithm)|Synchronizers]] can be used to run synchronous algorithms in asynchronous systems.<ref>{{harvtxt|Lynch|1996}}, Section 16. {{harvtxt|Peleg|2000}}, Section 6.</ref>\n* [[Logical clock]]s provide a causal [[happened-before]] ordering of events.<ref>{{harvtxt|Lynch|1996}}, Section 18. {{harvtxt|Ghosh|2007}}, Sections 6.2\u20136.3.</ref>\n* [[Clock synchronization]] algorithms provide globally consistent physical time stamps.<ref>{{harvtxt|Ghosh|2007}}, Section 6.4.</ref>\n\n===Properties of distributed systems===\nSo far the focus has been on ''designing'' a distributed system that solves a given problem. A complementary research problem is ''studying'' the properties of a given distributed system.{{citation needed|date=October 2016}}\n\nThe [[halting problem]] is an analogous example from the field of centralised computation: we are given a computer program and the task is to decide whether it halts or runs forever. The halting problem is [[Undecidable problem|undecidable]] in the general case, and naturally understanding the behaviour of a computer network is at least as hard as understanding the behaviour of one computer.{{citation needed|date=October 2016}}\n\nHowever, there are many interesting special cases that are decidable. In particular, it is possible to reason about the behaviour of a network of finite-state machines. One example is telling whether a given network of interacting (asynchronous and non-deterministic) finite-state machines can reach a deadlock. This problem is [[PSPACE-complete]],<ref>{{harvtxt|Papadimitriou|1994}}, Section 19.3.</ref> i.e., it is decidable, but it is not likely that there is an efficient (centralised, parallel or distributed) algorithm that solves the problem in the case of large networks.\n\n==Coordinator election==\n''Coordinator election'' (sometimes called ''leader election'') is the process of designating a single [[Process (computing)|process]] as the organizer of some task distributed among several computers (nodes). Before the task is begun, all network nodes are either unaware which node will serve as the \"coordinator\" (or leader) of the task, or unable to communicate with the current coordinator. After a coordinator election algorithm has been run, however, each node throughout the network recognizes a particular, unique node as the task coordinator.{{citation needed|date=October 2016}}\n\nThe network nodes communicate among themselves in order to decide which of them will get into the \"coordinator\" state. For that, they need some method in order to break the symmetry among them. For example, if each node has unique and comparable identities, then the nodes can compare their identities, and decide that the node with the highest identity is the coordinator.{{citation needed|date=October 2016}}\n\nThe definition of this problem is often attributed to LeLann, who formalized it as a method to create a new token in a token [[ring network]] in which the token has been lost.{{citation needed|date=October 2016}}\n\nCoordinator election algorithms are designed to be economical in terms of total [[byte]]s transmitted, and time. The algorithm suggested by Gallager, Humblet, and Spira <ref>{{cite journal |author=[[Robert G. Gallager|R. G. Gallager]], P. A. Humblet, and P. M. Spira |title=A Distributed Algorithm for Minimum-Weight Spanning Trees |journal=ACM Transactions on Programming Languages and Systems |volume=5 |issue=1 |date=January 1983 |pages=66\u201377 |url=http://theory.csail.mit.edu/classes/6.852/05/papers/p66-gallager.pdf |doi=10.1145/357195.357200}}</ref> for general undirected graphs has had a strong impact on the design of distributed algorithms in general, and won the [[Dijkstra Prize]] for an influential paper in distributed computing.\n\nMany other algorithms were suggested for different kind of network [[Graph (discrete mathematics)|graph]]s, such as undirected rings, unidirectional rings, complete graphs, grids, directed Euler graphs, and others. A general method that decouples the issue of the graph family from the design of the coordinator election algorithm was suggested by Korach, Kutten, and Moran.<ref>{{cite journal |author=Ephraim Korach, Shay Kutten, [[Shlomo Moran]] |title=A Modular Technique for the Design of Efficient Distributed Leader Finding Algorithms |journal=ACM Transactions on Programming Languages and Systems |volume=12 |issue=1 |pages=84\u2013101 |year=1990 |doi=10.1145/77606.77610}}</ref>\n\nIn order to perform coordination, distributed systems employ the concept of coordinators. The coordinator election problem is to choose a process from among a group of processes on different processors in a distributed system to act as the central coordinator. Several central coordinator election algorithms exist.<ref>{{cite web\n| last=Hamilton | first=Howard\n| url=http://www2.cs.uregina.ca/~hamilton/courses/330/notes/distributed/distributed.html\n| title=Distributed Algorithms\n| accessdate=2013-03-03\n}}</ref>\n\n==See also==\n{{div col||30em}}\n* [[AppScale]]\n* [[Berkeley Open Infrastructure for Network Computing|BOINC]]\n* [[Blockchain (database)]]\n* [[Code mobility]]\n* [[Decentralized computing]]\n* [[Dew computing]]\n* [[Distributed algorithmic mechanism design]]\n* [[Distributed cache]]\n* [[Distributed operating system]]\n* [[Edsger W. Dijkstra Prize in Distributed Computing]]\n* [[Fog computing]]\n* [[Folding@home]]\n* [[Inferno (operating system)|Inferno]]\n* [[Jungle computing]]\n* [[Layered queueing network]]\n* [[Library Oriented Architecture|Library Oriented Architecture - LOA]]\n* [[List of distributed computing conferences]]\n* [[List of distributed computing projects]]\n* [[List of important publications in concurrent, parallel, and distributed computing]]\n* [[Parallel distributed processing]]\n* [[Parallel programming model]]\n* [[Plan 9 from Bell Labs]]\n{{div col end}}\n\n==Notes==\n{{Reflist|30em}}\n\n==References==\n; Books\n* {{citation\n| last=Andrews | first=Gregory R.\n| title=Foundations of Multithreaded, Parallel, and Distributed Programming\n| publisher=[[Addison\u2013Wesley]]\n| year=2000\n| isbn=0-201-35752-6\n}}. <!--{{harvtxt|Andrews|2000}}-->\n* {{citation\n| last1=Arora | first1=Sanjeev | authorlink1=Sanjeev Arora\n| last2=Barak | first2=Boaz\n| title=Computational Complexity \u2013 A Modern Approach\n| publisher=[[Cambridge University Press|Cambridge]]\n| year=2009\n| isbn=978-0-521-42426-4\n}}. <!--{{harvtxt|Arora|Barak|2009}}-->\n* {{citation\n| last1=Cormen | first1=Thomas H. | authorlink1=Thomas H. Cormen\n| last2=Leiserson | first2=Charles E. | authorlink2=Charles E. Leiserson\n| last3=Rivest | first3=Ronald L. | authorlink3=Ron Rivest\n| title=[[Introduction to Algorithms]]\n| publisher=[[MIT Press]]\n| year=1990\n| edition=1st\n| isbn=0-262-03141-8\n}}. <!--{{harvtxt|Cormen|Leiserson|Rivest|1990}}-->\n* {{citation\n| last=Dolev | first=Shlomi | authorlink=Shlomi Dolev\n| title=Self-Stabilization\n| publisher=[[MIT Press]]\n| year=2000\n| isbn=0-262-04178-2\n}}. <!--{{harvtxt|Dolev|2000}}-->\n* {{citation\n| last1=Elmasri | first1=Ramez\n| last2=Navathe | first2=Shamkant B. | authorlink2=Shamkant Navathe\n| title=Fundamentals of Database Systems\n| publisher=[[Addison\u2013Wesley]]\n| edition=3rd\n| year=2000\n| isbn=0-201-54263-3\n}}. <!--{{harvtxt|Elmasri|Navathe|2000}}-->\n* {{citation\n| last=Ghosh | first=Sukumar\n| title=Distributed Systems \u2013 An Algorithmic Approach\n| publisher=Chapman & Hall/CRC\n| year=2007\n| isbn=978-1-58488-564-1\n}}. <!--{{harvtxt|Ghosh|2007}}-->\n* {{citation\n| last=Lynch | first=Nancy A. | authorlink=Nancy Lynch\n| title=Distributed Algorithms\n| publisher=[[Morgan Kaufmann Publishers|Morgan Kaufmann]]\n| year=1996\n| isbn=1-55860-348-4\n}}. <!--{{harvtxt|Lynch|1996}}-->\n* {{citation\n| last1=Herlihy| first1=Maurice P. | authorlink1=Maurice Herlihy\n| last2=Shavit | first2=Nir N. | authorlink2=Nir Shavit\n| title=The Art of Multiprocessor Programming\n| publisher=[[Morgan Kaufmann Publishers|Morgan Kaufmann]]\n| year=2008\n| isbn=0-12-370591-6\n}}. <!--{{harvtxt|Herlihy|Shavit|2008}}-->\n* {{citation\n| last=Papadimitriou | first=Christos H. | authorlink=Christos Papadimitriou\n| title=Computational Complexity\n| publisher=[[Addison\u2013Wesley]]\n| year=1994\n| isbn=0-201-53082-1\n}}. <!--{{harvtxt|Papadimitriou|1994}}-->\n* {{citation\n| last=Peleg | first=David | authorlink=David Peleg (scientist)\n| title=Distributed Computing: A Locality-Sensitive Approach\n| publisher=[[Society for Industrial and Applied Mathematics|SIAM]]\n| year=2000\n| isbn=0-89871-464-8\n| url=http://www.ec-securehost.com/SIAM/DT05.html\n}}. <!--{{harvtxt|Peleg|2000}}-->\n; Articles\n* {{citation\n| last1 = Cole | first1 = Richard\n| last2 = Vishkin | first2 = Uzi | authorlink2=Uzi Vishkin\n| year = 1986\n| title = Deterministic coin tossing with applications to optimal parallel list ranking\n| journal = Information and Control\n| volume = 70\n| issue = 1\n| pages = 32\u201353\n| doi = 10.1016/S0019-9958(86)80023-7\n}}.\n* {{citation\n| doi=10.1145/1466390.1466402\n| last1=Keidar | first1=Idit\n| title=Distributed computing column 32 \u2013 The year in review\n| journal=[[ACM SIGACT News]]\n| volume=39\n| issue=4\n| year=2008\n| pages=53\u201354\n| url=http://webee.technion.ac.il/~idish/sigactNews/#column%2032\n}}. <!--{{harvtxt|Keidar|2008}}-->\n* {{citation\n| last=Linial | first=Nathan | authorlink = Nati Linial\n| doi=10.1137/0221015\n| title=Locality in distributed graph algorithms\n| journal=SIAM Journal on Computing\n| volume=21\n| year=1992\n| pages=193\u2013201\n| issue=1\n}}.\n* {{citation\n| last1=Naor | first1=Moni | authorlink1=Moni Naor\n| last2=Stockmeyer | first2=Larry | authorlink2=Larry Stockmeyer\n| doi=10.1137/S0097539793254571\n| title=What can be computed locally?\n| journal=SIAM Journal on Computing\n| volume=24\n| year=1995\n| pages=1259\u20131277\n| issue=6\n}}.\n; Web sites\n* {{cite web\n| last=Godfrey | first=Bill\n| url=http://www.bacchae.co.uk/docs/dist.html\n| title=A primer on distributed computing\n| year=2002|ref=harv\n}}\n* {{cite web\n| last=Peter | first=Ian\n| url=http://www.nethistory.info/History%20of%20the%20Internet/\n| title=Ian Peter's History of the Internet\n| year=2004\n| accessdate=2009-08-04|ref=harv\n}}\n\n==Further reading==\n; Books\n* {{citation|author=[[Hagit Attiya|Attiya, Hagit]] and Jennifer Welch|title=Distributed Computing: Fundamentals, Simulations, and Advanced Topics| publisher=Wiley-Interscience| year=2004}} ISBN 0-471-45324-2.\n* {{citation|author1=Christian Cachin |author2=Rachid Guerraoui |author3=Lu\u00eds Rodrigues |title=Introduction to Reliable and Secure Distributed Programming| publisher=Springer| year=2011| isbn=978-3-642-15259-7| edition=2.}}\n* {{Citation|author=Coulouris, George | title=Distributed Systems: Concepts and Design (5th Edition)|publisher = Addison-Wesley|year=2011|display-authors=etal}} ISBN 0-132-14301-1.\n* {{citation|first=Jim|last=Faber|title=Java Distributed Computing|publisher=O'Reilly|year=1998|url=http://docstore.mik.ua/orelly/java-ent/dist/index.htm}}: [http://docstore.mik.ua/orelly/java-ent/dist/index.htm Java Distributed Computing by Jim Faber, 1998]\n* {{citation|author=Garg, Vijay K.|title=Elements of Distributed Computing| publisher=Wiley-IEEE Press| year=2002}} ISBN 0-471-03600-5.\n* {{citation|first=Gerard|last=Tel |title=Introduction to Distributed Algorithms| publisher=Cambridge University Press| year=1994}}\n* {{citation|author=[[K. Mani Chandy|Chandy, Mani]]|title=Parallel Program Design|display-authors=etal}}\n\n; Articles\n* {{citation\n| editor1-last=Keidar | editor1-first=Idit\n| editor2-last=Rajsbaum | editor2-first=Sergio\n| contribution-url=http://webee.technion.ac.il/~idish/sigactNews/\n| contribution=Distributed computing column\n| title=[[ACM SIGACT News]]\n| year=2000\u20132009\n}}.\n* {{cite journal | last1 = Birrell | first1 = A. D. | last2 = Levin | first2 = R. | last3 = Schroeder | first3 = M. D. | last4 = Needham | first4 = R. M.| authorlink4 = Roger M. Needham| title = Grapevine: An exercise in distributed computing | doi = 10.1145/358468.358487 | journal = [[Communications of the ACM]]| volume = 25 | issue = 4 | pages = 260\u2013274| date=April 1982 | url=http://www.cs.ucsb.edu/~ravenben/papers/coreos/BLS+82.pdf}}\n\n; Conference Papers\n* C. Rodr\u00edguez, M. Villagra and B. Bar\u00e1n, {{doi-inline|10.1109/BIMNICS.2007.4610083|Asynchronous team algorithms for Boolean Satisfiability}}, Bionetics2007, pp.&nbsp;66\u201369, 2007.\n\n==External links==\n{{Commons category|Distributed computing}}\n* {{dmoz|Computers/Computer_Science/Distributed_Computing/|Distributed computing}}\n* {{dmoz|Computers/Computer_Science/Distributed_Computing/Publications/|Distributed computing journals}}\n\n{{Parallel computing}}\n\n{{DEFAULTSORT:Distributed Computing}}\n[[Category:Distributed computing]]"}]}}}}