{"batchcomplete":"","query":{"normalized":[{"from":"digital_signal_processor","to":"Digital signal processor"}],"pages":{"154505":{"pageid":154505,"ns":0,"title":"Digital signal processor","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{See also|Digital signal processing}}\n[[File:Dsp chip.jpg|right|thumb|A digital signal processor chip found in a [[Effects unit|guitar effects unit]].]]\n\nA '''digital signal processor''' ('''DSP''') is a specialized [[microprocessor]] (or a [[System in package|SIP block]]), with its architecture optimized for the operational needs of [[digital signal processing]].<ref>{{ cite book | editor = Yovits, M. C. |author1=Dyer, S. A. |author2=Harms, B. K. | chapter = Digital Signal Processing | title = Advances in Computers | year = 1993 | volume = 37 | pages = 104\u2013107 | publisher = Academic Press | doi = 10.1016/S0065-2458(08)60403-9 | isbn = 9780120121373 | url = https://books.google.com.sg/books?id=vL-bB7GALAwC&pg=PA104 }}</ref><ref name=\"Liptak\">{{ cite book | last = Liptak | first = B. G. | title = Process Control and Optimization | series = Instrument Engineers' Handbook | edition = 4th | year = 2006 | volume = 2 | pages = 11\u201312 | publisher = CRC Press | isbn = 9780849310812 | url = https://books.google.com/books?id=TxKynbyaIAMC&pg=PA11 }}</ref>\n\nThe goal of DSPs is usually to measure, filter and/or compress continuous real-world [[analog signals]].  Most general-purpose microprocessors can also execute digital signal processing algorithms successfully, but dedicated DSPs usually have better power efficiency thus they are more suitable in portable devices such as [[mobile phone]]s because of power consumption constraints.<ref name=\"schaum-2004\">{{cite web\n | url = http://rijndael.ece.vt.edu/schaum/papers/2004date_tut.pdf\n | title = Architectures and Design techniques for energy efficient embedded DSP and multimedia processing\n | date = 2005-12-24 | accessdate = 2014-06-11\n | author1 = Ingrid Verbauwhede | author2 = Patrick Schaumont\n | author3 = Christian Piguet | author4 = Bart Kienhuis\n | publisher = rijndael.ece.vt.edu | format = PDF\n}}</ref>  DSPs often use special memory architectures that are able to fetch multiple data and/or instructions at the same time.\n\n==Overview==\n[[Image:DSP block diagram.svg|thumb|410px|A typical digital processing system]]\n\nDigital signal processing [[algorithm]]s typically require a large number of mathematical operations to be performed quickly and repeatedly on a series of data samples.  Signals (perhaps from audio or video sensors) are constantly converted from analog to digital, manipulated digitally, and then converted back to analog form. Many DSP applications have constraints on [[latency (engineering)|latency]]; that is, for the system to work, the DSP operation must be completed within some fixed time, and deferred (or batch) processing is not viable.\n\nMost general-purpose microprocessors and operating systems can execute DSP algorithms successfully, but are not suitable for use in portable devices such as mobile phones and PDAs because of power efficiency constraints.<ref name=\"schaum-2004\" /> A specialized digital signal processor, however, will tend to provide a lower-cost solution, with better performance, lower latency, and no requirements for specialized cooling or large batteries.{{citation needed|date=February 2013}}\n\nThe architecture of a digital signal processor is optimized specifically for digital signal processing. Most also support some of the features as an applications processor or microcontroller, since signal processing is rarely the only task of a system. Some useful features for optimizing DSP algorithms are outlined below.\n\n==Architecture==\n\n===Software architecture===\n\nBy the standards of general-purpose processors, DSP instruction sets are often highly irregular; while traditional instruction sets are made up of more general instructions that allow them to perform a wider variety of operations, instruction sets optimized for digital signal processing contain instructions for common mathematical operations that occur frequently in DSP calculations. Both traditional and DSP-optimized instruction sets are able to compute any arbitrary operation but an operation that might require multiple ARM or x86 instructions to compute might require only one instruction in a DSP optimized instruction set.\n\nOne implication for software architecture is that hand-optimized [[assembly language|assembly-code]] routines are commonly packaged into libraries for re-use, instead of relying on advanced compiler technologies to handle essential algorithms.{{clarify|date=November 2015}} Even with modern compiler optimizations hand-optimized assembly code is more efficient and many common algorithms involved in DSP calculations are hand-written in order to take full advantage of the architectural optimizations.\n\n====Instruction sets====\n*[[Multiply\u2013accumulate operation|multiply\u2013accumulates]] (MACs, including [[fused multiply\u2013add]], FMA) operations\n**used extensively in all kinds of [[matrix (mathematics)|matrix]] operations\n***[[convolution]] for filtering\n***[[dot product]]\n***[[Horner scheme|polynomial evaluation]]\n**Fundamental DSP algorithms depend heavily on multiply\u2013accumulate performance\n***[[Finite impulse response|FIR filters]]\n***[[Fast Fourier transform]] (FFT)\n*Instructions to increase parallelism:\n**[[SIMD]]\n**[[VLIW]]\n**[[superscalar architecture]]\n*Specialized instructions for [[modular arithmetic|modulo]] addressing in [[circular buffer|ring buffers]] and bit-reversed addressing mode for [[Fast Fourier transform|FFT]] cross-referencing\n*Digital signal processors sometimes use [[time-stationary encoding]] to simplify hardware and increase coding efficiency.\n*Multiple arithmetic units may require memory architectures to support several accesses per instruction cycle\n*Special loop controls, such as architectural support for executing a few instruction words in a very tight loop without overhead for instruction fetches or exit testing{{clarify|date=November 2015}}\n\n====Data instructions====\n*[[Saturation arithmetic]], in which operations that produce overflows will accumulate at the maximum (or minimum) values that the register can hold rather than wrapping around (maximum+1 doesn't overflow to minimum as in many general-purpose CPUs, instead it stays at maximum). Sometimes various sticky bits operation modes are available.\n*[[Fixed-point arithmetic]] is often used to speed up arithmetic processing\n*Single-cycle operations to increase the benefits of [[pipelining]]\n\n====Program flow====\n*[[Floating-point]] unit integrated directly into the [[datapath]]\n*[[Pipeline (computing)|Pipelined]] architecture\n*Highly parallel [[multiplier\u2013accumulator]]s (MAC units)\n*Hardware-controlled [[Control flow#Loops|looping]], to reduce or eliminate the overhead required for looping operations\n\n===Hardware architecture===\n\n====Memory architecture====\n\nDSPs are usually optimized for streaming data and use special memory architectures that are able to fetch multiple data and/or instructions at the same time, such as the [[Harvard architecture]] or Modified [[von Neumann architecture]], which use separate program and data memories (sometimes even concurrent access on multiple data buses).\n\nDSPs can sometimes rely on supporting code to know about cache hierarchies and the associated delays.  This is a tradeoff that allows for better performance{{clarify|date=November 2015}}.  In addition, extensive use of [[Direct memory access|DMA]] is employed.\n\n=====Addressing and virtual memory=====\n\nDSPs frequently use multi-tasking operating systems, but have no support for [[virtual memory]] or memory protection.  Operating systems that use virtual memory require more time for [[context switching]] among [[process (computing)|processes]], which increases latency.\n\n*[[Hardware modulo addressing]]\n**Allows [[circular buffer]]s to be implemented without having to test for wrapping\n*[[Bit-reversed addressing]], a special [[addressing mode]]\n**useful for calculating FFTs\n*Exclusion of a [[memory management unit]]\n*Memory-address calculation unit\n\n==History==\n\nPrior to the advent of stand-alone DSP chips discussed below, most DSP applications were implemented using [[bit slicing|bit-slice]] processors.  The [[AMD Am2900|AMD 2901]] bit-slice chip with its family of components was a very popular choice. There were reference designs from AMD, but very often the specifics of a particular design were application specific. These bit slice architectures would sometimes include a peripheral multiplier chip. Examples of these multipliers were a series from [[TRW Inc.|TRW]] including the TDC1008 and TDC1010, some of which included an accumulator, providing the requisite [[multiply\u2013accumulate]] (MAC) function.\n\nIn 1976, Richard Wiggins proposed the [[Speak & Spell (toy)|Speak & Spell]] concept to Paul Breedlove, Larry Brantingham, and Gene Frantz at Texas Instrument's Dallas research facility.  Two years later in 1978 they produced the first Speak & Spell, with the technological centerpiece being the [[TMS5100]],<ref>{{cite web | publisher = IEEE | work = IEEE Milestones | title = Speak & Spell, the First Use of a Digital Signal Processing IC for Speech Generation, 1978 | url = http://www.ieeeghn.org/wiki/index.php/Milestones:Speak_%26_Spell,_the_First_Use_of_a_Digital_Signal_Processing_IC_for_Speech_Generation,_1978 | accessdate = 2012-03-02 }}</ref> the industry's first digital signal processor.  It also set other milestones, being the first chip to use [[Linear predictive coding]] to perform speech synthesis.<ref>{{ cite web | author = Bogdanowicz, A. | title = IEEE Milestones Honor Three | url = http://theinstitute.ieee.org/technology-focus/technology-history/ieee-milestones-honor-four476 | work = The Institute | publisher = IEEE | date = 2009-10-06 | accessdate = 2012-03-02 }}</ref>\n\nIn 1978, Intel released the 2920 as an \"analog signal processor\". It had an on-chip ADC/DAC with an internal signal processor, but it didn't have a hardware multiplier and was not successful in the market. In 1979, AMI released the [[AMI S2811|S2811]]. It was designed as a microprocessor peripheral, and it had to be initialized by the host. The S2811 was likewise not successful in the market.\n\nIn 1980 the first stand-alone, complete DSPs \u2013 the [[Nippon Electric Corporation|NEC]] [[NEC \u00b5PD7720|\u00b5PD7720]] and [[AT&T Corporation|AT&T]] [[AT&T DSP1|DSP1]] \u2013 were presented at the [[International Solid-State Circuits Conference]] '80. Both processors were inspired by the research in [[Public Switched Telephone Network|PSTN]] [[telecommunication]]s.\n\nThe Altamira DX-1 was another early DSP, utilizing quad integer pipelines with delayed branches and branch prediction.{{citation needed|reason=no mention on the web, except of WP text copies and translations|date=December 2014}}\n\nAnother DSP produced by [[Texas Instruments]] (TI), the [[Texas Instruments TMS320|TMS32010]] presented in 1983, proved to be an even bigger success. It was based on the Harvard architecture, and so had separate instruction and data memory. It already had a special instruction set, with instructions like load-and-accumulate or multiply-and-accumulate. It could work on 16-bit numbers and needed 390&nbsp;ns for a multiply\u2013add operation. TI is now the market leader in general-purpose DSPs.\n\nAbout five years later, the second generation of DSPs began to spread. They had 3 memories for storing two operands simultaneously and included hardware to accelerate [[tight loop]]s, they also had an addressing unit capable of [[loop-addressing]]. Some of them operated on 24-bit variables and a typical model only required about 21&nbsp;ns for a MAC. Members of this generation were for example the AT&T DSP16A or the [[Motorola 56000]].\n\nThe main improvement in the third generation was the appearance of application-specific units and instructions in the data path, or sometimes as coprocessors. These units allowed direct hardware acceleration of very specific but complex mathematical problems, like the Fourier-transform or matrix operations. Some chips, like the Motorola MC68356, even included more than one processor core to work in parallel. Other DSPs from 1995 are the TI TMS320C541 or the TMS 320C80.\n\nThe fourth generation is best characterized by the changes in the instruction set and the instruction encoding/decoding. SIMD extensions were added, VLIW and the superscalar architecture appeared. As always, the clock-speeds have increased, a 3&nbsp;ns MAC now became possible.\n\n==Modern DSPs==\n\nModern signal processors yield greater performance; this is due in part to both technological and architectural advancements like lower design rules, fast-access two-level cache, (E)[[Direct memory access|DMA]] circuitry and a wider bus system. Not all DSPs provide the same speed and many kinds of signal processors exist, each one of them being better suited for a specific task, ranging in price from about US$1.50 to US$300\n\n[[Texas Instruments]] produces the [[TMS320C6000|C6000]] series DSPs, which have clock speeds of 1.2&nbsp;GHz and implement separate instruction and data caches. They also have an 8 MiB 2nd level cache and 64 EDMA channels. The top models are capable of as many as 8000 MIPS ([[instructions per second]]), use VLIW ([[very long instruction word]]), perform eight operations per clock-cycle and are compatible with a broad range of external peripherals and various buses (PCI/serial/etc). TMS320C6474 chips each have three such DSPs, and the newest generation C6000 chips support floating point as well as fixed point processing.\n\n[[Freescale]] produces a multi-core DSP family, the MSC81xx. The MSC81xx is based on StarCore Architecture processors and the latest MSC8144 DSP combines four programmable SC3400 StarCore DSP cores. Each SC3400 StarCore DSP core has a clock speed of 1&nbsp;GHz.\n\n[[XMOS]] produces a multi-core multi-threaded line of processor well suited to DSP operations, They come in various speeds ranging from 400 to 1600 MIPS. The processors have a multi-threaded architecture that allows up to 8 real-time threads per core, meaning that a 4 core device would support up to 32 real time threads. Threads communicate between each other with buffered channels that are capable of up to 80 Mbit/s. The devices are easily programmable in C and aim at bridging the gap between conventional micro-controllers and FPGAs\n\n[[CEVA, Inc.]] produces and licenses three distinct families of DSPs. Perhaps the best known and most widely deployed is the CEVA-TeakLite DSP family, a classic memory-based architecture, with 16-bit or 32-bit word-widths and single or dual [[Multiply\u2013accumulate operation|MACs]]. The CEVA-X DSP family offers a combination of VLIW and SIMD architectures, with different members of the family offering dual or quad 16-bit MACs. The CEVA-XC DSP family targets [[Software-defined radio|Software-defined Radio (SDR)]] modem designs and leverages a unique combination of VLIW and Vector architectures with 32 16-bit MACs.\n\n[[Analog Devices]] produce the [[Super Harvard Architecture Single-Chip Computer|SHARC]]-based DSP and range in performance from 66&nbsp;MHz/198 [[MFLOPS]] (million floating-point operations per second) to 400&nbsp;MHz/2400 MFLOPS. Some models support multiple [[Multiplication ALU|multiplier]]s and [[Arithmetic logic unit|ALU]]s, [[SIMD]] instructions and audio processing-specific components and peripherals. The [[Blackfin]] family of embedded digital signal processors combine the features of a DSP with those of a general use processor. As a result, these processors can run simple [[operating system]]s like [[\u03bcCLinux]], velOSity and [[Nucleus RTOS]] while operating on real-time data.\n\n[[NXP Semiconductors]] produce DSPs based on [[TriMedia (mediaprocessor)|TriMedia]] [[VLIW]] technology, optimized for audio and video processing. In some products the DSP core is hidden as a fixed-function block into a [[System-on-a-chip|SoC]], but NXP also provides a range of flexible single core media processors. The TriMedia media processors support both [[fixed-point arithmetic]] as well as [[floating-point arithmetic]], and have specific instructions to deal with complex filters and entropy coding.\n\n[[CSR plc|CSR]] produces the Quatro family of SoCs that contain one or more custom Imaging DSPs optimized for processing document image data for scanner and copier applications.\n\nMost DSPs use fixed-point arithmetic, because in real world signal processing the additional range provided by floating point is not needed, and there is a large speed benefit and cost benefit due to reduced hardware complexity. Floating point DSPs may be invaluable in applications where a wide dynamic range is required. Product developers might also use floating point DSPs to reduce the cost and complexity of software development in exchange for more expensive hardware, since it is generally easier to implement algorithms in floating point.\n\nGenerally, DSPs are dedicated integrated circuits; however DSP functionality can also be produced by using [[field-programmable gate array]] chips (FPGAs).\n\nEmbedded general-purpose RISC processors are becoming increasingly DSP like in functionality. For example, the [[Texas Instruments OMAP|OMAP3]] processors include a [[ARM Cortex-A8]] and C6000 DSP.\n\nIn Communications a new breed of DSPs offering the fusion of both DSP functions and H/W acceleration function is making its way into the mainstream. Such Modem processors include [[ASOCS]] ModemX and CEVA's XC4000.\n\n==See also==\n* [[Digital signal controller]]\n* [[Graphics processing unit]]\n* [[Video processing unit]]\n* [[Vision processing unit]]\n* [[MDSP]] - a multiprocessor DSP\n* [[OpenCL]]\n\n==References==\n{{Reflist|30em}}\n\n==External links==\n*[http://www.dspguide.com DSP Online Book]\n*[http://www.bdti.com/pocket/pocket.htm Pocket Guide to Processors for DSP - Berkeley Design Technology, INC]\n{{CPU technologies}}\n{{Authority control}}\n\n[[Category:Digital signal processing]]\n[[Category:Digital signal processors|*]]\n[[Category:Integrated circuits]]\n[[Category:Software written primarily in assembly language]]"}]}}}}