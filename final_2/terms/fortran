{"batchcomplete":"","query":{"normalized":[{"from":"fortran","to":"Fortran"}],"pages":{"11168":{"pageid":11168,"ns":0,"title":"Fortran","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{Redirect|F95|the D\u00fcsseldorf-based football club|Fortuna D\u00fcsseldorf}}\n\n{{Use dmy dates|date=January 2012}}\n{{Infobox programming language\n| name                   = Fortran\n| logo                   = [[File:Fortran acs cover.jpeg|150px]]\n| logo caption           = ''The Fortran Automatic Coding System for the [[IBM 704]]'' (15 October 1956), the first Programmer's Reference Manual for Fortran\n| paradigm               = [[Multi-paradigm programming language|multi-paradigm]]: [[Structured programming|structured]], [[Imperative programming|imperative]] ([[Procedural programming|procedural]], [[Object-oriented programming|object-oriented]]), [[Generic programming|generic]]\n| year                   = {{Start date and age|1957}}\n| designer               = [[John Backus]]\n| developer              = [[John Backus]] and [[IBM]]\n| latest release version = Fortran 2008 (ISO/IEC 1539-1:2010)\n| latest release date    = {{Start date and age|2010}}\n| typing                 = [[Strong and weak typing|strong]], [[Type system|static]], [[Manifest typing|manifest]]\n| implementations        = [[Absoft Fortran Compilers|Absoft]], [[Cray]], [[GNU Fortran|GFortran]], [[G95]], [[IBM]] XL Fortran, [[Intel Fortran Compiler|Intel]], [[Hitachi]], Lahey/Fujitsu, [[Numerical Algorithms Group]], [[Watcom C compiler|Open Watcom]], [[PathScale]], [[PGI compiler|PGI]], [[Silverfrost FTN95|Silverfrost]], [[Oracle Solaris Studio]], Visual Fortran, others\n| dialects               =\n| influenced_by          = [[Speedcoding]]\n| influenced             = [[ALGOL 58]], [[BASIC]], [[C (programming language)|C]], [[Chapel (programming language)|Chapel]],<ref name=\"chplspec\">{{cite web|title=Chapel spec (Acknowledgements)|url=http://chapel.cray.com/spec/spec-0.98.pdf|date=2015-10-01|accessdate=2016-01-14|publisher=Cray Inc}}</ref> [[CMS-2 (programming language)|CMS-2]], [[Julia (programming language)|Julia]], [[PL/I]], [[PACT I]], [[MUMPS]] and [[Ratfor]]\n| operating_system       =\n| license                =\n| website                =\n| file_ext = <code>.f</code>, <code>.for</code>, <code>.f90</code>, <code>.f95</code>\n}}\n\n'''Fortran''' (formerly '''FORTRAN''', derived from \"Formula Translation\"<ref>{{cite web\n | url = http://www.thefreedictionary.com/FORTRAN\n | title = FORTRAN\n | work = American Heritage Dictionary of the English Language\n | publisher = The Free Dictionary\n | edition = 5\n | year = 2011\n | accessdate = 2016-02-08\n }}</ref>) is a general-purpose, [[imperative programming|imperative]] [[programming language]] that is especially suited to [[numerical analysis|numeric computation]] and [[Computational science|scientific computing]]. Originally developed by [[IBM]]<ref name=\"Where\">{{cite web |url= http://www.softwarepreservation.org/projects/FORTRAN/paper/p25-backus.pdf |author=John Backus |title=The history of FORTRAN I, II and III |publisher= Softwarepreservation.org |accessdate=19 November 2014}}</ref> in the 1950s for scientific and engineering applications, Fortran came to dominate this area of programming early on and has been in continuous use for over half a century in computationally intensive areas such as [[numerical weather prediction]], [[finite element method|finite element analysis]], [[computational fluid dynamics]], [[computational physics]], [[crystallography]] and [[computational chemistry]]. It is a popular language for [[high-performance computing]]<ref name=hpc>{{cite journal |url= http://queue.acm.org/detail.cfm?id=1820518 |author=Eugene Loh |title=The Ideal HPC Programming Language |journal=Queue |date=18 June 2010 |publisher= Association of Computing Machines |volume=8 |issue=6}}</ref> and is used for programs that benchmark and rank the world's [[TOP500|fastest supercomputers]].<ref>{{cite web|title = HPL \u2013 <!--ndash ok here as substitute for hyphen?--> A Portable Implementation of the High-Performance Linpack Benchmark for Distributed-Memory Computers | accessdate = 2015-02-21 | url = http://www.netlib.org/benchmark/hpl}}</ref>\n\nFortran encompasses a lineage of versions, each of which evolved to add extensions to the language while usually retaining compatibility with prior versions.  Successive versions have added support for [[structured programming]]\nand processing of character-based data (FORTRAN 77), [[array programming]], [[modular programming]] and [[generic programming]] (Fortran 90), [[High Performance Fortran|high performance Fortran]] (Fortran 95), [[object-oriented programming]] (Fortran 2003) and [[concurrent programming]] (Fortran 2008).\n\n== Naming ==\n\nThe names of earlier versions of the language through FORTRAN 77 were conventionally spelled in all-capitals (FORTRAN 77 was the last version in which the use of lowercase letters in keywords was strictly non-standard).  The capitalization has been dropped in referring to newer versions beginning with Fortran 90. The official language [[international standard|standards]] now refer to the language as \"Fortran\" rather than all-caps \"FORTRAN\".\n\n==History==\n[[File:IBM 704 mainframe.gif|right|thumb|320px|An [[IBM 704]] [[mainframe computer]]]]\n\nIn late 1953, [[John Backus|John W. Backus]] submitted a proposal to his superiors at [[IBM]] to develop a more practical alternative to [[assembly language]] for programming their [[IBM 704]] mainframe computer. Backus' historic FORTRAN team consisted of programmers Richard Goldberg, Sheldon F. Best, Harlan Herrick, Peter Sheridan, [[Roy Nutt]], Robert Nelson, Irving Ziller, [[Lois Haibt]], and [[David Sayre]].<ref>{{cite web|url=http://www.softwarepreservation.org/projects/FORTRAN/index.html#By_FORTRAN_project_members|title=Softwarepreservation.org|publisher=|accessdate=22 September 2014}}</ref>  Its concepts included easier entry of equations into a computer, an idea developed by [[J. Halcombe Laning]] and demonstrated in the [[Laning and Zierler system]] of 1952.<ref>Mindell, David, Digital Apollo, MIT Press, Cambridge MA, 2008, p.99</ref>\n\nA draft specification for ''The IBM Mathematical Formula Translating System'' was completed by mid-1954.  The first manual for FORTRAN appeared in October 1956, with the first FORTRAN [[compiler]] delivered in April 1957.  This was the first [[optimizing compiler]], because customers were reluctant to use a [[high-level programming language]] unless its compiler could generate code with performance comparable to that of hand-coded assembly language.<ref>[http://polaris.cs.uiuc.edu/publications/c1070.pdf The Fortran I Compiler] \"The Fortran I compiler was the first major project in code optimization. It tackled problems of crucial importance whose general solution was an important research focus in compiler technology for several decades. Many classical techniques for compiler analysis and optimization can trace their origins and inspiration to the Fortran I compiler.\"</ref>\n\nWhile the community was skeptical that this new method could possibly outperform hand-coding, it reduced the number of programming [[Statement (programming)|statements]] necessary to operate a machine by a factor of 20, and quickly gained acceptance.  John Backus said during a 1979 interview with ''Think'', the IBM employee magazine, \"Much of my work has come from being lazy. I didn't like writing programs, and so, when I was working on the [[IBM 701]], writing programs for computing missile trajectories, I started work on a programming system to make it easier to write programs.\"<ref>{{cite web|url=http://www.msnbc.msn.com/id/17704662/|title=Fortran creator John Backus dies|work=msnbc.com|accessdate=19 November 2014}}</ref>\n\nThe language was widely adopted by scientists for writing numerically intensive programs, which encouraged compiler writers to produce compilers that could generate faster and more efficient code.  The inclusion of a [[complex data type|complex number data type]] in the language made Fortran especially suited to technical applications such as electrical engineering.\n\nBy 1960, versions of FORTRAN were available for the [[IBM 709]], [[IBM 650|650]], [[IBM 1620|1620]], and [[IBM 7090|7090]] computers.  Significantly, the increasing popularity of FORTRAN spurred competing computer manufacturers to provide FORTRAN compilers for their machines, so that by 1963 over 40 FORTRAN compilers existed.  For these reasons, FORTRAN is considered to be the first widely used <!--[[cross-platform]] is NOT a well-defined term! --> programming language supported across a variety of computer architectures.\n\nThe development of FORTRAN paralleled the [[History of compiler writing|early evolution of compiler technology]], and many advances in the theory and design of [[compiler]]s were specifically motivated by the need to generate efficient code for FORTRAN programs.\n\n===FORTRAN===\nThe initial release of FORTRAN for the IBM 704 contained 32 [[Statement (programming)|statements]], including:\n\n* <code>DIMENSION</code> and <code>EQUIVALENCE</code> statements\n* Assignment statements\n* Three-way [[Arithmetic IF|''arithmetic'' <code>IF</code>]] statement, which passed control to one of three locations in the program depending on whether the result of the arithmetic statement was negative, zero, or positive\n* <code>IF</code> statements for checking exceptions (<code>ACCUMULATOR OVERFLOW</code>, <code>QUOTIENT OVERFLOW</code>, and <code>DIVIDE CHECK</code>); and <code>IF</code> statements for manipulating [[front panel|sense switches and sense lights]]\n* <code>GO TO</code>, computed <code>GO TO</code>, <code>ASSIGN</code>, and assigned <code>GO TO</code>\n* <code>DO</code> loops\n* Formatted I/O: <code>FORMAT</code>, <code>READ</code>, <code>READ INPUT TAPE</code>, <code>WRITE</code>, <code>WRITE OUTPUT TAPE</code>, <code>PRINT</code>, and <code>PUNCH</code>\n* Unformatted I/O: <code>READ TAPE</code>, <code>READ DRUM</code>, <code>WRITE TAPE</code>, and <code>WRITE DRUM</code>\n* Other I/O: <code>END FILE</code>, <code>REWIND</code>, and <code>BACKSPACE</code>\n* <code>PAUSE</code>, <code>STOP</code>, and <code>CONTINUE</code>\n* <code>FREQUENCY</code> statement (for providing [[optimization (computer science)|optimization]] hints to the compiler).\n\nThe arithmetic <code>IF</code> statement was similar to a three-way branch instruction on the IBM 704. However, the 704 branch instructions all contained only one destination address (e.g., TZE{{snd}} Transfer AC Zero, TNZ{{snd}} Transfer AC Not Zero, TPL{{snd}} Transfer AC Plus, TMI{{snd}} Transfer AC Minus). The machine (and its successors in the [[IBM 700/7000 series#Scientific Architecture (704/709/7090/7094)|700/7000 series]]) did have a three-way ''skip'' instruction (CAS{{snd}} Compare AC with Storage), but using this instruction to implement the <code>IF</code> would consume 4 instruction words, require the constant Zero in a word of storage, and take 3 machine cycles to execute; using the Transfer instructions to implement the <code>IF</code> could be done in 1 to 3 instruction words, required no constants in storage, and take 1 to 3 machine cycles to execute. An optimizing compiler like FORTRAN would most likely select the more compact and usually faster Transfers instead of the Compare (use of Transfers also allowed the <code>FREQUENCY</code> statement to optimize <code>IF</code>s, which could not be done using the Compare). Also the Compare considered \u22120 and +0 to be different values while the Transfer Zero and Transfer Not Zero considered them to be the same.\nThe <code>FREQUENCY</code> statement in FORTRAN was used originally (and optionally) to give branch probabilities for the three branch cases of the arithmetic IF statement. The first FORTRAN compiler used this weighting to perform ''at compile time'' a [[Monte Carlo method|Monte Carlo simulation]] of the generated code, the results of which were used to optimize the placement of basic blocks in memory{{snd}} a very sophisticated optimization for its time. The Monte Carlo technique is documented in Backus et al.'s paper on this original implementation, ''The FORTRAN Automatic Coding System'':\n\n<blockquote>\nThe fundamental unit of program is the [[basic block]]; a basic block is a stretch of program which has one entry point and one exit point. The purpose of section 4 is to prepare for section 5 a table of predecessors (PRED table) which enumerates the basic blocks and lists for every basic block each of the basic blocks which can be its immediate predecessor in flow, together with the absolute frequency of each such basic block link. This table is obtained by running the program once in Monte-Carlo fashion, in which the outcome of conditional transfers arising out of IF-type statements and computed GO TO'S is determined by a random number generator suitably weighted according to whatever FREQUENCY statements have been provided.<ref name=\"Backus57\">{{Cite journal |last=Backus |first=J. W. |author2=H. Stern, I. Ziller, R. A. Hughes, R. Nutt, R. J. Beeber, S. Best, R. Goldberg, L. M. Haibt, H. L. Herrick, R. A. Nelson, D. Sayre, P. B. Sheridan |year=1957 |title=The FORTRAN Automatic Coding System |journal=Western joint computer conference: Techniques for reliability |publisher=[[Institute of Radio Engineers]], [[American Institute of Electrical Engineers]], [[Association for Computing Machinery|ACM]] |location=Los Angeles, California |pages=188\u2013198 |doi= 10.1145/1455567.1455599}} Online at [http://www.softwarepreservation.org/projects/FORTRAN/paper/BackusEtAl-FortranAutomaticCodingSystem-1957.pdf], [http://archive.computerhistory.org/resources/text/Fortran/102663113.05.01.acc.pdf]</ref>\n</blockquote>\n\nMany years later, the <code>FREQUENCY</code> statement had no effect on the code, and was treated as a comment statement, since the compilers no longer did this kind of compile-time simulation. A similar fate has befallen ''compiler hints'' in several other programming languages; for example [[C (programming language)|C]]'s [[register keyword|<code>register</code> keyword]].{{citation needed|date=September 2013}}\n\n==== Fixed layout and punched cards ====\n[[File:FortranCardPROJ039.agr.jpg|thumb|FORTRAN code on a [[punched card]], showing the specialized uses of columns 1\u20135, 6 and 73\u201380]]\n{{see|Computer programming in the punched card era}}\n\nBefore the development of disk files, text editors and terminals, programs were most often entered on a [[keypunch]] keyboard onto 80-column [[punched card]]s, one line to a card. The resulting deck of cards would be fed into a card reader to be compiled. Punched-card codes included no lower-case letters or many special characters, and special versions of the IBM 026 keypunch were offered that would correctly print the repurposed special characters used in Fortran.\n\nReflecting punched-card input practice, Fortran programs were originally written in a fixed-column format, with the first 72 columns read into twelve 36-bit words.\n\nA letter \"C\" in column 1 caused the entire card to be treated as a comment and ignored by the compiler. Otherwise, the columns of the card were divided into four fields:\n* 1 to 5 were the label field: a sequence of digits here was taken as a label for use in DO or GO TO control statements, or to refer to a FORMAT in a WRITE or READ statement. \n* 6 was a continuation field: a character other than a blank or a zero here caused the card to be taken as a continuation of the statement on the prior card. \n* 7 to 72 served as the statement field. \n* 73 to 80 were ignored (the IBM 704's [[IBM 711|card reader]] only used 72 columns).<ref>[http://www.mirrorservice.org/sites/www.bitsavers.org/pdf/ibm/7090/22-6528-4_7090Manual.pdf Reference Manual, IBM 7090 Data Processing System], 1961, IBM A22-6528-3.</ref>\n\nColumns 73 to 80 could therefore be used for identification information, such as punching a sequence number, which could be used to re-order cards if a stack of cards was dropped; though in practice this was reserved for stable, production programs. An [[IBM 519]] could be used to copy a program deck and add sequence numbers. Some early compilers, e.g., the IBM 650's, had additional restrictions due to limitations on their card readers.<ref>{{cite web |url= http://www.bitsavers.org/pdf/ibm/fortran/F28-8074-3_FORTRANII_GenInf.pdf |format=PDF |publisher=Bitsavers.org |title=Fortran II User Manual |accessdate=19 November 2014}}</ref> Keypunches could be programmed to tab to column 7 and skip out after column 72. Later compilers relaxed most fixed-format restrictions, and the requirement was eliminated in the Fortran 90 standard.\n\nWithin the statement field, [[whitespace characters]] (blanks) were ignored outside a text literal. This allowed omitting spaces between tokens for brevity or including spaces within identifiers for clarity. For example, <syntaxhighlight lang=\"fortran\" inline>AVG OF X</syntaxhighlight> was a valid identifier, equivalent to <syntaxhighlight lang=\"fortran\" inline>AVGOFX</syntaxhighlight>, and <syntaxhighlight lang=\"fortran\" inline>101010DO101I=1,101</syntaxhighlight> was a valid statement, equivalent to \n<syntaxhighlight lang=\"fortranfixed\" inline>10101    DO 101   I = 1, 101</syntaxhighlight> because the zero in column 6 is treated as if it were a space (!), while <syntaxhighlight lang=\"fortran\" inline>101010DO101I=1.101</syntaxhighlight> was instead <syntaxhighlight lang=\"fortranfixed\" inline>10101    DO101I = 1.101</syntaxhighlight>, the assignment of 1.101 to a variable called <syntaxhighlight lang=\"fortran\" inline>DO101I</syntaxhighlight>. Note the slight visual difference between a comma and a period.\n\n[[Hollerith string]]s, originally allowed only in FORMAT and DATA statements, were prefixed by a character count and the letter H (e.g., <syntaxhighlight lang=\"fortran\" inline>26HTHIS IS ALPHANUMERIC DATA.</syntaxhighlight>), allowing blanks to be retained within the character string. Miscounts were a problem.\n\n===FORTRAN II===\nIBM's ''FORTRAN II'' appeared in 1958.  The main enhancement was to support [[procedural programming]] by allowing user-written subroutines and functions which returned values, with parameters passed by [[Call by reference#Call by reference|reference]].  The COMMON statement provided a way for subroutines to access common (or [[global variable|global]]) variables. Six new statements were introduced:\n\n* <code>SUBROUTINE</code>, <code>FUNCTION</code>, and <code>END</code>\n* <code>CALL</code> and <code>RETURN</code>\n* <code>COMMON</code>\n\nOver the next few years, FORTRAN II would also add support for the <code>DOUBLE PRECISION</code> and <code>COMPLEX</code> data types.\n\nEarly FORTRAN compilers supported no [[Recursion (computer science)|recursion]] in subroutines. Early computer architectures supported no concept of a stack, and when they did directly support subroutine calls, the return location was often stored in one fixed location adjacent to the subroutine code, which does not permit a subroutine to be called again before a prior call of the subroutine has returned. Although not specified in Fortran 77, many F77 compilers supported recursion as an option, while it became a standard in Fortran 90.<ref>{{cite web |url= http://www.ibiblio.org/pub/languages/fortran/ch1-12.html |title=Ibibilio.org |publisher=Ibiblio.org |accessdate=15 September 2014}}</ref>\n\n====Simple FORTRAN II program====\nThis program, for [[Heron's formula]], reads data on a tape reel containing three 5-digit integers A, B, and C as input. If A, B, and C cannot represent the sides of a triangle in plane geometry, then the program's execution will end with an error code of \"STOP 1\".  Otherwise, an output line will be printed showing the input values for A, B, and C, followed by the computed AREA of the triangle as a floating-point number with 2 digits after the decimal point.\n\n<syntaxhighlight lang=\"fortranfixed\">\nC AREA OF A TRIANGLE WITH A STANDARD SQUARE ROOT FUNCTION\nC INPUT - TAPE READER UNIT 5, INTEGER INPUT\nC OUTPUT - LINE PRINTER UNIT 6, REAL OUTPUT\nC INPUT ERROR DISPLAY ERROR OUTPUT CODE 1 IN JOB CONTROL LISTING\n      READ INPUT TAPE 5, 501, IA, IB, IC\n  501 FORMAT (3I5)\nC IA, IB, AND IC MAY NOT BE NEGATIVE\nC FURTHERMORE, THE SUM OF TWO SIDES OF A TRIANGLE\nC MUST BE GREATER THAN THE THIRD SIDE, SO WE CHECK FOR THAT, TOO\n      IF (IA) 777, 777, 701\n  701 IF (IB) 777, 777, 702\n  702 IF (IC) 777, 777, 703\n  703 IF (IA+IB-IC) 777, 777, 704\n  704 IF (IA+IC-IB) 777, 777, 705\n  705 IF (IB+IC-IA) 777, 777, 799\n  777 STOP 1\nC USING HERON'S FORMULA WE CALCULATE THE\nC AREA OF THE TRIANGLE\n  799 S = FLOATF (IA + IB + IC) / 2.0\n      AREA = SQRTF( S * (S - FLOATF(IA)) * (S - FLOATF(IB)) *\n     +     (S - FLOATF(IC)))\n      WRITE OUTPUT TAPE 6, 601, IA, IB, IC, AREA\n  601 FORMAT (4H A= ,I5,5H  B= ,I5,5H  C= ,I5,8H  AREA= ,F10.2,\n     +        13H SQUARE UNITS)\n      STOP\n      END\n</syntaxhighlight>\n\n===FORTRAN III===\n[[File:FortranCodingForm.png|thumb|right|300px|A FORTRAN coding form, printed on paper and intended to be used by programmers to prepare programs for punching onto cards by [[keypunch]] operators.  Now obsolete.]]\nIBM also developed a ''FORTRAN III'' in 1958 that allowed for inline assembly code among other features; however, this version was never released as a product.  Like the 704 FORTRAN and FORTRAN II, FORTRAN III included machine-dependent features that made code written in it unportable from machine to machine.  Early versions of FORTRAN provided by other vendors suffered from the same disadvantage.\n\n===IBM 1401 FORTRAN===\nFORTRAN was provided for the IBM 1401 computer by an innovative 63-phase compiler that ran entirely in its [[Magnetic core memory|core memory]] of only 8000 (6-bit) characters.  The compiler could be run from tape, or from a 2200-card deck; it used no further tape or disk storage.  It kept the program in memory and loaded [[Overlay (programming)|overlays]] that gradually transformed it, in place, into executable form, as described by Haines.<ref>{{cite journal\n| first = L. H.\n| last = Haines\n| title = Serial compilation and the 1401 FORTRAN compiler\n| journal = IBM Systems Journal\n| volume = 4\n| issue = 1\n| year = 1965\n| pages = 73\u201380\n| url = http://domino.research.IBM.com/tchjr/journalindex.nsf/495f80c9d0f539778525681e00724804/cde711e5ad6786e485256bfa00685a03?OpenDocument\n| doi = 10.1147/sj.41.0073\n}} This article was reprinted, edited, in both editions of {{cite book | first = John A. N. | last = Lee | title = Anatomy of a Compiler | publisher = Van Nostrand Reinhold | date = 1967}}</ref> and in [http://www.bitsavers.org/pdf/ibm/140x/C24-1455-2_Fortran_Specifications_and_Operating_Procedures_Apr65.pdf IBM document C24-1455].  The executable form was not entirely [[machine language]]; rather, floating-point arithmetic, subscripting, input/output, and function references were interpreted, anticipating [[UCSD Pascal]] [[P-code machine#UCSD p-Machine|P-code]] by two decades.\n\nIBM later provided a FORTRAN IV compiler for the 1400 series of computers, described in [http://www.bitsavers.org/pdf/ibm/140x/C24-3322-2_Fortran_IV_Language_Specifications_IBM_1401_1440_1460_Apr66.pdf IBM document C24-3322].\n\n===FORTRAN IV===\nStarting in 1961, as a result of customer demands, IBM began development of a ''FORTRAN IV'' that removed the machine-dependent features of FORTRAN II (such as <code>READ INPUT TAPE</code>), while adding new features such as a [[Boolean data type|<code>LOGICAL</code> data type]], logical [[Boolean expression]]s and the ''logical IF statement'' as an alternative to the ''arithmetic IF statement.''  FORTRAN IV was eventually released in 1962, first for the [[IBM 7030 Stretch|IBM 7030]] (\"Stretch\") computer, followed by versions for the [[IBM 7090]], [[IBM 7090|IBM 7094]], and later for the [[IBM 1401]] in 1966.\n\nBy 1965, FORTRAN IV was supposed to be compliant with the ''standard'' being developed by the [[American National Standards Institute|American Standards Association]] X3.4.3 FORTRAN Working Group.<ref name=\"McCracken\">{{cite book|last=McCracken|first=Daniel D.|title=A Guide to FORTRAN IV Programming|year=1965|publisher=Wiley|location=New York|isbn=0-471-58281-6|page=v|chapter=Preface}}</ref>\n\nAt about this time FORTRAN IV had started to become an important educational tool and implementations such as the University of Waterloo's WATFOR and [[WATFIV]] were created to simplify the complex compile and link processes of earlier compilers.\n\n===FORTRAN 66===\nPerhaps the most significant development in the early history of FORTRAN was the decision by the ''American Standards Association'' (now [[American National Standards Institute]] (ANSI)) to form a committee sponsored by BEMA, the Business Equipment Manufacturers Association, to develop an ''American Standard Fortran''.  The resulting two standards, approved in March 1966, defined two languages, ''FORTRAN'' (based on FORTRAN IV, which had served as a de facto standard), and ''Basic FORTRAN'' (based on FORTRAN II, but stripped of its machine-dependent features).  The FORTRAN defined by the first standard, officially denoted X3.9-1966, became known as ''FORTRAN 66'' (although many continued to term it FORTRAN IV, the language on which the standard was largely based).  FORTRAN 66 effectively became the first industry-standard version of FORTRAN. FORTRAN 66 included:\n\n* Main program, <code>SUBROUTINE</code>, <code>FUNCTION</code>, and <code>BLOCK DATA</code> program units\n* <code>INTEGER</code>, <code>REAL</code>, <code>DOUBLE PRECISION</code>, <code>COMPLEX</code>, and <code>LOGICAL</code> [[data type]]s\n* <code>COMMON</code>, <code>DIMENSION</code>, and <code>EQUIVALENCE</code> statements\n* <code>DATA</code> statement for specifying initial values\n* [[Intrinsic function|Intrinsic]] and <code>EXTERNAL</code> (e.g., library) functions\n* Assignment statement\n* <code>GO TO</code>, computed <code>GO TO</code>, assigned <code>GO TO</code>, and <code>ASSIGN</code> statements\n* Logical <code>IF</code> and arithmetic (three-way) <code>IF</code> statements\n* <code>DO</code> loop statement\n* <code>READ</code>, <code>WRITE</code>, <code>BACKSPACE</code>, <code>REWIND</code>, and <code>ENDFILE</code> statements for sequential I/O\n* <code>FORMAT</code> statement and assigned format\n* <code>CALL</code>, <code>RETURN</code>, <code>PAUSE</code>, and <code>STOP</code> statements\n* [[Hollerith constant]]s in <code>DATA</code> and <code>FORMAT</code> statements, and as arguments to procedures\n* Identifiers of up to six characters in length\n* Comment lines\n* <code>END</code> line\n\n===FORTRAN 77===\n[[File:Ftn-elim-1240x1709.jpg|thumb|FORTRAN-77 program with compiler output, written on a\n[[Control Data Corporation|CDC]] [[CDC Cyber|175]] at [[RWTH Aachen University]], Germany, in 1987]]\n\n[[File:4.3 BSD UWisc VAX Emulation f77 Manual.png|thumb|[[4.3BSD|4.3 BSD]] for the [[Digital Equipment Corporation]] (DEC) [[VAX]], displaying the [[man page|manual]] for FORTRAN 77 (f77) compiler]]\n\nAfter the release of the FORTRAN 66 standard, compiler vendors introduced several extensions to ''Standard Fortran'', prompting ANSI committee X3J3 in 1969 to begin work on revising the 1966 standard, under sponsorship of  [[CBEMA]], the Computer Business Equipment Manufacturers Association (formerly BEMA).  Final drafts of this revised standard circulated in 1977, leading to formal approval of the new FORTRAN standard in April 1978.  The new standard, called ''FORTRAN 77'' and officially denoted X3.9-1978, added a number of significant features to address many of the shortcomings of FORTRAN 66:\n\n* Block <code>IF</code> and <code>END IF</code> statements, with optional <code>ELSE</code> and <code>ELSE IF</code> clauses, to provide improved language support for [[structured programming]]\n* <code>DO</code> loop extensions, including parameter expressions, negative increments, and zero trip counts\n* <code>OPEN</code>, <code>CLOSE</code>, and <code>INQUIRE</code> statements for improved I/O capability\n* Direct-access file I/O\n* <code>IMPLICIT</code> statement, to override implicit conventions that undeclared variables are INTEGER if their name begins with I, J, K, L, M, or N (and REAL otherwise)\n* <code>CHARACTER</code> data type, replacing Hollerith strings with vastly expanded facilities for character input and output and processing of character-based data\n* <code>PARAMETER</code> statement for specifying constants\n* <code>SAVE</code> statement for persistent local variables\n* Generic names for intrinsic functions (e.g. <code>SQRT</code> also accepts arguments of other types, such as <code>COMPLEX</code> or <code>REAL*16</code> ).\n* A set of intrinsics (<CODE>LGE, LGT, LLE, LLT</CODE>) for <U>lexical</U> comparison of strings, based upon the [[ASCII]] [[collating sequence]]. (These ASCII functions were demanded by the [[United States Department of Defense|U.S. Department of Defense]], in their conditional approval vote.{{Citation needed|date=October 2011}})\n\nIn this revision of the standard, a number of features were removed or altered in a manner that might invalidate formerly standard-conforming programs.\n''(Removal was the only allowable alternative to X3J3 at that time, since the concept of \"[[deprecation]]\" was not yet available for ANSI standards.)''\nWhile most of the 24 items in the conflict list (see Appendix A2 of X3.9-1978) addressed loopholes or pathological cases permitted by the prior standard but rarely used, a small number of specific capabilities were deliberately removed, such as:\n\n* [[Hollerith constant]]s and [[Herman Hollerith|Hollerith]] data, such as <syntaxhighlight lang=\"fortran\" inline>      GREET = 12HHELLO THERE!</syntaxhighlight>\n* Reading into an H edit (Hollerith field) descriptor in a FORMAT specification\n* Overindexing of array bounds by subscripts <syntaxhighlight lang=\"fortranfixed\">\n      DIMENSION A(10,5)\n      Y=  A(11,1)\n</syntaxhighlight>\n* Transfer of control out of and back into the range of a DO loop (also known as \"Extended Range\")\n\n====Variants: Minnesota FORTRAN====\n[[Control Data Corporation]] computers had another version of FORTRAN 77, called Minnesota FORTRAN (MNF), designed especially for student use, with variations in output constructs, special uses of COMMONs and DATA statements, optimizations code levels for compiling, and detailed error listings, extensive warning messages, and debugs.<ref>{{cite web|url=http://www.chilton-computing.org.uk/acd/literature/reports/p008.htm|title=FORTRAN Compilers and Loaders|publisher=Chilton-programming.org.uk|accessdate=19 November 2014}}</ref>\n\n===Transition to ANSI Standard Fortran===\nThe development of a revised standard to succeed FORTRAN 77 would be repeatedly delayed as the standardization process struggled to keep up with rapid changes in computing and programming practice.  In the meantime, as the \"Standard FORTRAN\" for nearly fifteen years, FORTRAN 77 would become the historically most important dialect.\n\nAn important practical extension to FORTRAN 77 was the release of MIL-STD-1753 in 1978.<ref>{{cite book\n  | last = Mil-std-1753\n  | title = DoD Supplement to X3.9-1978\n  | publisher = [[United States Government Printing Office]]\n  | url = http://www.fortran.com/fortran/mil_std_1753.html\n  }}</ref> This specification, developed by the [[United States Department of Defense|U.S. Department of Defense]], standardized a number of features implemented by most FORTRAN 77 compilers but not included in the ANSI FORTRAN 77 standard. These features would eventually be incorporated into the Fortran 90 standard.\n\n* <code>DO WHILE</code> and <code>END DO</code> statements\n* <code>INCLUDE</code> statement\n* <code>IMPLICIT NONE</code> variant of the <code>IMPLICIT</code> statement\n* [[Bit manipulation]] intrinsic functions, based on similar functions included in [[Industrial Real-Time Fortran|Industrial Real-Time Fortran (ANSI/ISA S61.1 (1976))]]\n\nThe [[Institute of Electrical and Electronics Engineers|IEEE]] 1003.9 [[POSIX]] Standard, released in 1991, provided a simple means for FORTRAN 77 programmers to issue POSIX system calls.<ref>{{cite book\n  | last = Posix 1003.9-1992\n  | title = POSIX FORTRAN 77 Language Interface \u2013 Part 1: Binding for System Application Program Interface '''API'''\n  | url = http://standards.ieee.org/reading/ieee/std_public/description/posix/1003.9-1992_desc.html\n  | publisher = [[IEEE]]\n  | accessdate = 19 November 2014\n  }}</ref> Over 100 calls were defined in the document{{snd}} allowing access to POSIX-compatible process control, signal handling, file system control, device control, procedure pointing, and stream I/O in a portable manner.\n\n===Fortran 90===\nThe much delayed successor to FORTRAN 77, informally known as ''Fortran 90'' (and prior to that, ''Fortran 8X''), was finally released as ISO/IEC standard 1539:1991 in 1991 and an ANSI Standard in 1992.  In addition to changing the official spelling from FORTRAN to Fortran, this major revision added many new features to reflect the significant changes in programming practice that had evolved since the 1978 standard:\n\n* [[free-form language|Free-form source input]], also with lowercase Fortran keywords\n* Identifiers up to 31 characters in length (In the previous standard, it was only 6 characters).\n* Inline comments\n* Ability to operate on arrays (or array sections) as a whole, thus greatly simplifying math and engineering computations.\n** whole, partial and masked array assignment statements and array expressions, such as &nbsp; <CODE> X(1:N)=R(1:N)*COS(A(1:N)) </CODE>\n** <code>WHERE</code> statement for selective array assignment\n** array-valued constants and expressions,\n** user-defined array-valued functions and array constructors.\n* [[recursion (computer science)|<code>RECURSIVE</code>]] procedures\n* [[Modular programming|Modules]], to group related [[Subroutine|procedures]] and data together, and make them available to other program units, including the capability to limit the accessibility to only specific parts of the module.\n* A vastly improved argument-passing mechanism, allowing [[type signature|interfaces]] to be checked at compile time\n* User-written interfaces for generic procedures\n* [[Operator overloading]]\n* Derived (structured) data types\n* New data type declaration syntax, to specify the data type and other attributes of variables\n* [[Dynamic memory allocation]] by means of the <code>ALLOCATABLE</code> attribute and the <code>ALLOCATE</code> and <code>DEALLOCATE</code> statements\n* [[Pointer (computer programming)|<code>POINTER</code>]] attribute, pointer assignment, and <code>NULLIFY</code> statement to facilitate the creation and manipulation of dynamic [[data structure]]s\n* Structured looping constructs, with an <CODE>END DO</CODE> statement for loop termination, and <code>EXIT</code> and <code>CYCLE</code> statements for terminating normal <code>DO</code> loop iterations in an orderly way\n* <code>SELECT</code> . . . <code>CASE</code> construct for multi-way selection\n* Portable specification of numerical precision under the user's control\n* New and enhanced intrinsic procedures.\n\n====Obsolescence and deletions====\nUnlike the prior revision, Fortran 90 removed no features. ''(Appendix B.1 says, \"The list of deleted features in this standard is empty.\")'' Any standard-conforming FORTRAN 77 program is also standard-conforming under Fortran 90, and either standard should be usable to define its behavior.\n\nA small set of features were identified as \"obsolescent\"\nand expected to be removed in a future standard.\n{| class=\"wikitable\"\n|-\n! Obsolescent feature\n! Example\n! Status/fate in Fortran 95\n|-\n| Arithmetic IF-statement\n| <syntaxhighlight lang=\"fortranfixed\">\n      IF (X) 10, 20, 30\n</syntaxhighlight>\n|\n|-\n| Non-integer DO parameters or control variables\n| <syntaxhighlight lang=\"fortranfixed\">\n      DO 9 X= 1.7, 1.6, -0.1\n</syntaxhighlight>\n| Deleted\n|-\n| Shared DO-loop termination or <br />termination with a statement <br />other than END DO or CONTINUE &nbsp;\n| <syntaxhighlight lang=\"fortranfixed\">\n      DO 9 J= 1, 10\n          DO 9 K= 1, 10\n  9       L=  J + K\n</syntaxhighlight>\n|\n|-\n| Branching to END IF <br />\nfrom outside a block\n| <syntaxhighlight lang=\"fortranfixed\">\n 66   GO TO 77 ; . . .\n      IF (E) THEN ;     . . .\n 77   END IF\n</syntaxhighlight>\n| Deleted\n|-\n| Alternate return\n| <syntaxhighlight lang=\"fortranfixed\">\n      CALL SUBR( X, Y *100, *200 )\n</syntaxhighlight>\n|\n|-\n|    PAUSE statement\n| <syntaxhighlight lang=\"fortranfixed\">\n      PAUSE 600\n</syntaxhighlight>\n| Deleted\n|-\n|    ASSIGN statement <br /> &nbsp; and assigned GO TO statement\n| <syntaxhighlight lang=\"fortranfixed\">\n 100   . . .\n      ASSIGN 100 TO H\n       . . .\n      GO TO H . . .\n</syntaxhighlight>\n| Deleted\n|-\n| Assigned FORMAT specifiers\n| <syntaxhighlight lang=\"fortranfixed\">\n      ASSIGN 606 TO F ... WRITE ( 6, F )...\n</syntaxhighlight>\n| Deleted\n|-\n| H edit descriptors\n| <syntaxhighlight lang=\"fortranfixed\">\n 606  FORMAT ( 9H1GOODBYE. )\n</syntaxhighlight>\n| Deleted\n|-\n| Computed GO TO statement\n| <syntaxhighlight lang=\"fortranfixed\">\n      GO TO (10, 20, 30, 40), index\n</syntaxhighlight>\n| (obsolete)\n|-\n| Statement functions\n| <syntaxhighlight lang=\"fortranfixed\">\n      FOIL( X, Y )=  X**2 + 2*X*Y + Y**2\n</syntaxhighlight>\n| (obsolete)\n|-\n| DATA statements <br /> &nbsp; among executable statements\n| <syntaxhighlight lang=\"fortranfixed\">\n      X= 27.3\n      DATA  A, B, C  / 5.0, 12.0, 13.0 /\n      . . .\n</syntaxhighlight>\n| (obsolete)\n|-\n| CHARACTER* form of CHARACTER declaration\n| <syntaxhighlight lang=\"fortranfixed\">\n      CHARACTER*8 STRING   ! Use CHARACTER(8)\n</syntaxhighlight>\n| (obsolete)\n|-\n| Assumed character length functions\n| <syntaxhighlight lang=\"fortranfixed\">\n      CHARACTER*(*) STRING\n</syntaxhighlight>\n| (obsolete)<ref name=assume>{{cite web|title=Fortran Variable Declarations|url=http://h21007.www2.hp.com/portal/download/files/unprot/fortran/docs/lrm/lrm0085.htm|work=Compaq Fortran|publisher=Compaq Computer Corporation| location=Texas, Huston, US|year=1999|quote=The form CHARACTER*(*) is an obsolescent feature in Fortran 95.|accessdate=19 November 2014}}</ref>\n|-\n| Fixed form source code\n| Column 1 contains C or * or ! for comments.<br /> Column 6 for continuation.\n| (obsolete)\n|}\n\n====\"Hello world\" example====\n<syntaxhighlight lang=\"fortran\">\nprogram helloworld\n     print *, \"Hello world!\"\nend program helloworld \n</syntaxhighlight>\n\n===Fortran 95===\n{{main article|Fortran 95 language features}}\n''Fortran 95,'' published officially as ISO/IEC 1539-1:1997, was a minor revision, mostly to resolve some outstanding issues from the Fortran 90 standard.  Nevertheless, Fortran 95 also added a number of extensions, notably from the [[High Performance Fortran]] specification:\n\n* <code>FORALL</code> and nested <code>WHERE</code> constructs to aid vectorization\n* User-defined <code>PURE</code> and <code>ELEMENTAL</code> procedures\n* Default initialization of derived type components, including pointer initialization\n* Expanded the ability to use initialization expressions for data objects\n* Initialization of pointers to <code>NULL()</code>\n* Clearly defined that <code>ALLOCATABLE</code> arrays are automatically deallocated when they go out of scope.\n\nA number of intrinsic functions were extended (for example a <code>dim</code> argument was added to the <code>maxloc</code> intrinsic).\n\nSeveral features noted in Fortran 90 to be \"obsolescent\" were removed from Fortran 95:\n\n* <code>DO</code> statements using <code>REAL</code> and <code>DOUBLE PRECISION</code> index variables\n* Branching to an <code>END IF</code> statement from outside its block\n* <code>PAUSE</code> statement\n* <code>ASSIGN</code> and assigned <code>GO TO</code> statement, and assigned format specifiers\n* <code>H</code> edit descriptor.\n\nAn important supplement to Fortran 95 was the [[International Organization for Standardization|ISO technical report]] ''TR-15581: Enhanced Data Type Facilities'', informally known as the ''Allocatable TR.''  This specification defined enhanced use of <code>ALLOCATABLE</code> arrays, prior to the availability of fully Fortran 2003-compliant Fortran compilers.  Such uses include <code>ALLOCATABLE</code> arrays as derived type components, in procedure dummy argument lists, and as function return values.  (<code>ALLOCATABLE</code> arrays are preferable to <code>POINTER</code>-based arrays because <code>ALLOCATABLE</code> arrays are guaranteed by Fortran 95 to be deallocated automatically when they go out of scope, eliminating the possibility of [[memory leak]]age.  In addition, elements of allocatable arrays are contiguous, and [[aliasing (computing)|aliasing]] is not an issue for optimization of array references, allowing compilers to generate faster code than in the case of pointers.<ref>{{cite web|title=Fortran 95 Reference|url=https://gcc.gnu.org/onlinedocs/gcc-4.1.0/gfortran/|publisher=Gnu.Org|accessdate=10 May 2014}}</ref>)\n\nAnother important supplement to Fortran 95 was the [[International Organization for Standardization|ISO]] technical report ''TR-15580: Floating-point exception handling'', informally known as the ''IEEE TR.''  This specification defined support for [[IEEE 754-2008|IEEE floating-point arithmetic]] and [[floating point]] [[exception handling]].\n\n====Conditional compilation and varying length strings====\nIn addition to the mandatory \"Base language\"\n(defined in ISO/IEC 1539-1 : 1997),\nthe Fortran 95 language also includes two optional modules:\n* Varying length character strings (ISO/IEC 1539-2 : 2000)\n* Conditional compilation (ISO/IEC 1539-3 : 1998)\nwhich, together, compose the multi-part International Standard (ISO/IEC 1539).\n\nAccording to the standards developers, \"the optional parts describe self-contained features which have been requested by a substantial body of users and/or implementors, but which are not deemed to be of sufficient generality for them to be required in all standard-conforming Fortran compilers.\" Nevertheless, if a standard-conforming Fortran does provide such options, then they \"must be provided in accordance with the description of those facilities in the appropriate Part of the Standard.\"\n\n===Fortran 2003===\n''Fortran 2003,'' officially published as ISO/IEC 1539-1:2004, is a major revision introducing many new features.<ref>{{cite web|title=Fortran 2003- Last Working Draft|url=http://www.j3-fortran.org/doc/year/04/04-007.txt|publisher=Gnu.Org|accessdate=10 May 2014}}</ref> A comprehensive summary of the new features of Fortran 2003 is available at the Fortran Working Group (ISO/IEC JTC1/SC22/WG5) official Web site.<ref>[http://www.nag.co.uk/sc22wg5/ Fortran Working Group (WG5)]. It may also be downloaded as a [ftp://ftp.nag.co.uk/sc22wg5/N1551-N1600/N1579.pdf PDF file] or [ftp://ftp.nag.co.uk/sc22wg5/N1551-N1600/N1579.ps.gz <code>gzip</code>ped PostScript file], FTP.nag.co.uk</ref>\n\nFrom that article, the major enhancements for this revision include:\n\n* Derived type enhancements: parameterized derived types, improved control of accessibility, improved structure constructors, and finalizers\n* [[Object-oriented programming]] support: [[inheritance (computer science)|type extension and inheritance]], [[Type polymorphism|polymorphism]], dynamic type allocation, and type-bound procedures, providing complete support for [[abstract data type]]s\n* Data manipulation enhancements: allocatable components (incorporating TR 15581), deferred type parameters, [[volatile variable|<code>VOLATILE</code> attribute]], explicit type specification in array constructors and allocate statements, pointer enhancements, extended initialization expressions, and enhanced intrinsic procedures\n* Input/output enhancements: [[Asynchronous I/O|asynchronous]] transfer, stream access, user specified transfer operations for derived types, user specified control of rounding during format conversions, named constants for preconnected units, the <code>FLUSH</code> statement, regularization of keywords, and access to error messages\n* [[Function pointer|Procedure pointers]]\n* Support for [[IEEE 754-2008|IEEE floating-point arithmetic]] and [[floating point]] [[exception handling]] (incorporating TR 15580)\n* Interoperability with the [[C (programming language)|C programming language]]\n* Support for international usage: access to [[Universal Character Set|ISO 10646]] 4-byte characters and choice of decimal or comma in numeric formatted input/output\n* Enhanced integration with the host operating system: access to [[command-line interface|command line]] arguments, [[environment variable]]s, and processor error messages\n\nAn important supplement to Fortran 2003 was the [[International Organization for Standardization|ISO technical report]] ''TR-19767: Enhanced module facilities in Fortran.''  This report provided ''submodules,'' which make Fortran modules more similar to [[Modula-2]] modules.  They are similar to [[Ada (programming language)|Ada]] private child subunits.  This allows the specification and implementation of a module to be expressed in separate program units, which improves packaging of large libraries, allows preservation of trade secrets while publishing definitive interfaces, and prevents compilation cascades.\n\n===Fortran 2008===\nThe most recent standard, ISO/IEC 1539-1:2010, informally known as Fortran 2008, was approved in September 2010.<ref>N1836, Summary of Voting/Table of Replies on ISO/IEC FDIS 1539-1, Information technology \u2013 Programming languages \u2013 Fortran \u2013 Part 1: Base language [ftp://ftp.nag.co.uk/sc22wg5/N1801-N1850/N1836.pdf]</ref><ref>{{cite web|title=Fortran 2008 \u2013 Last Working Draft|url=http://www.j3-fortran.org/doc/year/10/10-007.pdf|publisher=Gnu.Org|accessdate=10 May 2014}}</ref>   As with Fortran 95, this is a minor upgrade, incorporating clarifications and corrections to Fortran 2003, as well as introducing a select few new capabilities.  The new capabilities include:\n\n* Submodules \u2013 additional structuring facilities for modules; supersedes ISO/IEC TR 19767:2005\n* [[Coarray Fortran]] \u2013 a parallel execution model\n* The [[Scalable parallelism|DO CONCURRENT]] construct \u2013 for loop iterations with no interdependencies\n* The CONTIGUOUS attribute \u2013 to specify storage layout restrictions\n* The [[Dynamic scoping|BLOCK construct]] \u2013 can contain declarations of objects with construct scope\n* [[Recursive data type|Recursive allocatable components]] \u2013 as an alternative to recursive pointers in derived types\n\nThe Final Draft international Standard (FDIS) is available as document N1830.<ref>N1830, Information technology \u2013 Programming languages \u2013 Fortran \u2013 Part 1: Base language [ftp://ftp.nag.co.uk/sc22wg5/N1801-N1850/N1830.pdf]{{dead link|date=January 2016}}</ref>\n\nAn important supplement to Fortran 2008 is the [[International Organization for Standardization|ISO]] Technical Specification (TS) 29113 on ''Further Interoperability of Fortran with C'',<ref>ISO page to [http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=45136 ISO/IEC DTS 29113, Further Interoperability of Fortran with C]</ref><ref>Draft of the Technical Specification (TS) 29113 [ftp://ftp.nag.co.uk/sc22wg5/N1901-N1950/N1917.pdf]</ref> which has been submitted to ISO in May 2012 for approval. The specification adds support for accessing the array descriptor from C and allows ignoring the type and rank of arguments.\n\n===Fortran 2015===\nThe next revision of the language (Fortran 2015) is intended to be a minor revision and is planned for release in mid-2018.<ref name=\"Fortran2015Closes\">{{cite web|url=https://software.intel.com/en-us/blogs/2015/09/04/doctor-fortran-in-one-door-closes|title=Doctor Fortran in \"One Door Closes\"|publisher=Software.intel.com|accessdate=21 September 2015}}</ref> It is currently planned to include further interoperability between Fortran and C, additional parallel features, and \"the removal of simple deficiencies in and discrepancies between existing facilities.\"<ref name=\"Fortran2015\">{{cite web|url=http://software.intel.com/en-us/blogs/2013/08/08/doctor-fortran-goes-dutch-fortran-2015|title=Doctor Fortran Goes Dutch: Fortran 2015|publisher=Software.intel.com|accessdate=19 November 2014}}</ref><ref>[http://j3-fortran.org/doc/year/16/16-007r2.pdf F2015 Working Document], 31 August 2016</ref>\n\n==Fortran and supercomputers==\nAlthough a 1968 journal article by the authors of [[BASIC]] already described Fortran as \"old-fashioned\",<ref name=\"dtss196810\">{{cite journal | url=http://dtss.dartmouth.edu/sciencearticle/index.html | title=Dartmouth Time-Sharing |author1=Kemeny, John G. |author2=Kurtz, Thomas E. | journal=Science | date=11 October 1968 | volume=162 | pages=223\u2013228}}</ref> since Fortran has been in use for many decades, there is a vast body of Fortran software in daily use throughout the scientific and engineering communities.<ref>{{cite web|last=Phillips|first=Lee|title=Scientific computing\u2019s future: Can any coding language top a 1950s behemoth?|url=http://arstechnica.com/science/2014/05/scientific-computings-future-can-any-coding-language-top-a-1950s-behemoth/|publisher=Ars Technica|accessdate=8 May 2014}}</ref> [[Jay Pasachoff]] wrote in 1984 that \"physics and astronomy students simply have to learn Fortran. So much exists in Fortran that it seems unlikely that scientists will change to Pascal, Modula-2, or whatever.\"<ref name=\"pasachoff198404\">{{cite news | url=https://archive.org/stream/byte-magazine-1984-04/1984_04_BYTE_09-04_Real-World_Interfacing#page/n403/mode/2up | title=Scientists: Fortran vs. Modula-2 | work=BYTE | date=April 1984 | accessdate=6 February 2015 | author=Pasachoff, Jay M. | authorlink=Jay Pasachoff | pages=404 | type=letter}}</ref> In 1993, Cecil E. Leith called Fortran the \"mother tongue of scientific computing\" adding that its replacement by any other possible language \"may remain a forlorn hope.\"<ref name=\"Galperin\">{{cite book|last=Galperin|first=Boris|title=Large Eddy Simulation of Complex Engineering and Geophysical Flows|year=1993|publisher=Cambridgey|location=London|isbn=0-521-43009-7|page=573|chapter=26}}</ref>  It is the primary language for some of the most intensive [[Supercomputer|supercomputing]] tasks, such as [[astronomy]], [[numerical weather prediction|weather]] and [[climate model]]ing, numerical linear algebra ([[LAPACK]]), numerical libraries ([[IMSL Numerical Libraries|IMSL]] and [[NAG Numerical Library|NAG]]), [[structural engineering]], [[hydrological modeling]],  [[optimization]], satellite simulation and data analysis, [[computational fluid dynamics]], [[computational chemistry]], [[computational economics]] and [[computational physics]]. Many of the floating-point benchmarks to gauge the performance of new computer processors{{snd}} such as [http://www.spec.org/cpu2006/CFP2006/ CFP2006], the floating-point component of the [[Standard Performance Evaluation Corporation|SPEC]] [http://www.spec.org/cpu2006/ CPU2006] benchmarks{{snd}} are written in Fortran.\n\nOn the other hand, more modern code generally uses large program libraries such as [[PETSc]] or [[Trilinos]] for linear algebra capabilities, [[METIS]] for graph partitioning, [[deal.II]] or [[FEniCS Project|FEniCS]] for mesh and finite element support, and other generic libraries. Since the late 1990s, almost all of the most widely used support libraries have been written in [[C (programming language)|C]] and, more often, [[C++]]. Consequently, a growing fraction of scientific code is also written in these languages.  For this reason, facilities for interoperation with C were added to Fortran 2003, and enhanced by ISO/IEC technical specification 29113, which will be incorporated into Fortran 2015. This shift is also evident in the selection of applications between the [[SPECfp#Benchmarks 2|SPEC CPU 2000]] and [[SPECfp#Benchmarks|SPEC CPU 2006]] floating point benchmarks.\n\n==Language features==\n\nThe precise characteristics and syntax of Fortran 95 are discussed in [[Fortran 95 language features]].\n\n==Portability==\n{{unreferenced section|date=September 2011}}\n[[Portability (computer science)|Portability]] was a problem in the early days because there was no agreed standard{{snd}} not even IBM's reference manual{{snd}} and computer companies vied to differentiate their offerings from others by providing incompatible features.  Standards have improved portability.  The 1966 standard provided a reference [[Syntax (programming languages)|syntax]] and semantics, but vendors continued to provide incompatible extensions.  Although careful programmers were coming to realize that use of incompatible extensions caused expensive portability problems, and were therefore using programs such as ''The PFORT Verifier,'' it was not until after the 1977 standard, when the National Bureau of Standards (now [[National Institute of Standards and Technology|NIST]]) published ''FIPS PUB 69'', that processors purchased by the U.S. Government were required to diagnose extensions of the standard.  Rather than offer two processors, essentially every compiler eventually had at least an option to diagnose extensions.\n\nIncompatible extensions were not the only portability problem.  For numerical calculations, it is important to take account of the characteristics of the arithmetic.  This was addressed by Fox et al. in the context of the 1966 standard by the ''PORT'' library.  The ideas therein became widely used, and were eventually incorporated into the 1990 standard by way of intrinsic inquiry functions.  The widespread (now almost universal) adoption of the [[IEEE 754-2008|IEEE 754]] standard for binary floating-point arithmetic has essentially removed this problem.\n\nAccess to the computing environment (e.g., the program's command line, environment variables, textual explanation of error conditions) remained a problem until it was addressed by the 2003 standard.\n\nLarge collections of library software that could be described as being loosely related to engineering and scientific calculations, such as graphics libraries, have been written in C, and therefore access to them presented a portability problem.  This has been addressed by incorporation of C interoperability into the 2003 standard.\n\nIt is now possible (and relatively easy) to write an entirely portable program in Fortran, even without recourse to a preprocessor.\n\n==Variants==\n\n===Fortran 5===\nFortran 5 was marketed by [[Data General]] Corp in the late 1970s and early 1980s, for the [[Data General Nova|Nova]], [[Data General Eclipse|Eclipse]], and [[Data General Eclipse MV/8000|MV]] line of computers.  It had an optimizing compiler that was quite good for minicomputers of its time.  The language most closely resembles Fortran 66.  The name is a [[pun]] on the earlier Fortran IV.\n\n===Fortran V===\nFortran V was distributed by [[Control Data Corporation]] in 1968 for the [[CDC 6600]] series. The language was based upon Fortran IV.<ref name=\"FIV\">{{cite web|url=http://hopl.murdoch.edu.au/showlanguage.prx?exp=1092&language=CDC%20Fortran|title=Towards FORTRAN VI|last=Healy|first=MJR|year=1968|work=Advanced scientific Fortran by CDC |publisher=CDC|pages=169\u2013172|accessdate=10 April 2009}}</ref>\n\nUnivac also offered a compiler for the 1100 series known as Fortran V.  A spinoff of Univac Fortran V was Athena Fortran.\n\n===Fortran 6===\n'''Fortran 6''' or Visual Fortran 2001 was licensed to [[Compaq]] by [[Microsoft]]. They have licensed Compaq Visual Fortran and have provided the Visual Studio 5 environment interface for [[Visual Studio 97|Compaq v6]] up to v6.1.<ref>{{cite web |url=http://www.cs-software.com/software/fortran/compaq/cvf_relnotes.html#61ver_news |title=third party release notes for Fortran v6.1 |date=15 March 2011|publisher=Cs-software.com|accessdate=19 November 2014}}</ref>\n\n===Specific variants===\nVendors of high-performance scientific computers (''e.g.,'' [[Burroughs Corporation|Burroughs]], [[Control Data Corporation]] (CDC), [[Cray]], [[Honeywell]], [[IBM]], [[Texas Instruments]], and [[UNIVAC]]) added extensions to Fortran to take advantage of special hardware features such as [[CPU cache|instruction cache]], CPU [[pipeline (computing)|pipelines]], and vector arrays.  For example, one of IBM's FORTRAN compilers (''H Extended IUP'') had a level of optimization which reordered the [[machine code]] [[instruction (computer science)|instructions]] to keep multiple internal arithmetic units busy simultaneously.  Another example is ''CFD'', a special variant of Fortran designed specifically for the [[ILLIAC IV]] supercomputer, running at [[NASA]]'s [[NASA Ames Research Center|Ames Research Center]].\nIBM Research Labs also developed an extended FORTRAN-based language called ''VECTRAN'' for processing vectors and matrices.\n\n[[Object-Oriented Fortran]] was an object-oriented extension of Fortran, in which data items can be grouped into objects, which can be instantiated and executed in parallel.  It was available for Sun, Iris, [[Intel iPSC|iPSC]], and nCUBE, but is no longer supported.\n\nSuch machine-specific extensions have either disappeared over time or have had elements incorporated into the main standards. The major remaining extension is [[OpenMP]], which is a cross-platform extension for shared memory programming.  One new extension, [[Coarray Fortran]], is intended to support parallel programming.\n\n====FOR TRANSIT for the IBM 650====\n''FOR TRANSIT'' was the name of a reduced version of the IBM 704 FORTRAN language,\nwhich was implemented for the IBM 650, using a translator program developed\nat Carnegie in the late 1950s.<ref>\"Internal Translator (IT) A Compiler for the IBM 650\",\nby A. J. Perlis, J. W. Smith, and H. R. Van Zoeren, Computation Center,\nCarnegie Institute of Technology\n</ref>\nThe following comment appears in the IBM Reference Manual (''FOR TRANSIT Automatic Coding System'' C28-4038, Copyright 1957, 1959 by IBM):\n<blockquote>The FORTRAN system was designed for a more complex  machine than the 650, and consequently some of the 32 statements found in the FORTRAN Programmer's Reference Manual are not acceptable to the FOR TRANSIT system.  In addition, certain restrictions to the FORTRAN language have been added.  However, none of these restrictions make a source program written for FOR TRANSIT incompatible with the FORTRAN system for the 704.</blockquote>\n\nThe permissible statements were:\n\n* Arithmetic assignment statements, e.g., {{code|1=a = b}}\n* {{code|GO to n}}\n* <code>GO TO (n<sub>1</sub>, n<sub>2</sub>, ..., n<sub>m</sub>), i</code>\n* <code>IF (a) n<sub>1</sub>, n<sub>2</sub>, n<sub>3</sub></code>\n* {{code|PAUSE}}\n* {{code|STOP}}\n* <code>DO n i = m1, m2</code>\n* {{code|CONTINUE}}\n* {{code|END}}\n* {{code|READ n, list}}\n* {{code|PUNCH n, list}}\n* {{code|DIMENSION V, V, V, ...}}\n* {{code|EQUIVALENCE (a,b,c), (d,c), ...}}\n\nUp to ten subroutines could be used in one program.\n\nFOR TRANSIT statements were limited to columns 7 through 56, only.\nPunched cards were used for input and output on the IBM 650.  Three passes were required to translate source code to the \"IT\" language, then to compile the IT statements into SOAP assembly language, and finally to produce the object program, which could then be loaded into the machine to run the program (using punched cards for data input, and outputting results onto punched cards).\n\nTwo versions existed for the 650s with a 2000 word memory drum:  FOR TRANSIT I (S) and FOR TRANSIT II, the latter for machines equipped with indexing registers and automatic floating point decimal ([[Bi-quinary coded decimal|bi-quinary]]) arithmetic.  Appendix A of the manual included wiring diagrams for the [[IBM 533]] card reader/punch [[plugboard|control panel]].\n\n===Fortran-based languages===\nPrior to FORTRAN 77, a number of [[preprocessor]]s were commonly used to provide a friendlier language, with the advantage that the preprocessed code could be compiled on any machine with a standard FORTRAN compiler.  These preprocessors would typically support [[structured programming]], variable names longer than six characters, additional data types, [[conditional compilation]], and even [[Macro (computer science)|macro]] capabilities.  Popular preprocessors included [[FLECS]], [[iftran]], [[Mortran|MORTRAN]], [[SFtran]], [[S-Fortran]], [[Ratfor]], and [[Ratfiv]].  Ratfor and Ratfiv, for example, implemented a [[C (programming language)|C]]-like language, outputting preprocessed code in standard FORTRAN 66.  Despite advances in the Fortran language, preprocessors continue to be used for conditional compilation and macro substitution.\n\nOne of the earliest versions of FORTRAN, introduced in the 60's, was popularly used in colleges and universities.  Developed, supported, and distributed by the [[University of Waterloo]], [[WATFIV|WATFOR]] was based largely on FORTRAN IV.  A WATFOR student could submit their batch FORTRAN job and, if there were no syntax errors, the program would move straight to execution.  This simplification allowed students to concentrate on their program's syntax and semantics, or execution logic flow, rather than dealing with submission [[Job Control Language]] (JCL), the compile/link-edit/execution successive process(es), or other complexities of the mainframe/minicomputer environment.  A down side to this simplified environment was that WATFOR was not a good choice for programmers needing the expanded abilities of their host processor(s), e.g., WATFOR typically had very limited access to I/O devices. WATFOR was succeeded by [[WATFIV]] and its later versions.\n\n{{sxhl|2=fortran|1=program; s=0  i=1,n;  s=s+1;  stop i;  s='s'  Stop}}  (line programing)\n\n[[LRLTRAN]] was developed at the [[Lawrence Radiation Laboratory]] to provide support for vector arithmetic and dynamic storage, among other extensions to support systems programming.  The distribution included the [[LTSS operating system]].\n\nThe Fortran-95 Standard includes an optional ''Part 3'' which defines an optional [[conditional compilation]] capability.  This capability is often referred to as \"CoCo\".\n\nMany Fortran compilers have integrated subsets of the [[C preprocessor]] into their systems.\n\n[[SIMSCRIPT]] is an application specific Fortran preprocessor for modeling and simulating large discrete systems.\n\nThe [[F (programming language)|F programming language]] was designed to be a clean subset of Fortran 95 that attempted to remove the redundant, unstructured, and deprecated features of Fortran, such as the <code>EQUIVALENCE</code> statement.  F retains the array features added in Fortran 90, and removes control statements that were made obsolete by structured programming constructs added to both Fortran 77 and Fortran 90.  F is described by its creators as \"a compiled, structured, array programming language especially well suited to education and scientific computing.\"<ref>{{cite web | url=http://www.fortran.com/F/index.html | title= F Programming Language Homepage|publisher=Fortran.com|accessdate=19 November 2014}}</ref>\n\nLahey and Fujitsu teamed up to create Fortran for the Microsoft [[.NET Framework]].<ref>{{cite web | url=http://www.lahey.com/lf71/lfnet.htm | title= Fortran for .NET Language System}}</ref> Silverfrost FTN95 is also capable of creating .NET code.<ref>{{cite web | url=http://www.silverfrost.com/11/ftn95_overview.aspx | title=FTN95: Fortran 95 for Windows|publisher=Silverfrost.com|accessdate=19 November 2014}}</ref>\n\n==Code examples==\n{{details|Wikibooks:Fortran/Fortran examples}}\nThe following program illustrates dynamic memory allocation and array-based operations, two features introduced with Fortran 90.  Particularly noteworthy is the absence of <code>DO</code> loops and <code>IF</code>/<code>THEN</code> statements in manipulating the array; mathematical operations are applied to the array as a whole.  Also apparent is the use of descriptive variable names and general code formatting that conform with contemporary programming style.  This example computes an average over data entered interactively.\n\n<syntaxhighlight lang=\"fortran\">\nprogram average\n\n  ! Read in some numbers and take the average\n  ! As written, if there are no data points, an average of zero is returned\n  ! While this may not be desired behavior, it keeps this example simple\n\n  implicit none\n\n  real, dimension(:), allocatable :: points\n  integer                         :: number_of_points\n  real                            :: average_points=0., positive_average=0., negative_average=0.\n\n  write (*,*) \"Input number of points to average:\"\n  read  (*,*) number_of_points\n\n  allocate (points(number_of_points))\n\n  write (*,*) \"Enter the points to average:\"\n  read  (*,*) points\n\n  ! Take the average by summing points and dividing by number_of_points\n  if (number_of_points > 0) average_points = sum(points) / number_of_points\n\n  ! Now form average over positive and negative points only\n  if (count(points > 0.) > 0) then\n     positive_average = sum(points, points > 0.) / count(points > 0.)\n  end if\n\n  if (count(points < 0.) > 0) then\n     negative_average = sum(points, points < 0.) / count(points < 0.)\n  end if\n\n  deallocate (points)\n\n  ! Print result to terminal\n  write (*,'(a,g12.4)') 'Average = ', average_points\n  write (*,'(a,g12.4)') 'Average of positive points = ', positive_average\n  write (*,'(a,g12.4)') 'Average of negative points = ', negative_average\n\nend program average\n</syntaxhighlight>\n\n==Humor==\nDuring the same Fortran standards committee meeting at which the name \"FORTRAN 77\" was chosen, a satirical technical proposal was incorporated into the official distribution bearing the title \"Letter O [[considered harmful|Considered Harmful]]\".  This proposal purported to address the confusion that sometimes arises between the letter \"O\" and the numeral zero, by eliminating the letter from allowable variable names.  However, the method proposed was to eliminate the letter from the character set entirely (thereby retaining 48 as the number of lexical characters, which the colon had increased to 49).  This was considered beneficial in that it would promote structured programming, by making it impossible to use the notorious <CODE>'''GO TO'''</CODE> statement as before. (Troublesome <CODE>'''FORMAT'''</CODE> statements would also be eliminated.)  It was noted that this \"might invalidate some existing programs\" but that most of these \"probably were non-conforming, anyway\".<ref>X3J3 post-meeting distribution for meeting held at Brookhaven National Laboratory in November 1976.{{unreliable source?|date=August 2014}}</ref><ref>\"The obliteration of O\", Computer Weekly, 3 March 1977.</ref>\n\nDuring the standards committee battle over whether the \"minimum trip count\" for the FORTRAN 77 <CODE>'''DO'''</CODE> statement should be zero (allowing no execution of the block) or one (the \"plunge-ahead\" <CODE>'''DO'''</CODE>), another facetious alternative was proposed (by Loren Meissner) to have the minimum be two{{snd}} since there is no need for a loop if it is only executed once.{{Citation needed|date=January 2015}}\n\nWhen assumed-length arrays were being added, there was a dispute as to the appropriate character to separate upper and lower bounds.  \nIn a comment examining these arguments, Dr. Walt Brainerd penned an article entitled \"Astronomy vs. Gastroenterology\"\nbecause some proponents had suggested using the star or asterisk (\"*\"), while others favored the colon (\":\").{{Citation needed|date=July 2016}}\n\nIn Fortran 77, variable names beginning with the letters I\u2013N had a default type of integer, while variables starting with any other letters defaulted to real, although programmers could override the defaults with an explicit declaration.<ref>{{Cite web|url=http://docs.oracle.com/cd/E19957-01/805-4939/z40007365fbc/index.html|title=Rules for Data Typing (FORTRAN 77 Language Reference)|website=docs.oracle.com|access-date=2016-09-29}}</ref> This led to the joke: \"In Fortran, GOD is REAL (unless declared INTEGER).\"\n\n==See also==\n{{Portal|Computer programming}}\n* [[f2c]]\n* [[List of compilers#Fortran compilers|List of Fortran compilers]]\n* [[List of numerical libraries#Fortran|List of Fortran numerical libraries]]\n* [[List of programming languages]]\n* [[Matrix representation]]\n* [[Row-major order]]\n\n==References==\n{{Reflist|30em}}\n\n==Further reading==\n;Articles\n* {{Cite journal|last=Allen|first=F.E.|date=September 1981|title=A History of Language Processor Technology in IBM|journal=IBM Journal of Research and Development|publisher=[[IBM]]|volume=25|issue=5|url=http://www.research.ibm.com/journal/rd/255/ibmrd2505Q.pdf | doi = 10.1147/rd.255.0535 }}\n*{{Cite journal|last=Backus|first=J. W.|author2=H. Stern, I. Ziller, R. A. Hughes, R. Nutt, R. J. Beeber, S. Best, R. Goldberg, L. M. Haibt, H. L. Herrick, R. A. Nelson, D. Sayre, P. B. Sheridan|year=1957|title=The FORTRAN Automatic Coding System|journal=Western joint computer conference: Techniques for reliability|publisher=[[Institute of Radio Engineers]], [[American Institute of Electrical Engineers]], [[Association for Computing Machinery|ACM]]|location=Los Angeles, California|pages=188\u2013198|doi=10.1145/1455567.1455599|last3=Ziller|first3=I.|last4=Hughes|first4=R. A.|last5=Nutt|first5=R.|last6=Beeber|first6=R. J.|last7=Best|first7=S.|last8=Goldberg|first8=R.|last9=Haibt|first9=L. M.|last10=Herrick|first10=H. L.|last11=Nelson|first11=R. A.|last12=Sayre|first12=D.|last13=Sheridan|first13=P. B.}}\n* {{Cite journal|last1=Chivers|first1=Ian D.|first2=Jane |last2=Sleightholme|year=2013|title=Compiler support for the Fortran 2003 & 2008 standards|journal=[[Association for Computing Machinery|ACM]] [[SIGPLAN]] Fortran Forum|publisher=[[Association for Computing Machinery|ACM]]|volume=28|issue=1|pages=26\u201328|issn=1061-7264|doi=10.1145/1520752.1520755|url=http://www.fortranplus.co.uk/fortran_info.html}}\n* {{cite web|url=http://hopl.murdoch.edu.au/showlanguage.prx?exp=8&language=FORTRAN |title=FORTRAN \u2013 Backus et al high-level compiler (Computer Language) |last=Pigott |first=Diarmuid |year=2006 |work=The Encyclopedia of Computer Languages |publisher=[[Murdoch University]] |accessdate=5 May 2010 |deadurl=yes |archiveurl=https://web.archive.org/web/20091008230959/http://hopl.murdoch.edu.au/showlanguage.prx?exp=8&language=FORTRAN |archivedate=8 October 2009 |df=dmy }}\n* {{Cite journal|year=1985|title=Design Considerations for IBM Personal Computer Professional FORTRAN, an Optimizing Compiler|journal=IBM Systems Journal|volume=24|issue=1|pages=49\u201360|url=http://www.research.ibm.com/journal/sj/241/ibmsj2401G.pdf|last1=Roberts |first1=Mark L. |last2=Griffiths |first2=Peter D.|publisher=[[IBM]]|doi=10.1147/sj.241.0049}}\n\n;\"Core\" language standards\n* {{Cite book\n  | last = Ansi x3.9-1966\n  | title = USA Standard FORTRAN\n  | publisher = American National Standards Institute\n  | url = http://www.fh-jena.de/~kleine/history/languages/ansi-x3dot9-1966-Fortran66.pdf\n  }} Informally known as FORTRAN 66.\n* {{Cite book\n  | last = Ansi x3.9-1978\n  | title = American National Standard \u2013 Programming Language FORTRAN\n  | publisher = American National Standards Institute\n  | url = http://www.fortran.com/fortran/F77_std/rjcnf.html\n  }} Also known as [[International Organization for Standardization|ISO]] 1539-1980, informally known as FORTRAN 77.\n* {{Cite book\n  | last = ANSI X3.198-1992 (R1997) / ISO/IEC 1539:1991\n  | title = American National Standard \u2013 Programming Language Fortran Extended\n  | publisher = American National Standards Institute / ISO/IEC\n  | url = http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=17366\n  }}{{dead link|date=May 2014}} Informally known as Fortran 90.\n* {{Cite book\n  | last = ISO/IEC 1539-1:1997\n  | title = Information technology \u2013 Programming languages \u2013 Fortran \u2013 Part 1: Base language\n  | url = http://j3-fortran.org/doc/standing/archive/007/97-007r2/pdf/97-007r2.pdf\n  }} Informally known as Fortran 95.  There are a further two parts to this standard.  Part 1 has been formally adopted by ANSI.\n* {{Cite book\n  | last = ISO/IEC 1539-1:2004\n  | title = Information technology \u2013 Programming languages \u2013 Fortran \u2013 Part 1: Base language\n  | url = http://www.dkuug.dk/jtc1/sc22/open/n3661.pdf\n  }} Informally known as Fortran 2003.\n* {{Cite book\n  | last = ISO/IEC 1539-1:2010 (Final Draft International Standard)\n  | title = Information technology \u2013 Programming languages \u2013 Fortran \u2013 Part 1: Base language\n  | url = ftp://ftp.nag.co.uk/sc22wg5/N1801-N1850/N1830.pdf\n  }} Informally known as Fortran 2008.\n\n;Related standards\n* {{Cite journal\n  | last = Kneis\n  | first = Wilfried\n  | title = Draft standard [[Industrial Real-Time Fortran|Industrial Real-Time FORTRAN]]\n  | journal = [[Association for Computing Machinery|ACM]] [[SIGPLAN]] Notices\n  | issn = 0362-1340\n  |date=October 1981\n  | volume = 16\n  | issue = 7\n  | pages = 45\u201360\n  | publisher = ACM Press\n  | doi = 10.1145/947864.947868\n  }}\n* {{Cite book|title=ISO 8651-1:1988 Information processing systems \u2013  Computer graphics \u2013  Graphical Kernel System (GKS) language bindings \u2013  Part 1: FORTRAN|url=http://www.iso.org/iso/catalogue_detail?csnumber=16024|year=1988|publisher=[[International Organization for Standardization|ISO]]|location=Geneva, Switzerland}}\n\n;Other reference material\n* {{cite book |url=http://www.ecma-international.org/publications/files/ECMA-ST-WITHDRAWN/ECMA-9,%201st%20Edition,%20April%201965.pdf |format=PDF |title=ECMA Standard on FORTRAN |publisher=European Computer Manufacturers Association |date=April 1965 |accessdate=2014-11-17}}\n* {{cite book |url=http://wwwcdf.pd.infn.it/localdoc/f77_sun.pdf |format=PDF |title=FORTRAN 77 4.0 Reference Manual |publisher=Sun Microsystems, Inc. |year=1995 |accessdate=2014-11-17}}\n* {{cite web |url=http://www.atkielski.com/PDF/data/fortran.pdf |format=PDF |title=FORTRAN Coding Form |publisher=[[IBM]] |accessdate=2014-11-17}}\n* {{cite book |url=http://www.fh-jena.de/~kleine/history/languages/GC28-6515-10-FORTRAN-IV-Language.pdf |format=PDF |title=IBM System/360 and System/370 Fortran IV Language |publisher=[[International Business Machines]] |date=May 1974 |accessdate=2014-11-17}}\n* {{cite web |url=http://michaelgoerz.net/refcards/fortran_refcard_a4.pdf |title=Modern Fortran Reference Card |last=Goerz |first=Michael |date=2014 |accessdate=2014-12-14}}\n\n;Textbooks\n* {{Cite book\n  | first1 = Jeanne C.\n  | last1  = Adams\n  | first2 = Walter S.\n  | last2  = Brainerd\n  | first3 = Richard A.\n  | last3  = Hendrickson\n  | first4 = Richard E.\n  | last4  = Maine\n  | first5 = Jeanne T.\n  | last5  = Martin\n  | first6 =  Brian T.\n  | last6  = Smith\n\n  | year = 2009\n  | title = The Fortran 2003 Handbook\n  | edition = 1st\n  | publisher = [[Springer Science+Business Media|Springer]]\n  | isbn = 978-1-84628-378-9}}\n* {{Cite book\n  | first = Ed\n  | last = Akin\n  | year = 2003\n  | title = Object Oriented Programming via Fortran 90/95\n  | edition = 1st\n  | publisher = [[Cambridge University Press]]\n  | isbn = 0-521-52408-3}}\n* {{Cite book\n  | first = Stephen J.\n  | last = Chapman\n  | year = 2007\n  | title = Fortran 95/2003 for Scientists and Engineers\n  | edition = 3rd\n  | publisher = McGraw-Hill\n  | isbn = 978-0-07-319157-7}}\n* {{Cite book\n  | first1 = Ian\n  | last1 = Chivers\n  | first2 = Jane\n  | last2=Sleightholme\n  | year = 2015\n  | title = Introduction to Programming with Fortran\n  | edition = 3rd\n  | publisher = Springer\n  | isbn =  978-3-319-17700-7}}\n* {{Cite book\n  | first = D. M.\n  | last = Etter\n  | year = 1990\n  | title = Structured FORTRAN 77 for Engineers and Scientists\n  | edition = 3rd\n  | publisher = The Benjamin/Cummings Publishing Company, Inc.\n  | isbn = 0-8053-0051-1}}\n* {{Cite book\n  | first1 = T. M. R.\n  | last1 = Ellis\n  | first2 = Ivor R.\n  | last2 = Phillips\n  | first3=Thomas M.\n  | last3 = Lahey\n  | year = 1994\n  | title = Fortran 90 Programming\n  | edition = 1st\n  | publisher = Addison Wesley\n  | isbn = 0-201-54446-6}}\n* {{Cite book\n  | first = Michael\n  | last = Kupferschmid\n  | year = 2002\n  | title = Classical Fortran: Programming for Engineering and Scientific Applications\n  | publisher = Marcel Dekker (CRC Press)\n  | isbn = 0-8247-0802-4}}\n* {{Cite book\n  | first = Daniel D.\n  | last = McCracken\n  | year = 1961\n  | title = A Guide to FORTRAN Programming\n  | publisher = Wiley\n  | location = New York\n  | lccn = 61016618}}\n* {{Cite book\n  | first = Michael\n  | last = Metcalf\n  |author2=John Reid |author3=Malcolm Cohen\n   | year = 2011\n  | title = Modern Fortran Explained\n  | publisher = [[Oxford University Press]]\n  | isbn = 0-19-960142-9}}\n* {{Cite book\n  | first = Larry\n  | last = Nyhoff\n  |author2=Sanford Leestma\n  | year = 1995\n  | title = FORTRAN 77 for Engineers and Scientists with an Introduction to Fortran 90\n  | edition = 4th\n  | publisher = [[Prentice Hall]]\n  | isbn = 0-13-363003-X}}\n* {{Cite book|last=Page|first=Clive G.|title=Professional Programmer's Guide to Fortran77|url=http://www.star.le.ac.uk/~cgp/prof77.html|accessdate=4 May 2010|edition=7 June 2005|year=1988|publisher=Pitman|location=London|isbn=0-273-02856-1}}\n* {{Cite book|last=Press|first=William H.|title=Numerical Recipes in Fortran 90: The Art of Parallel Scientific Computing|url=http://www.nrbook.com/a/bookf90pdf.php|year=1996|publisher=Cambridge University Press|location=Cambridge, UK|isbn=0-521-57439-0}}\n* {{Cite book|last1=Sleighthome|first1=Jane|last2=Chivers|first2=Ian David|title=Interactive Fortran 77: A Hands-On Approach|url=http://www.fortranplus.co.uk/fortran_books.html |edition=2nd|series=Computers and their applications|year=1990|publisher=E. Horwood|location=Chichester|isbn=0-13-466764-6}}\n\n==External links==\n{{Wikibooks|Fortran}}\n{{Wikiquote|Fortran}}\n* [http://www.nag.co.uk/sc22wg5/ ISO/IEC JTC1/SC22/WG5] \u2013 the official home of Fortran standards\n* [https://gcc.gnu.org/wiki/GFortranStandards Fortran Standards Documents] \u2013 GFortran standards\n* [http://www.softwarepreservation.org/projects/FORTRAN/ History of FORTRAN and Fortran II] \u2013 [[Computer History Museum]]\n* [https://www.vintagebigblue.org/Compilerator/FORTRANF/dosvsFORTFCompile.php FORTRAN Compilerator] \u2013 an online FORTRAN F compiler for small experiments and tinkering\n\n{{IBM}}\n{{Programming languages}}\n\n[[Category:Fortran| ]]\n[[Category:Fortran programming language family| ]]\n[[Category:American inventions]]\n[[Category:Array programming languages]]\n[[Category:Computer standards]]\n[[Category:Numerical programming languages]]\n[[Category:Object-oriented programming languages]]\n[[Category:Procedural programming languages]]\n[[Category:Programming languages]]\n[[Category:Statically typed programming languages]]\n[[Category:Unix programming tools]]\n[[Category:Programming languages created in 1957]]\n[[Category:Computer-related introductions in 1957]]\n[[Category:Programming languages with an ISO standard]]"}]}}}}