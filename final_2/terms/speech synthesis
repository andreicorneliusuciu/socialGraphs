{"batchcomplete":"","query":{"normalized":[{"from":"Speech_synthesis","to":"Speech synthesis"}],"pages":{"42799":{"pageid":42799,"ns":0,"title":"Speech synthesis","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{See also|Speech generating device}}\n{{redirects|Text to voice|the Firefox extension|Text to Voice (Firefox)}}\n\n'''Speech synthesis''' is the artificial production of human [[speech]]. A computer system used for this purpose is called a '''speech computer''' or '''speech synthesizer''', and can be implemented in [[software]] or [[Computer hardware|hardware]] products. A '''text-to-speech''' ('''TTS''') system converts normal language text into speech; other systems render [[symbolic linguistic representation]]s like [[phonetic transcription]]s into speech.<ref>{{Cite book |first1=Jonathan |last1=Allen |first2=M. Sharon |last2=Hunnicutt |first3=Dennis |last3=Klatt |title=From Text to Speech: The MITalk system |publisher=Cambridge University Press |year=1987 |isbn=0-521-30641-8}}</ref>\n\nSynthesized speech can be created by concatenating pieces of recorded speech that are stored in a [[database]]. Systems differ in the size of the stored speech units; a system that stores [[phone (phonetics)|phones]] or [[diphone]]s provides the largest output range, but may lack clarity. For specific usage domains, the storage of entire words or sentences allows for high-quality output. Alternatively, a synthesizer can incorporate a model of the [[vocal tract]] and other human voice characteristics to create a completely \"synthetic\" voice output.<ref>{{Cite journal | doi = 10.1121/1.386780 | last1 = Rubin | first1 = P. | last2 = Baer | first2 = T. | last3 = Mermelstein | first3 = P. | year = 1981 | title = An articulatory synthesizer for perceptual research | url = | journal = Journal of the Acoustical Society of America | volume = 70 | issue = 2| pages = 321\u2013328 }}</ref>\n\nThe quality of a speech synthesizer is judged by its similarity to the human voice and by its ability to be understood clearly. An intelligible text-to-speech program allows people with [[visual impairment]]s or [[reading disability|reading disabilities]] to listen to written works on a home computer. Many computer operating systems have included speech synthesizers since the early 1990s.\n\n[[File:TTS System.svg|550px|thumb|Overview of a typical TTS system]]\n{{listen\n| filename     = J\u00e4rDa-utrop.ogg\n| title        = Automatic announcement\n| description  = A synthetic voice announcing an arriving train in [[Sweden]].\n| format       = [[Ogg]]\n}}\n{{listen\n| filename     = MS Sam.ogg\n| title        = Sample of Microsoft Sam\n| description  = [[Microsoft Windows XP]]'s default speech synthesizer voice saying \"[[The quick brown fox jumps over the lazy dog]] 1,234,567,890 times. soi\"\n| format       = [[Ogg]]\n}}\n\nA text-to-speech system (or \"engine\") is composed of two parts:<ref>{{Cite book |first1=Jan P. H. |last1=van Santen |first2=Richard W. |last2=Sproat |first3=Joseph P. |last3=Olive |first4=Julia |last4=Hirschberg |title=Progress in Speech Synthesis |publisher=Springer |year=1997 |isbn=0-387-94701-9}}</ref> a [[front end processor (program)|front-end]] and a [[Front and back ends|back-end]]. The front-end has two major tasks. First, it converts raw text containing symbols like numbers and abbreviations into the equivalent of written-out words. This process is often called ''text normalization'', ''pre-processing'', or ''[[Tokenization (lexical analysis)|tokenization]]''. The front-end then assigns [[phonetic transcription]]s to each word, and divides and marks the text into [[prosody (linguistics)|prosodic units]], like [[phrase]]s, [[clause]]s, and [[sentence (linguistics)|sentence]]s. The process of assigning phonetic transcriptions to words is called ''text-to-phoneme'' or ''[[grapheme]]-to-phoneme'' conversion. Phonetic transcriptions and prosody information together make up the symbolic linguistic representation that is output by the front-end. The back-end\u2014often referred to as the ''synthesizer''\u2014then converts the symbolic linguistic representation into sound. In certain systems, this part includes the computation of the ''target prosody'' (pitch contour, phoneme durations),<ref>{{Cite journal\n| last1 = Van Santen | first1 = J.\n| title = Assignment of segmental duration in text-to-speech synthesis\n| doi = 10.1006/csla.1994.1005\n| journal = Computer Speech & Language\n| volume = 8\n| issue = 2\n| pages = 95\u2013128\n|date=April 1994\n}}</ref> which is then imposed on the output speech.\n\n== History ==\n\nLong before the invention of [[electronics|electronic]] [[signal processing]], some people tried to build machines to emulate human speech. Some early legends of the existence of \"[[Brazen Head]]s\" involved Pope [[Silvester II]] (d. 1003 AD), [[Albertus Magnus]] (1198\u20131280), and [[Roger Bacon]] (1214\u20131294).\n\nIn 1779 the [[Denmark|Danish]] scientist [[Christian Gottlieb Kratzenstein]], working at the Russian [[Russian Academy of Sciences|Imperial Academy of Sciences and Arts]], built models of the human [[vocal tract]] that could produce the five long [[vowel]] sounds (in [[help:IPA|International Phonetic Alphabet]] notation: {{IPA|[a\u02d0]}}, {{IPA|[e\u02d0]}}, {{IPA|[i\u02d0]}}, {{IPA|[o\u02d0]}} and {{IPA|[u\u02d0]}}).<ref name=Helsinki>[http://www.acoustics.hut.fi/publications/files/theses/lemmetty_mst/chap2.html History and Development of Speech Synthesis], Helsinki University of Technology, Retrieved on November 4, 2006</ref> There followed the [[bellows]]-operated \"[[Wolfgang von Kempelen's Speaking Machine|acoustic-mechanical speech machine]]\" of [[Wolfgang von Kempelen]] of [[Pressburg]], [[Hungary]], described in a 1791 paper.<ref>''Mechanismus der menschlichen Sprache nebst der Beschreibung seiner sprechenden Maschine'' (\"Mechanism of the human speech with description of its speaking machine\", J. B. Degen, Wien). {{de icon}}</ref> This machine added models of the tongue and lips, enabling it to produce [[consonant]]s as well as vowels. In 1837, [[Charles Wheatstone]] produced a \"speaking machine\" based on von Kempelen's design, and in 1846, Joseph Faber exhibited the \"[[Euphonia (device)|Euphonia]]\". In 1923 Paget resurrected Wheatstone's design.<ref>{{Cite journal |last= Mattingly |first= Ignatius G. |title= Speech synthesis for phonetic and phonological models |editor1-first= Thomas A. |editor1-last= Sebeok |journal= Current Trends in Linguistics |volume= 12 |location= Mouton, The Hague |pages= 2451\u20132487 |year= 1974 |url= http://www.haskins.yale.edu/Reprints/HL0173.pdf }}</ref>\n\nIn the 1930s [[Bell Labs]] developed the [[vocoder]],  which automatically analyzed speech into its fundamental tones and resonances. From his work on the vocoder, [[Homer Dudley]] developed a keyboard-operated voice-synthesizer called [[The Voder]] (Voice Demonstrator), which he exhibited at the [[1939 New York World's Fair]].\n\n[[Franklin S. Cooper|Dr. Franklin S. Cooper]] and his colleagues at [[Haskins Laboratories]] built the [[Pattern playback]] in the late 1940s and completed it in 1950. There were several different versions of this hardware device; only one currently survives. The machine converts pictures of the acoustic patterns of speech in the form of a spectrogram back into sound. Using this device, [[Alvin Liberman]] and colleagues discovered acoustic cues for the perception of [[phonetic]] segments (consonants and vowels).\n\nDominant systems in the 1980s and 1990s were the [[DECtalk|MITalk]] system, based largely on the work of Dennis Klatt at MIT, and the Bell Labs system;<ref>{{Cite book |first1= Richard W. |last1= Sproat |title= Multilingual Text-to-Speech Synthesis: The Bell Labs Approach |publisher= Springer |year= 1997 |isbn= 0-7923-8027-4}}</ref> the latter was one of the first multilingual language-independent systems, making extensive use of [[natural language processing]] methods.\n\nEarly electronic speech-synthesizers sounded robotic and were often barely intelligible. The quality of synthesized speech has steadily improved, but {{as of | 2016 | lc = on}} output from contemporary speech synthesis systems remains clearly distinguishable from actual human speech.\n\nKurzweil predicted in 2005 that as the [[cost-performance ratio]] caused speech synthesizers to become cheaper and more accessible, more people would benefit from the use of text-to-speech programs.<ref>{{cite book\n  |last = Kurzweil\n  |first = Raymond\n  |authorlink = Raymond Kurzweil\n  |title = The Singularity is Near\n  |publisher = [[Penguin Books]]\n  |year = 2005\n  |isbn = 0-14-303788-9}}\n</ref>\n\n=== Electronic devices ===\n[[File:Computer and speech synthesiser housing, 19 (9663804888).jpg|thumb|right| Computer and speech synthesiser housing used by [[Stephen Hawking]] in 1999]]\nThe first computer-based speech-synthesis systems originated in the late 1950s. Noriko Umeda ''et al.'' developed the first general English text-to-speech system in 1968 at the Electrotechnical Laboratory, Japan.<ref>{{cite journal | last1 = Klatt | first1 = D | year = 1987 | title = Review of text-to-speech conversion for English | url = | journal = Journal of the Acoustical Society of America | volume = 82 | issue = 3| pages = 737\u201393 | doi= 10.1121/1.395275}}</ref> In 1961 physicist [[John Larry Kelly, Jr]] and his colleague [[Louis Gerstman]]<ref>{{cite news|last= Lambert |first= Bruce |url= http://www.nytimes.com/1992/03/21/nyregion/louis-gerstman-61-a-specialist-in-speech-disorders-and-processes.html |title= Louis Gerstman, 61, a Specialist In Speech Disorders and Processes |work= New York Times |date= March 21, 1992}}</ref> used an [[IBM 704]] computer to synthesize speech, an event among the most prominent in the history of [[Bell Labs]].{{citation needed|date=April 2016}} Kelly's voice recorder synthesizer ([[vocoder]]) recreated the song \"[[Daisy Bell]]\", with musical accompaniment from [[Max Mathews]]. Coincidentally, [[Arthur C. Clarke]] was visiting his friend and colleague John Pierce at the Bell Labs Murray Hill facility. Clarke was so impressed by the demonstration that he used it in the climactic scene of his screenplay for his novel ''[[2001: A Space Odyssey (novel)|2001: A Space Odyssey]]'',<ref>{{webarchive |url=https://web.archive.org/web/19971211154551/http://www.lsi.usp.br/~rbianchi/clarke/ACC.Biography.html |date=December 11, 1997 |title=Arthur C. Clarke Biography }}</ref> where the [[HAL 9000]] computer sings the same song as astronaut [[David Bowman (Space Odyssey)|Dave Bowman]] puts it to sleep.<ref>{{cite web|url= http://www.bell-labs.com/news/1997/march/5/2.html |title= Where \"HAL\" First Spoke (Bell Labs Speech Synthesis website) |publisher= Bell Labs |date= |accessdate= 2010-02-17}}</ref> Despite the success of purely electronic speech synthesis, research into mechanical speech-synthesizers continues.<ref>[http://www.takanishi.mech.waseda.ac.jp/top/research/voice/index.htm Anthropomorphic Talking Robot Waseda-Talker Series]</ref>\n\n[[Handheld]] electronics featuring speech synthesis began emerging in the 1970s. One of the first was the [[Telesensory Systems|Telesensory Systems Inc.]] (TSI) ''Speech+'' portable calculator for the blind in 1976.<ref>[http://www.vintagecalculators.com/html/speech_.html TSI Speech+ & other speaking calculators]</ref><ref>Gevaryahu, Jonathan, [http://si.fileburst.com/s14001a_reveng.pdf \"TSI S14001A Speech Synthesizer LSI Integrated Circuit Guide\"]{{dead link|date= December 2011}}</ref> Other devices had primarily educational purposes, such as the [[Speak & Spell (toy)|Speak & Spell toy]] produced by [[Texas Instruments]] in 1978.<ref>Breslow, et al. {{patent|US|4326710|title=Talking electronic game}}: \"Talking electronic game\", April 27, 1982</ref> Fidelity released a speaking version of its electronic chess computer in 1979.<ref>[http://www.ismenio.com/chess_fidelity_vcc.html Voice Chess Challenger]</ref>  The first [[video game]] to feature speech synthesis was the 1980 [[shoot 'em up]] [[arcade game]], ''[[Stratovox]]'' (known in Japan as ''Speak & Rescue''), from [[Sunsoft|Sun Electronics]].<ref>[http://www.gamesradar.com/f/gamings-most-important-evolutions/a-20101008102331322035/p-2 Gaming's most important evolutions], [[GamesRadar]]</ref> The first [[personal computer game]] with speech synthesis was ''[[Stealth game#History|Manbiki Shoujo]]'' (''Shoplifting Girl''), released in 1980 for the [[PET 2001]], for which the game's developer, Hiroshi Suzuki, developed a \"''zero cross''\" programming technique to produce a synthesized speech waveform.<ref>{{cite book |last=Szczepaniak |first=John |year=2014 |title=The Untold History of Japanese Game Developers |publisher=SMG Szczepaniak |volume=1 |pages=544\u2013615 |isbn=978-0992926007 }}</ref> Another early example, the arcade version of ''[[Berzerk (arcade game)|Berzerk]]'', also dates from 1980. The [[Milton Bradley Company]] produced the first multi-player [[electronic game]] using voice synthesis, ''[[Milton (game)|Milton]]'', in the same year.\n\n== Synthesizer technologies ==\n\nThe most important qualities of a speech synthesis system are ''naturalness'' and ''[[Intelligibility (communication)|intelligibility]]''.<ref>{{cite book|last1=Taylor|first1=Paul|title=Text-to-speech synthesis|date=2009|publisher=Cambridge University Press|location=Cambridge, UK|isbn=9780521899277|page=3}}</ref> Naturalness describes how closely the output sounds like human speech, while intelligibility is the ease with which the output is understood. The ideal speech synthesizer is both natural and intelligible. Speech synthesis systems usually try to maximize both characteristics.\n\nThe two primary technologies generating synthetic speech waveforms are ''concatenative synthesis'' and ''[[formant]] synthesis''. Each technology has strengths and weaknesses, and the intended uses of a synthesis system will typically determine which approach is used.\n\n=== Concatenation synthesis ===\n{{main article|Concatenative synthesis}}\nConcatenative synthesis is based on the [[concatenation]] (or stringing together) of segments of recorded speech. Generally, concatenative synthesis produces the most natural-sounding synthesized speech. However, differences between natural variations in speech and the nature of the automated techniques for segmenting the waveforms sometimes result in audible glitches in the output. There are three main sub-types of concatenative synthesis.\n\n==== Unit selection synthesis ====\n\nUnit selection synthesis uses large [[database]]s of recorded speech. During database creation, each recorded utterance is segmented into some or all of the following: individual [[phone (phonetics)|phones]], [[diphone]]s, half-phones, [[syllable]]s, [[morpheme]]s, [[word]]s, [[phrase]]s, and [[sentence (linguistics)|sentence]]s. Typically, the division into segments is done using a specially modified [[speech recognition|speech recognizer]] set to a \"forced alignment\" mode with some manual correction afterward, using visual representations such as the [[waveform]] and [[spectrogram]].<ref>[[Alan W. Black]], [http://www.cs.cmu.edu/~awb/papers/IEEE2002/allthetime/allthetime.html Perfect synthesis for all of the people all of the time.] IEEE TTS Workshop 2002.</ref> An [[index (database)|index]] of the units in the speech database is then created based on the segmentation and acoustic parameters like the [[fundamental frequency]] ([[pitch (music)|pitch]]), duration, position in the syllable, and neighboring phones. At [[Run time (program lifecycle phase)|run time]], the desired target utterance is created by determining the best chain of candidate units from the database (unit selection). This process is typically achieved using a specially weighted [[decision tree]].\n\nUnit selection provides the greatest naturalness, because it applies only a small amount of [[digital signal processing]] (DSP) to the recorded speech. DSP often makes recorded speech sound less natural, although some systems use a small amount of signal processing at the point of concatenation to smooth the waveform. The output from the best unit-selection systems is often indistinguishable from real human voices, especially in contexts for which the TTS system has been tuned. However, maximum naturalness typically require unit-selection speech databases to be very large, in some systems ranging into the [[gigabyte]]s of recorded data, representing dozens of hours of speech.<ref>John Kominek and [[Alan W. Black]]. (2003). CMU ARCTIC databases for speech synthesis. CMU-LTI-03-177. Language Technologies Institute, School of Computer Science, Carnegie Mellon University.</ref> Also, unit selection algorithms have been known to select segments from a place that results in less than ideal synthesis (e.g. minor words become unclear) even when a better choice exists in the database.<ref>Julia Zhang. [http://groups.csail.mit.edu/sls/publications/2004/zhang_thesis.pdf Language Generation and Speech Synthesis in Dialogues for Language Learning], masters thesis, Section 5.6 on page 54.</ref> Recently, researchers have proposed various automated methods to detect unnatural segments in unit-selection speech synthesis systems.<ref>William Yang Wang and Kallirroi Georgila. (2011). [http://www.cs.cmu.edu/~yww/papers/asru2011.pdf Automatic Detection of Unnatural Word-Level Segments in Unit-Selection Speech Synthesis], IEEE ASRU 2011.</ref>\n\n==== Diphone synthesis ====\n\nDiphone synthesis uses a minimal speech database containing all the [[diphone]]s (sound-to-sound transitions) occurring in a language. The number of diphones depends on the [[phonotactics]] of the language: for example, Spanish has about 800 diphones, and German about 2500. In diphone synthesis, only one example of each diphone is contained in the speech database. At runtime, the target [[prosody (linguistics)|prosody]] of a sentence is superimposed on these minimal units by means of [[digital signal processing]] techniques such as [[linear predictive coding]], [[PSOLA]]<ref>{{webarchive |url=https://web.archive.org/web/20070222180903/http://www.fon.hum.uva.nl/praat/manual/PSOLA.html |date=February 22, 2007 |title=Pitch-Synchronous Overlap and Add (PSOLA) Synthesis }}</ref> or [[MBROLA]].<ref>T. Dutoit, V. Pagel, N. Pierret, F. Bataille, O. van der Vrecken. The MBROLA Project: Towards a set of high quality speech synthesizers of use for non commercial purposes. ''ICSLP Proceedings'', 1996.</ref> or more recent techniques such as pitch modification in the source domain using [[discrete cosine transform]]<ref>{{cite journal | last1 = Muralishankar | first1 = R | last2 = Ramakrishnan | first2 = A.G. | last3 = Prathibha | first3 = P | year = 2004 | title = Modification of Pitch using DCT in the Source Domain | url = | journal = Speech Communication | volume = 42 | issue = 2| pages = 143\u2013154 | doi=10.1016/j.specom.2003.05.001}}</ref> Diphone synthesis suffers from the sonic glitches of concatenative synthesis and the robotic-sounding nature of formant synthesis, and has few of the advantages of either approach other than small size. As such, its use in commercial applications is declining,{{Citation needed|date=January 2012}} although it continues to be used in research because there are a number of freely available software implementations.\n\n==== Domain-specific synthesis ====\n\nDomain-specific synthesis concatenates prerecorded words and phrases to create complete utterances. It is used in applications where the variety of texts the system will output is limited to a particular domain, like transit schedule announcements or weather reports.<ref>L.F. Lamel, J.L. Gauvain, B. Prouts, C. Bouhier, R. Boesch. Generation and Synthesis of Broadcast Messages, ''Proceedings ESCA-NATO Workshop and Applications of Speech Technology'', September 1993.</ref>  The technology is very simple to implement, and has been in commercial use for a long time, in devices like talking clocks and calculators. The level of naturalness of these systems can be very high because the variety of sentence types is limited, and they closely match the prosody and intonation of the original recordings.{{Citation needed|date=February 2007}}\n\nBecause these systems are limited by the words and phrases in their databases, they are not general-purpose and can only synthesize the combinations of words and phrases with which they have been preprogrammed. The blending of words within naturally spoken language however can still cause problems unless the many variations are taken into account. For example, in [[rhotic and non-rhotic accents|non-rhotic]] dialects of English the ''\"r\"'' in words like ''\"clear\"'' {{IPA|/\u02c8kl\u026a\u0259/}} is usually only pronounced when the following word has a vowel as its first letter (e.g. ''\"clear out\"'' is realized as {{IPA|/\u02cckl\u026a\u0259\u027e\u02c8\u028c\u028at/}}). Likewise in [[French language|French]], many final consonants become no longer silent if followed by a word that begins with a vowel, an effect called [[Liaison (French)|liaison]]. This [[alternation (linguistics)|alternation]] cannot be reproduced by a simple word-concatenation system, which would require additional complexity to be [[context-sensitive grammar|context-sensitive]].\n\n=== Formant synthesis ===\n\n[[Formant]] synthesis does not use human speech samples at runtime. Instead, the synthesized speech output is created using [[additive synthesis]] and an acoustic model ([[physical modelling synthesis]]).<ref>Dartmouth College: [http://digitalmusics.dartmouth.edu/~book/MATCpages/chap.4/4.4.formant_synth.html ''Music and Computers''], 1993.</ref> Parameters such as [[fundamental frequency]], [[phonation|voicing]], and [[noise]] levels are varied over time to create a [[waveform]] of artificial speech. This method is sometimes called ''rules-based synthesis''; however, many concatenative systems also have rules-based components.\nMany systems based on formant synthesis technology generate artificial, robotic-sounding speech that would never be mistaken for human speech. However, maximum naturalness is not always the goal of a speech synthesis system, and formant synthesis systems have advantages over concatenative systems. Formant-synthesized speech can be reliably intelligible, even at very high speeds, avoiding the acoustic glitches that commonly plague concatenative systems. High-speed synthesized speech is used by the visually impaired to quickly navigate computers using a [[screen reader]]. Formant synthesizers are usually smaller programs than concatenative systems because they do not have a database of speech samples. They can therefore be used in [[embedded system]]s, where [[data storage device|memory]] and [[microprocessor]] power are especially limited. Because formant-based systems have complete control of all aspects of the output speech, a wide variety of prosodies and [[intonation (linguistics)|intonation]]s can be output, conveying not just questions and statements, but a variety of emotions and tones of voice.\n\nExamples of non-real-time but highly accurate intonation control in formant synthesis include the work done in the late 1970s for the [[Texas Instruments]] toy [[Speak & Spell (game)|Speak & Spell]], and in the early 1980s [[Sega]] [[Video arcade|arcade]] machines<ref>Examples include [[Astro Blaster]], [[Space Fury]], and [[Star Trek (arcade game)|Star Trek: Strategic Operations Simulator]]</ref> and in many [[Atari, Inc.]] arcade games<ref>Examples include [[Star Wars (arcade game)|Star Wars]], [[Firefox (arcade game)|Firefox]], [[Star Wars: Return of the Jedi (arcade game)|Return of the Jedi]], [[Road Runner (video game)|Road Runner]], [[Star Wars: The Empire Strikes Back (arcade game)|The Empire Strikes Back]], [[Indiana Jones and the Temple of Doom (arcade game)|Indiana Jones and the Temple of Doom]], [[720\u00b0]], [[Gauntlet (arcade game)|Gauntlet]], [[Gauntlet II]], [[A.P.B. (video game)|A.P.B.]], [[Paperboy (video game)|Paperboy]], [[RoadBlasters]],  [http://www.arcade-museum.com/game_detail.php?game_id=10319 Vindicators Part II], [[Escape from the Planet of the Robot Monsters]].</ref> using the [[Texas Instruments LPC Speech Chips|TMS5220 LPC Chips]]. Creating proper intonation for these projects was painstaking, and the results have yet to be matched by real-time text-to-speech interfaces.<ref>{{Cite book |author=John Holmes and Wendy Holmes |title=Speech Synthesis and Recognition |edition=2nd |publisher=CRC |year=2001 |isbn=0-7484-0856-8}}</ref>\n\n=== Articulatory synthesis ===\n\n[[Articulatory synthesis]] refers to computational techniques for synthesizing speech based on models of the human [[vocal tract]] and the articulation processes occurring there. The first articulatory synthesizer regularly used for laboratory experiments was developed at [[Haskins Laboratories]] in the mid-1970s by [[Philip Rubin]], Tom Baer, and Paul Mermelstein. This synthesizer, known as ASY, was based on vocal tract models developed at [[Bell Laboratories]] in the 1960s and 1970s by Paul Mermelstein, Cecil Coker, and colleagues.\n\nUntil recently, articulatory synthesis models have not been incorporated into commercial speech synthesis systems. A notable exception is the [[NeXT]]-based system originally developed and marketed by Trillium Sound Research, a spin-off company of the [[University of Calgary]], where much of the original research was conducted. Following the demise of the various incarnations of NeXT (started by [[Steve Jobs]] in the late 1980s and merged with Apple Computer in 1997), the Trillium software was published under the [[GNU General Public License]], with work continuing as [[gnuspeech]]. The system, first marketed in 1994, provides full articulatory-based text-to-speech conversion using a waveguide or transmission-line analog of the human oral and nasal tracts controlled by Carr\u00e9's \"distinctive region model\".\n\nMore recent synthesizers, developed by Jorge C. Lucero and colleagues, incorporate models of vocal fold biomechanics, glottal aerodynamics and acoustic wave propagation in the bronqui, traquea, nasal and oral cavities, and thus constitute full systems of physics-based speech simulation.<ref name=\":0\">{{Cite journal|url = http://www.cic.unb.br/~lucero/papers/768_Paper.pdf|title = Physics-based synthesis of disordered voices|last = Lucero|first = J. C.|date = 2013|journal = Interspeech 2013|doi = |pmid = |access-date = Aug 27, 2015|last2 = Schoentgen|first2 = J.|last3 = Behlau|first3 = M.|publisher = International Speech Communication Association|location = Lyon, France}}</ref><ref name=\":1\">{{Cite journal|last=Englert|first=Marina|last2=Madazio|first2=Glaucya|last3=Gielow|first3=Ingrid|last4=Lucero|first4=Jorge|last5=Behlau|first5=Mara|date=2016|title=Perceptual error identification of human and synthesized voices|url=http://dx.doi.org/10.1016/j.jvoice.2015.07.017|journal=Journal of Voice|volume=|issue=|doi=10.1016/j.jvoice.2015.07.017|pmid=|access-date=|via=}}</ref>\n\n=== HMM-based synthesis ===\n\nHMM-based synthesis is a synthesis method based on [[hidden Markov model]]s, also called Statistical Parametric Synthesis. In this system, the [[frequency spectrum]] ([[vocal tract]]), [[fundamental frequency]] (voice source), and duration ([[prosody (linguistics)|prosody]]) of speech are modeled simultaneously by HMMs. Speech [[waveforms]] are generated from HMMs themselves based on the [[maximum likelihood]] criterion.<ref>{{cite web|url=http://hts.sp.nitech.ac.jp/ |title=The HMM-based Speech Synthesis System |publisher=Hts.sp.nitech.ac.j |date= |accessdate=2012-02-22}}</ref>\n\n=== Sinewave synthesis ===\n[[Sinewave synthesis]] is a technique for synthesizing speech by replacing the [[formants]] (main bands of energy) with pure tone whistles.<ref>{{Cite journal\n| last1 = Remez | first1 = R.\n| last2 = Rubin | first2 = P.\n| last3 = Pisoni | first3 = D.\n| last4 = Carrell | first4 = T.\n| title = Speech perception without traditional speech cues\n| doi = 10.1126/science.7233191\n| journal = Science\n| volume = 212\n| issue = 4497\n| pages = 947\u2013949\n| date = 22 May 1981\n| pmid =  7233191\n| url = http://www.bsos.umd.edu/hesp/mwinn/Remez_et_al_1981.pdf\n}}<!-- in case PDF link dies, paper also available here and here:\nhttp://people.ece.cornell.edu/land/courses/ece4760/Speech/remez_rubin_pisoni_carrell1981.pdf\nhttp://www.haskins.yale.edu/Reprints/HL0338.pdf --></ref>\n\n== Challenges ==\n\n=== Text normalization challenges ===\n\nThe process of normalizing text is rarely straightforward. Texts are full of [[heteronym (linguistics)|heteronym]]s, [[number]]s, and [[abbreviation]]s that all require expansion into a phonetic representation. There are many spellings in English which are pronounced differently based on context. For example, \"My latest project is to learn how to better project my voice\" contains two pronunciations of \"project\".\n\nMost text-to-speech (TTS) systems do not generate [[Semantics#Linguistics|semantic]] representations of their input texts, as processes for doing so are unreliable, poorly understood, and computationally ineffective. As a result, various [[heuristic]] techniques are used to guess the proper way to disambiguate [[homograph]]s, like examining neighboring words and using statistics about frequency of occurrence.\n\nRecently TTS systems have begun to use HMMs (discussed above) to generate \"[[Part-of-speech tagging|parts of speech]]\" to aid in disambiguating homographs.  This technique is quite successful for many cases such as whether \"read\" should be pronounced as \"red\" implying past tense, or as \"reed\" implying present tense.  Typical error rates when using HMMs in this fashion are usually below five percent.  These techniques also work well for most European languages, although access to required training [[Text corpus|corpora]] is frequently difficult in these languages.\n\nDeciding how to convert numbers is another problem that TTS systems have to address. It is a simple programming challenge to convert a number into words (at least in English), like \"1325\" becoming \"one thousand three hundred twenty-five.\" However, numbers occur in many different contexts; \"1325\" may also be read as \"one three two five\", \"thirteen twenty-five\" or \"thirteen hundred and twenty five\". A TTS system can often infer how to expand a number based on surrounding words, numbers, and punctuation, and sometimes the system provides a way to specify the context if it is ambiguous.<ref>{{cite web | title = Speech synthesis | publisher = World Wide Web Organization | url = http://www.w3.org/TR/speech-synthesis/#S3.1.8}}</ref> Roman numerals can also be read differently depending on context.  For example, \"Henry VIII\" reads as \"Henry the Eighth\", while \"Chapter VIII\" reads as \"Chapter Eight\".\n\nSimilarly, abbreviations can be ambiguous. For example, the abbreviation \"in\" for \"inches\" must be differentiated from the word \"in\", and the address \"12 St John St.\" uses the same abbreviation for both \"Saint\" and \"Street\". TTS systems with intelligent front ends can make educated guesses about ambiguous abbreviations, while others provide the same result in all cases, resulting in nonsensical (and sometimes comical) outputs, such as \"co-operation\" being rendered as \"company operation\".\n\n=== Text-to-phoneme challenges ===\n\nSpeech synthesis systems use two basic approaches to determine the pronunciation of a word based on its [[spelling]], a process which is often called text-to-phoneme or [[grapheme]]-to-phoneme conversion ([[phoneme]] is the term used by [[Linguistics|linguists]] to describe distinctive sounds in a [[language]]). The simplest approach to text-to-phoneme conversion is the dictionary-based approach, where a large dictionary containing all the words of a language and their correct [[pronunciation]]s is stored by the program. Determining the correct pronunciation of each word is a matter of looking up each word in the dictionary and replacing the spelling with the pronunciation specified in the dictionary. The other approach is rule-based, in which pronunciation rules are applied to words to determine their pronunciations based on their spellings. This is similar to the \"sounding out\", or [[synthetic phonics]], approach to learning reading.\n\nEach approach has advantages and drawbacks. The dictionary-based approach is quick and accurate, but completely fails if it is given a word which is not in its dictionary. As dictionary size grows, so too does the memory space requirements of the synthesis system. On the other hand, the rule-based approach works on any input, but the complexity of the rules grows substantially as the system takes into account irregular spellings or pronunciations. (Consider that the word \"of\" is very common in English, yet is the only word in which the letter \"f\" is pronounced [v].) As a result, nearly all speech synthesis systems use a combination of these approaches.\n\nLanguages with a [[phonemic orthography]] have a very regular writing system, and the prediction of the pronunciation of words based on their spellings is quite successful. Speech synthesis systems for such languages often use the rule-based method extensively, resorting to dictionaries only for those few words, like foreign names and [[Loanword|borrowings]], whose pronunciations are not obvious from their spellings. On the other hand, speech synthesis systems for languages like [[English language|English]], which have extremely irregular spelling systems, are more likely to rely on dictionaries, and to use rule-based methods only for unusual words, or words that aren't in their dictionaries.\n\n=== Evaluation challenges ===\nThe consistent evaluation of speech synthesis systems may be difficult because of a lack of universally agreed objective evaluation criteria. Different organizations often use different speech data. The quality of speech synthesis systems also depends on the quality of the production technique (which may involve analogue or digital recording) and on the facilities used to replay the speech. Evaluating speech synthesis systems has therefore often been compromised by differences between production techniques and replay facilities.\n\nSince 2005, however, some researchers have started to evaluate speech synthesis systems using a common speech dataset.<ref>{{cite web|url=http://festvox.org/blizzard |title=Blizzard Challenge |publisher=Festvox.org |date= |accessdate=2012-02-22}}</ref>\n\n=== Prosodics and emotional content ===\n{{See also|Prosody (linguistics)}}\nA study in the journal ''Speech Communication'' by Amy Drahota and colleagues at the [[University of Portsmouth]], [[UK]], reported that listeners to voice recordings could determine, at better than chance levels, whether or not the speaker was smiling.<ref>{{Cite news |title=Smile -and the world can hear you |date=January 9, 2008 |url=http://www.port.ac.uk/aboutus/newsandevents/news/title,74220,en.html |archivedate=2008-05-17 |archiveurl=https://web.archive.org/web/20080517102201/http://www.port.ac.uk/aboutus/newsandevents/news/title,74220,en.html |publisher=University of Portsmouth}}</ref><ref>{{Cite news |title=Smile - And The World Can Hear You, Even If You Hide |work=Science Daily |date=January 2008 |url=http://www.sciencedaily.com/releases/2008/01/080111224745.htm}}</ref><ref>{{Cite journal\n| last1 = Drahota | first1 = A.\n| title = The vocal communication of different kinds of smile\n| doi = 10.1016/j.specom.2007.10.001\n| journal = Speech Communication\n| volume = 50\n| issue = 4\n| pages = 278\u2013287\n| year = 2008\n| url = http://peer.ccsd.cnrs.fr/docs/00/49/91/97/PDF/PEER_stage2_10.1016%252Fj.specom.2007.10.001.pdf\n}}<!-- also available here: http://ganymedes.lib.unideb.hu:8080/udpeer/bitstream/2437.2/2984/1/PEER_stage2_10.1016%252Fj.specom.2007.10.001.pdf --></ref> It was suggested that identification of the vocal features that signal emotional content may be used to help make synthesized speech sound more natural. One of the related issues is modification of the [[pitch contour]] of the sentence, depending upon whether it is an affirmative, interrogative or exclamatory sentence. One of the techniques for pitch modification<ref>{{cite journal|last1=Muralishankar|first1=R.|last2=Ramakrishnan|first2=A. G.|last3=Prathibha|first3=P.|title=Modification of pitch using DCT in the source domain|journal=Speech Communication|date=February 2004|volume=42|issue=2|pages=143\u2013154|doi=10.1016/j.specom.2003.05.001|url=http://www.sciencedirect.com/science/article/pii/S0167639303001080|accessdate=7 December 2014}}</ref> uses [[discrete cosine transform]] in the source domain ([[linear prediction]] residual). Such pitch synchronous pitch modification techniques need a priori pitch marking of the synthesis speech database using techniques such as epoch extraction using dynamic [[Plosive|plosion]] index applied on the integrated linear prediction residual of the [[Voice (phonetics)|voiced]] regions of speech.<ref>{{cite journal|last1=Prathosh|first1=A. P.|last2=Ramakrishnan|first2=A. G.|last3=Ananthapadmanabha|first3=T. V.|title=Epoch extraction based on integrated linear prediction residual using plosion index|journal=IEEE Trans. Audio Speech Language Processing|date=December 2013|volume=21|issue=12|pages=2471\u20132480|doi=10.1109/TASL.2013.2273717|url=http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6562799|accessdate=19 December 2014}}</ref>\n\n== Dedicated hardware ==\n\nEarly Technology (not available anymore)\n* [[Icophone]]\n* Votrax\n** SC-01A (analog formant)\n** SC-02 / SSI-263 / \"Artic 263\"\n* [[General Instrument SP0256-AL2]] (CTS256A-AL2)\n* [[National Semiconductor]] DT1050 Digitalker (Mozer - [[Forrest Mozer]])\n* Silicon Systems SSI 263 (analog formant)\n* [[Texas Instruments LPC Speech Chips]]\n** TMS5110A\n** TMS5200\n** MSP50C6XX - Sold to [[Sensory, Inc.]] in 2001<ref name = \"TI will exit dedicated speech-synthesis chips, transfer products to Sensory\">EE Times. \"[http://www.eetimes.com/electronics-news/4102385/TI-will-exit-dedicated-speech-synthesis-chips-transfer-products-to-Sensory TI will exit dedicated speech-synthesis chips, transfer products to Sensory].\" June 14, 2001.</ref>\n\nCurrent (as of 2013)\n\n* Magnevation SpeakJet (www.speechchips.com) TTS256 Hobby and experimenter.\n* Epson S1V30120F01A100 (www.epson.com) IC DECTalk Based voice, Robotic, Eng/Spanish\n* [[:File:TextSpeak Embedded Text to Speech on a Chip.jpg|Textspeak TTS-EM]]  (www.textspeak.com)  ICs, Modules and Industrial enclosures in 24 languages. Human sounding, Phoneme based.\n\n==Hardware and software systems==\nPopular systems offering speech synthesis as a built-in capability.\n\n===Mattel===\nThe [[Mattel]] [[Intellivision]] game console offered the [[Intellivoice]] Voice Synthesis module in 1982. It included the SP0256 Narrator speech synthesizer chip on a removable cartridge. The Narrator had 2kB of Read-Only Memory (ROM), and this was utilized to store a database of generic words that could be combined to make phrases in Intellivision games. Since the Orator chip could also accept speech data from external memory, any additional words or phrases needed could be stored inside the cartridge itself. The data consisted of strings of analog-filter coefficients to modify the behavior of the chip's synthetic vocal-tract model, rather than simple digitized samples.\n\n===SAM===\nAlso released in 1982, [[Software Automatic Mouth]] was the first commercial all-software voice synthesis program. It was later used as the basis for [[Macintalk]]. The program was available for non-Macintosh Apple computers (including the Apple II, and the Lisa), various Atari models and the Commodore 64. The Apple version preferred additional hardware that contained DACs, although it could instead use the computer's one-bit audio output (with the addition of much distortion) if the card was not present. The Atari made use of the embedded POKEY audio chip. Speech playback on the Atari normally disabled interrupt requests and shut down the ANTIC chip during vocal output. The audible output is extremely distorted speech when the screen is on. The Commodore 64 made use of the 64's embedded SID audio chip.\n\n=== Atari ===\nArguably, the first speech system integrated into an [[operating system]] was the 1400XL/1450XL personal computers designed by [[Atari, Inc.]] using the Votrax SC01 chip in 1983. The 1400XL/1450XL computers used a Finite State Machine to enable World English Spelling text-to-speech synthesis.<ref>{{cite web|url=http://www.atarimuseum.com/ahs_archives/archives/pdf/computers/8bits/1400xlmodem.pdf |title=1400XL/1450XL Speech Handler External Reference Specification |format=PDF |date= |accessdate=2012-02-22}}</ref> Unfortunately, the 1400XL/1450XL personal computers never shipped in quantity.\n\nThe [[Atari ST]] computers were sold with \"stspeech.tos\" on floppy disk.\n\n=== Apple ===\n\nThe first speech system integrated into an [[operating system]] that shipped in quantity was [[Apple Computer]]'s [[PlainTalk#Original MacInTalk|MacInTalk]]. The software was licensed from 3rd party developers Joseph Katz and Mark Barton (later, SoftVoice, Inc.) and was featured during the 1984 introduction of the Macintosh computer. This January demo required 512 kilobytes of RAM memory. As a result, it could not run in the 128 kilobytes of RAM the first Mac actually shipped with.<ref name=\"demo\">{{cite web|url=http://www.folklore.org/StoryView.py?story=Intro_Demo.txt |title=It Sure Is Great To Get Out Of That Bag! |publisher=folklore.org |accessdate=2013-03-24}}</ref> So, the demo was accomplished with a prototype 512k Mac, although those in attendance were not told of this and the synthesis demo created considerable excitement for the Macintosh. In the early 1990s Apple expanded its capabilities offering system wide text-to-speech support. With the introduction of faster PowerPC-based computers they included higher quality voice sampling. Apple also introduced [[speech recognition]] into its systems which provided a fluid command set. More recently, Apple has added sample-based voices. Starting as a curiosity, the speech system of Apple [[Macintosh (computer)|Macintosh]] has evolved into a fully supported program, [[PlainTalk]], for people with vision problems. [[VoiceOver]] was for the first time featured in Mac OS X Tiger (10.4). During 10.4 (Tiger) & first releases of 10.5 (Leopard) there was only one standard voice shipping with Mac OS X. Starting with 10.6 (Snow Leopard), the user can choose out of a wide range list of multiple voices. VoiceOver voices feature the taking of realistic-sounding breaths between sentences, as well as improved clarity at high read rates over PlainTalk. Mac OS X also includes [[say (software)|say]], a [[Command-line interface|command-line based]] application that converts text to audible speech. The [[AppleScript]] Standard Additions includes a [[say (software)|say]] verb that allows a script to use any of the installed voices and to control the pitch, speaking rate and modulation of the spoken text.\n\nThe Apple [[IOS (Apple)|iOS]] operating system used on the iPhone, iPad and iPod Touch uses [[VoiceOver]] speech synthesis for accessibility.<ref name=\"configure\">{{cite web|url=http://support.apple.com/kb/ht3577 |title=iPhone: Configuring accessibility features (Including VoiceOver and Zoom) |publisher=Apple |accessdate=2011-01-29}}</ref> Some third party applications also provide speech synthesis to facilitate navigating, reading web pages or translating text.\n\n=== AmigaOS ===\n\n[[File:SoftVoice.svg|right]]\nThe second operating system to feature advanced speech synthesis capabilities was [[AmigaOS]], introduced in 1985. The voice synthesis was licensed by [[Commodore International]] from SoftVoice, Inc., who also developed the original MacinTalk text-to-speech system. It featured a complete system of voice emulation for American English, with both male and female voices and \"stress\" indicator markers, made possible through the [[Amiga]]'s audio [[chipset]].<ref>{{Cite book |author=[[Jay Miner|Miner, Jay]] |year=1991 |title=Amiga Hardware Reference Manual |edition=3rd |publisher=[[Addison-Wesley]] Publishing Company, Inc. |isbn=0-201-56776-8|display-authors=etal}}</ref> The synthesis system was divided into a translator library which converted unrestricted English text into a standard set of phonetic codes and a narrator device which implemented a formant model of speech generation.. AmigaOS also featured a high-level \"[[AmigaOS#Speech synthesis|Speak Handler]]\", which allowed command-line users to redirect text output to speech. Speech synthesis was occasionally used in third-party programs, particularly word processors and educational software. The synthesis software remained largely unchanged from the first AmigaOS release and Commodore eventually removed speech synthesis support from AmigaOS 2.1 onward.\n\nDespite the American English phoneme limitation, an unofficial version with multilingual speech synthesis was developed. This made use of an enhanced version of the translator library which could translate a number of languages, given a set of rules for each language.<ref>{{cite web |url=http://uk.aminet.net/util/libs/translator42.readme |title=Translator Library (Multilingual-speech version) |last1=Devitt |first1=Francesco |date=30 June 1995|accessdate=9 April 2013}}</ref>\n\n=== Microsoft Windows ===\n{{See also|Microsoft Agent}}\n\nModern [[Microsoft Windows|Windows]] desktop systems can use [[Speech Application Programming Interface#SAPI 1-4 API family|SAPI 4]] and [[Speech Application Programming Interface#SAPI 5 API family|SAPI 5]] components to support speech synthesis and [[speech recognition]]. SAPI 4.0 was available as an optional add-on for [[Windows 95]] and [[Windows 98]]. [[Windows 2000]] added [[Microsoft Narrator|Narrator]], a text\u2013to\u2013speech utility for people who have visual impairment. Third-party programs such as JAWS for Windows, Window-Eyes, Non-visual Desktop Access, Supernova and System Access can perform various text-to-speech tasks such as reading text aloud from a specified website, email account, text document, the Windows clipboard, the user's keyboard typing, etc. Not all programs can use speech synthesis directly.<ref name=\"Narrator\">{{cite web|url=http://www.microsoft.com/enable/training/windowsxp/usingnarrator.aspx |title=Accessibility Tutorials for Windows XP: Using Narrator |publisher=Microsoft |date=2011-01-29 |accessdate=2011-01-29}}</ref> Some programs can use plug-ins, extensions or add-ons to read text aloud. Third-party programs are available that can read text from the system clipboard.\n\n[[Microsoft Speech Server]] is a server-based package for voice synthesis and recognition. It is designed for network use with [[web applications]] and [[call centers]].\n\n=== Texas Instruments TI-99/4A ===\nIn the early 1980s, TI was known as a pioneer in speech synthesis, and a highly popular plug-in speech synthesizer module was available for the TI-99/4 and 4A. Speech synthesizers were offered free with the purchase of a number of cartridges and were used by many TI-written video games (notable titles offered with speech during this promotion were Alpiner and Parsec). The synthesizer uses a variant of linear predictive coding and has a small in-built vocabulary. The original intent was to release small cartridges that plugged directly into the synthesizer unit, which would increase the device's built in vocabulary. However, the success of software text-to-speech in the Terminal Emulator II cartridge cancelled that plan.\n\n==Text-to-speech systems==\n'''Text-to-Speech''' ('''TTS''') refers to the ability of computers to read text aloud. A '''TTS Engine''' converts written text to a phonemic representation, then converts the phonemic representation to waveforms that can be output as sound. TTS engines with different languages, dialects and specialized vocabularies are available through third-party publishers.<ref name=\"microsoft.com\">{{cite web|url=http://support.microsoft.com/kb/306902 |title=How to configure and use Text-to-Speech in Windows XP and in Windows Vista |publisher=Microsoft  |date=2007-05-07 |accessdate=2010-02-17}}</ref>\n\n=== Android ===\n\nVersion 1.6 of [[Android (operating system)|Android]] added support for speech synthesis (TTS).<ref>{{cite web |author = Jean-Michel Trivi |date=2009-09-23 |url=http://android-developers.blogspot.com/2009/09/introduction-to-text-to-speech-in.html |title=An introduction to Text-To-Speech in Android |publisher=Android-developers.blogspot.com |accessdate=2010-02-17}}</ref>\n\n=== Internet ===\nCurrently, there are a number of [[application software|applications]], [[Plug-in (computing)|plugins]] and [[gadget]]s that can read messages directly from an [[e-mail client]] and web pages from a [[web browser]] or [[Google Toolbar]], such as [[Text to Voice (Firefox)|Text to Voice]], which is an add-on to [[Firefox]]. Some specialized [[software]] can narrate [[RSS|RSS-feeds]]. On one hand, online RSS-narrators simplify information delivery by allowing users to listen to their favourite news sources and to convert them to [[podcast]]s. On the other hand, on-line RSS-readers are available on almost any [[Personal computer|PC]] connected to the Internet. Users can download generated audio files to portable devices, e.g. with a help of [[podcast]] receiver, and listen to them while walking, jogging or commuting to work.\n\nA growing field in Internet based TTS is web-based [[assistive technology]], e.g. '[[Browsealoud]]' from a UK company and [[Readspeaker]]. It can deliver TTS functionality to anyone (for reasons of accessibility, convenience, entertainment or information) with access to a web browser. The [[non-profit]] project [[Wikipedia:Pediaphon|Pediaphon]] was created in 2006 to provide a similar web-based TTS interface to the [[Wikipedia]].<ref>Andreas Bischoff, [http://www.dr-bischoff.de/research/pdf/bischoff_pediaphon_uwsi2007_final.pdf The Pediaphon - Speech Interface to the free Wikipedia Encyclopedia for Mobile Phones], PDA's and MP3-Players, Proceedings of the 18th International Conference on Database and Expert Systems Applications,  Pages: 575-579 ISBN 0-7695-2932-1, 2007</ref>\n\nOther work is being done in the context of the [[W3C]]  through the [http://www.w3.org/2010/04/audio/audio-incubator-charter.html W3C Audio Incubator Group] with the involvement of The BBC and Google Inc.\n\n===Open source===\nSystems that operate on free and open source software systems including [[Linux]] are various, and include [[open-source]] programs such as the [[Festival Speech Synthesis System]] which uses diphone-based synthesis, as well as more modern and better-sounding techniques, [[eSpeak]], which supports a broad range of languages, and [[gnuspeech]] which uses articulatory synthesis<ref>{{cite web|url=https://www.gnu.org/software/gnuspeech/ |title=gnuspeech |publisher=Gnu.org |accessdate=2010-02-17}}</ref> from the [[Free Software Foundation]].\n\n=== Others ===\n* Following the commercial failure of the hardware-based Intellivoice, gaming developers sparingly used software synthesis in later games. A famous example is the introductory narration of Nintendo's [[Super Metroid]] game for the [[Super Nintendo Entertainment System]]. Earlier systems from Atari, such as the [[Atari 5200]] (Baseball) and the [[Atari 2600]] ([[Quadrun]] and Open Sesame), also had games utilizing software synthesis.\n* Some [[e-book readers]], such as the [[Amazon Kindle]], [[Samsung]] E6, [[PocketBook eReader]] Pro, [[enTourage eDGe]], and the Bebook Neo.\n* The [[BBC Micro]] incorporated the Texas Instruments TMS5220 speech synthesis chip,\n* Some models of Texas Instruments home computers produced in 1979 and 1981 ([[TI-99/4A|Texas Instruments TI-99/4 and TI-99/4A]]) were capable of text-to-phoneme synthesis or reciting complete words and phrases (text-to-dictionary), using a very popular Speech Synthesizer peripheral. TI used a proprietary [[codec]] to embed complete spoken phrases into applications, primarily video games.<ref>{{cite web|url=http://www.mindspring.com/~ssshp/ssshp_cd/ss_home.htm |title=Smithsonian Speech Synthesis History Project (SSSHP) 1986-2002 |publisher=Mindspring.com |date= |accessdate=2010-02-17}}</ref>\n* [[IBM]]'s [[OS/2 Warp|OS/2 Warp 4]] included VoiceType, a precursor to [[IBM ViaVoice]].\n* [[Global Positioning System|GPS]] Navigation units produced by [[Garmin]], [[Magellan Navigation|Magellan]], [[TomTom]] and others use speech synthesis for automobile navigation.\n* [[Yamaha]] produced a music synthesizer in 1999, the [[Yamaha FS1R]] which included a Formant synthesis capability.  Sequences of up to 512 individual vowel and consonant formants could be stored and replayed, allowing short vocal phrases to be synthesized.\n\n== Speech synthesis markup languages ==\n\nA number of [[markup language]]s have been established for the rendition of text as speech in an [[XML]]-compliant format. The most recent is [[Speech Synthesis Markup Language]] (SSML), which became a [[W3C recommendation]] in 2004. Older speech synthesis markup languages include Java Speech Markup Language ([[JSML]]) and [[SABLE]]. Although each of these was proposed as a standard, none of them have been widely adopted.\n\nSpeech synthesis markup languages are distinguished from dialogue markup languages. [[VoiceXML]], for example, includes tags related to speech recognition, dialogue management and touchtone dialing, in addition to text-to-speech markup.\n\n== Applications ==\n\nSpeech synthesis has long been a vital [[assistive technology]] tool and its application in this area is significant and widespread. It allows environmental barriers to be removed for people with a wide range of disabilities. The longest application has been in the use of [[screen reader]]s for people with [[visual impairment]], but text-to-speech systems are now commonly used by people with [[dyslexia]] and other reading difficulties as well as by pre-literate children. They are also frequently employed to aid those with severe [[speech impairment]] usually through a dedicated [[voice output communication aid]].\n\nSpeech synthesis techniques are also used in entertainment productions such as games and animations. In 2007, Animo Limited announced the development of a software application package based on its speech synthesis software FineSpeech, explicitly geared towards customers in the entertainment industries, able to generate narration and lines of dialogue according to user specifications.<ref>{{cite web|url=http://www.animenewsnetwork.com/news/2007-05-02/speech-synthesis-software |title=Speech Synthesis Software for Anime Announced |publisher=Anime News Network |date=2007-05-02 |accessdate=2010-02-17}}</ref> The application reached maturity in 2008, when NEC [[Biglobe]] announced a web service that allows users to create phrases from the voices of [[Code Geass: Lelouch of the Rebellion R2]] characters.<ref>{{cite web|url=http://www.animenewsnetwork.com/news/2008-09-09/code-geass-voice-synthesis-service-offered-in-japan |title=Code Geass Speech Synthesizer Service Offered in Japan |publisher=Animenewsnetwork.com |date=2008-09-09 |accessdate=2010-02-17}}</ref>\n\nIn recent years, Text to Speech for disability and handicapped communication aids have become widely deployed in Mass Transit. Text to Speech is also finding new applications outside the disability market. For example, speech synthesis, combined with [[speech recognition]], allows for interaction with mobile devices via [[natural language processing]] interfaces.\n\nText-to speech is also used in second language acquisition. Voki, for instance, is an educational tool created by Oddcast that allows users to create their own talking avatar, using different accents. They can be emailed, embedded on websites or shared on social media.\n\nIn addition, speech synthesis is a valuable computational aid for the analysis and assessment of speech disorders. A [[voice quality]] synthesizer, developed by Jorge C. Lucero et al. at [[University of Bras\u00edlia|University of Brasilia]], simulates the physics of [[phonation]] and includes models of vocal frequency jitter and tremor, airflow noise and laryngeal asymmetries.<ref name=\":0\" />  The synthesizer has been used to mimic the [[timbre]] of [[dysphonic]] speakers with controlled levels of roughness, breathiness and strain.<ref name=\":1\" />\n\n== APIs ==\nMultiple companies offer TTS [[API]]s to their customers to accelerate development of new applications utilizing TTS technology. Companies offering TTS APIs include [[AT&T]], [[CereProc]], [[DIOTEK]], [[IVONA]], [[Neospeech]], [[Readspeaker]], [[SYNVO]], [[YAKiToMe!]] and [[CPqD]]. For mobile app development, [[Android (operating system)|Android]] operating system has been offering text to speech API for a long time. Most recently, with [[iOS7]], [[Apple Inc.|Apple]] started offering an API for text to speech.\n[[File:Stephen Hawking.StarChild.jpg|thumb|right|[[Stephen Hawking]] is one of the most famous people using a speech computer to communicate]]\n\n== See also ==\n{{columns-list|2|\n* [[Chinese speech synthesis]]\n* [[Comparison of screen readers]]\n* [[Comparison of speech synthesizers]]\n* [[Euphonia (device)]]\n* [[Paperless office]]\n* [[Speech processing]]\n* [[Silent speech interface]]\n* [[Text to speech in digital television]]\n}}\n\n== References ==\n{{reflist|30em}}\n\n== External links ==\n*[http://texttospeechrobot.com Text to Voice or Text to Speech Online,Multilanguage Compatible devices: Desktop PC, Laptop, Tablet, Phones.],Natural TTS based on human speech recordings.\n*{{dmoz|Computers/Speech_Technology/Speech_Synthesis/}}\n*[http://www.cic.unb.br/~lucero/synthesis_en.html Synthesis of disordered voices], at University of Brasilia.\n*[https://addons.mozilla.org/en-US/firefox/addon/text-to-voice/ Text to Voice or Text to Speech Firefox Addon]\n*[http://www.cs.indiana.edu/rhythmsp/ASA/Contents.html Dennis Klatt's History of Speech Synthesis]\n*[http://www.youtube.com/watch?v=CE6zy8aUwtQ Simulated singing with the singing robot Pavarobotti] or a description from the [[BBC]] on [http://www.youtube.com/watch?v=SNqNM6Ccck8 how the robot synthesized the singing].\n*[http://communicationaids.info/history-speech-synthesisers/ 'Klatt's Last Tapes'] a [[BBC]] Radio 4 programme on the history of speech synthesis with many examples of electronic speech included.\n*[http://mile.ee.iisc.ernet.in:8080/tts_demo Tamil and Kannada TTS demo by [[Medical intelligence and language engineering lab]], [[Indian Institute of Science]].]\n*[http://blog.neospeech.com/2015/07/14/what-is-text-to-speech/ What is Text-to-Speech and How Does it Work? A basic explanation of TTS and USS Synthesis by [[Neospeech]].]\n\n{{sound synthesis types}}\n{{Speech synthesis}}\n{{Natural Language Processing}}\n\n{{Authority control}}\n\n{{DEFAULTSORT:Speech Synthesis}}\n[[Category:Speech synthesis| ]]\n[[Category:Artificial intelligence applications]]\n[[Category:Assistive technology]]\n[[Category:Auditory displays]]\n[[Category:Computational linguistics]]\n[[Category:History of human\u2013computer interaction]]"}]}}}}