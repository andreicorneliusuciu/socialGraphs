{"batchcomplete":"","query":{"normalized":[{"from":"Finite_element_method","to":"Finite element method"}],"pages":{"18233581":{"pageid":18233581,"ns":0,"title":"Finite element method","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{Redirect|Finite element|the elements of a [[poset]]|compact element}}\n{{technical|date=September 2012}}\n{{Differential equations}}\n\nThe '''finite element method''' ('''FEM''') is a [[numerical analysis|numerical technique]] for finding approximate solutions to [[boundary value problem]]s for [[partial differential equations]]. It is also referred to as '''finite element analysis''' ('''FEA'''). It subdivides a large problem into smaller, simpler parts that are called finite elements. The simple equations that model these finite elements are then assembled into a larger system of equations that models the entire problem. FEM then uses [[variational methods]] from the [[calculus of variations]] to approximate a solution by minimizing an associated error function.\n\n==Basic concepts==\n\nThe subdivision of a whole domain into simpler parts has several advantages:<ref>{{cite book | first1=J.N. | last1= Reddy | title= An Introduction to the Finite Element Method | edition=Third | publisher=McGraw-Hill | year=2006 | isbn=9780071267618}}</ref>\n*Accurate representation of complex geometry\n*Inclusion of dissimilar material properties\n*Easy representation of the total solution\n*Capture of local effects.\n\nA typical work out of the method involves (1) dividing the domain of the problem into a collection of subdomains, with each subdomain represented by a set of element equations to the original problem, followed by (2) systematically recombining all sets of element equations into a global system of equations for the final calculation. The global system of equations has known solution techniques, and can be calculated from the [[initial value]]s of the original problem to obtain a numerical answer.\n\nIn the first step above, the element equations are simple equations that locally approximate the original complex equations to be studied, where the original equations are often  [[partial differential equation]]s (PDE). To explain the approximation in this process, FEM is commonly introduced as a special case of [[Galerkin method]]. The process, in mathematical language, is to construct an integral of the [[inner product]] of the residual and the weight functions and set the integral to zero. In simple terms, it is a procedure that minimizes the error of approximation by fitting trial functions into the PDE. The residual is the error caused by the trial functions, and the weight functions are [[polynomial]] approximation functions that project the residual. The process eliminates all the spatial derivatives from the PDE, thus approximating the PDE locally with\n*a set of [[algebraic equations]] for [[steady state]] problems,\n*a set of [[ordinary differential equation]]s for [[transient state|transient]] problems.\n\nThese equation sets are the element equations.  They are [[linear]] if the underlying PDE is linear, and vice versa. Algebraic equation sets that arise in the steady state problems are solved using [[numerical linear algebra]] methods, while ordinary differential equation sets that arise in the transient problems are solved by numerical integration using standard techniques such as [[Euler's method]] or the [[Runge-Kutta]] method.\n\nIn step (2) above, a global system of equations is generated from the element equations through a transformation of coordinates from the subdomains' local nodes to the domain's global nodes. This spatial transformation includes appropriate [[Transformation matrix|orientation adjustment]]s as applied in relation to the reference [[coordinate system]]. The process is often carried out by FEM software using [[coordinates|coordinate]] data generated from the subdomains.\n\nFEM is best understood from its practical application, known as '''finite element analysis (FEA)'''. FEA as applied in [[engineering]] is a computational tool for performing [[engineering analysis]]. It includes the use of [[mesh generation]] techniques for dividing a [[complex system|complex problem]] into small elements, as well as the use of [[software]] program coded with FEM algorithm. In applying FEA, the complex problem is usually a physical system with the underlying [[physics]] such as the [[Euler-Bernoulli beam equation]], the [[heat equation]], or the [[Navier-Stokes equations]] expressed in either PDE or [[integral equation]]s, while the divided small elements of the complex problem represent different areas in the physical system.\n\nFEA is a good choice for analyzing problems over complicated domains (like cars and oil pipelines), when the domain changes (as during a solid state reaction with a moving boundary), when the desired precision varies over the entire domain, or when the solution lacks smoothness. For instance, in a frontal crash simulation it is possible to increase prediction accuracy in \"important\" areas like the front of the car and reduce it in its rear (thus reducing cost of the simulation). Another example would be in [[numerical weather prediction]], where it is more important to have accurate predictions over developing highly nonlinear phenomena (such as [[tropical cyclone]]s in the atmosphere, or [[Eddy (fluid dynamics)|eddies]] in the ocean) rather than relatively calm areas.\n{{double image\n|1=left\n|2=Example of 2D mesh.png\n|3=300\n|4=FEM_example_of_2D_solution.png\n|5=300\n|6=FEM [[Polygon mesh|mesh]] created by an analyst prior to finding a solution to a [[Magnetism|magnetic]] problem using FEM software. Colours indicate that the analyst has set material properties for each zone, in this case a [[Electrical conductor|conducting]] wire coil in orange; a [[w:Ferromagnetism|ferromagnetic]] component (perhaps [[iron]]) in light blue; and air in grey. Although the geometry may seem simple, it would be very challenging to calculate the magnetic field for this setup without FEM software, using [[Closed-form expression|equations alone]].\n|7=FEM solution to the problem at left, involving a [[w:Cylinder (geometry)|cylindrically]] shaped [[Magnetic shielding|magnetic shield]]. The [[w:Ferromagnetism|ferromagnetic]] cylindrical part is shielding the area inside the cylinder by diverting the magnetic field [[Electromagnet|created]] by the coil (rectangular area on the right). The color represents the [[Norm (mathematics)|amplitude]] of the [[Magnetic field#Definitions, units, and measurement|magnetic flux density]], as indicated by the scale in the inset legend, red being high amplitude. The area inside the cylinder is low amplitude (dark blue, with widely spaced lines of magnetic flux), which suggests that the shield is performing as it was designed to.\n|8=Example of 2D mesh\n|9=FEM_example_of_2D_solution}}\n{{clear}}\n\n==History==\nWhile it is difficult to quote a date of the invention of the finite element method, the method originated from the need to solve complex [[Elasticity (physics)|elasticity]] and [[structural analysis]] problems in [[civil engineering|civil]] and [[aeronautical engineering]]. Its development can be traced back to the work by [[Alexander Hrennikoff|A. Hrennikoff]]<ref>{{Cite journal |last=Hrennikoff |first=Alexander |title=Solution of problems of elasticity by the framework method |journal=Journal of applied mechanics |volume=8.4 |pages=169\u2013175 |year=1941 |doi= }}</ref> and [[Richard Courant|R. Courant]].<ref>{{Cite journal |last=Courant |first=R. |title=Variational methods for the solution of problems of equilibrium and vibrations |journal=Bulletin of the American Mathematical Society |volume=49 |pages=1\u201323 |year=1943 |doi= 10.1090/s0002-9904-1943-07818-4}}</ref> In China, in the later 1950s and early 1960s, based on the computations of dam constructions, [[Feng Kang|K. Feng]] proposed a systematic numerical method for solving [[partial differential equation]]s. The method was called the finite difference method based on variation principle, which was another independent invention of the finite element method. Although the approaches used by these pioneers are different, they share one essential characteristic: [[Polygon mesh|mesh]] [[discretization]] of a continuous domain into a set of discrete sub-domains, usually called elements.\n\nHrennikoff's work discretizes the domain by using a [[Lattice (group)|lattice]] analogy, while Courant's approach divides the domain into finite triangular subregions to solve [[second order equation|second order]] [[elliptic equation|elliptic]] partial differential equations (PDEs) that arise from the problem of [[torsion (mechanics)|torsion]] of a [[cylinder (geometry)|cylinder]]. Courant's contribution was evolutionary, drawing on a large body of earlier results for PDEs developed by [[John William Strutt, 3rd Baron Rayleigh|Rayleigh]], [[Walther Ritz|Ritz]], and [[Boris Galerkin|Galerkin]].\n\nThe finite element method obtained its real impetus in the 1960s and 1970s by the developments of [[John Argyris|J. H. Argyris]] with co-workers at the [[University of Stuttgart]], [[Ray W. Clough|R. W. Clough]] with co-workers at [[University of California, Berkeley|UC Berkeley]], [[Olgierd Zienkiewicz|O. C. Zienkiewicz]] with co-workers [[Ernest Hinton]], [[Bruce Irons (engineer)|Bruce Irons]]<ref>{{Cite journal |last1=Hinton |first1=Ernest |last2=Irons |first2=Bruce |author-link= |title=Least squares smoothing of experimental data using finite elements |journal=Strain |volume=4 |pages=24\u201327 |date=July 1968 |doi= 10.1111/j.1475-1305.1968.tb01368.x}}</ref> and others at the [[Swansea University|University of Swansea]], [[Philippe G. Ciarlet]] at the University of [[Pierre-and-Marie-Curie University|Paris 6]] and Richard Gallagher with co-workers at [[Cornell University]]. Further impetus was provided in these years by available open source finite element software programs. NASA sponsored the original version of [[NASTRAN]], and UC Berkeley made the finite element program SAP IV<ref>{{cite web|title=SAP-IV Software and Manuals | url= http://nisee.berkeley.edu/elibrary/getpkg?id=SAP4 | location=NISEE e-Library, The Earthquake Engineering Online Archive}}</ref> widely available. In Norway the ship classification society Det Norske Veritas (now [[DNV GL]]) developed [[SESAM (FEM)|Sesam]] in 1969 for use in analysis of ships.<ref>{{cite book |author1=Gard Paulsen |author2=H\u00e5kon With Andersen |author3=John Petter Collett |author4=Iver Tangen Stensrud |title=Building Trust, The history of DNV 1864-2014 |url= |location=Lysaker, Norway |publisher=Dinamo Forlag A/S |pages=121, 436 |date=2014 |isbn=978-82-8071-256-1 }}<!--|access-date=30 June 2015 --></ref> A rigorous mathematical basis to the finite element method was provided in 1973 with the publication by [[Gilbert Strang|Strang]] and [[George Fix|Fix]].<ref>{{cite book | first1=Gilbert | last1=Strang | authorlink1=Gilbert Strang | first2=George | last2=Fix | authorlink2=George Fix | title=An Analysis of The Finite Element Method | publisher=Prentice Hall | year=1973 | isbn=0-13-032946-0}}</ref> The method has since been generalized for the [[numerical analysis|numerical modeling]] of physical systems in a wide variety of [[engineering]] disciplines, e.g., [[electromagnetism]], [[heat transfer]], and [[fluid dynamics]].<ref>{{cite book | first1=O.C. | last1= Zienkiewicz | authorlink1= Olgierd Zienkiewicz | first2=R.L. | last2=Taylor | first3=J.Z. | last3=Zhu | title= The Finite Element Method: Its Basis and Fundamentals | edition=Sixth | publisher=Butterworth-Heinemann | year=2005 | isbn=0750663200}}</ref><ref>{{cite book | first1=K.J. | last1=Bathe | authorlink1= Klaus-J\u00fcrgen Bathe | title=Finite Element Procedures | publisher= Cambridge, MA: Klaus-J\u00fcrgen Bathe | year=2006 | isbn= 097900490X}}</ref>\n\n==Technical discussion==\n\n===The structure of finite element methods===\nFinite element methods are numerical methods for approximating the solutions of mathematical problems that are usually formulated so as to precisely state an idea of some aspect of physical reality.\n\nA finite element method is characterized by a [[Calculus of variations|variational formulation]], a discretization strategy, one or more solution algorithms and post-processing procedures.\n\nExamples of variational formulation are the [[Galerkin method]], the discontinuous Galerkin method, mixed methods, etc.\n \nA discretization strategy is understood to mean a clearly defined set of procedures that cover (a) the creation of finite element meshes, (b) the definition of basis function on reference elements (also called shape functions) and (c) the mapping of reference elements onto the elements of the mesh.  Examples of discretization strategies are the h-version, [[p-FEM|p-version]], [[Hp-FEM|hp-version]], [[Extended finite element method|x-FEM]], [[isogeometric analysis]], etc.  Each discretization strategy has certain advantages and disadvantages.  A reasonable criterion in selecting a discretization strategy is to realize nearly optimal performance for the broadest set of mathematical models in a particular model class.\n\nThere are various numerical solution algorithms that can be classified into two broad categories; direct and iterative solvers.  These algorithms are designed to exploit the sparsity of matrices that depend on the choices of variational formulation and discretization strategy.\n\nPostprocessing procedures are designed for the extraction of the data of interest from a finite element solution.  In order to meet the requirements of solution verification, postprocessors need to provide for ''a posteriori'' error estimation in terms of the quantities of interest. When the errors of approximation are larger than what is considered acceptable then the discretization has to be changed either by an automated adaptive process or by action of the analyst. There are some very efficient postprocessors that provide for the realization of [[superconvergence]].\n\n{{clear}}\n\n===Illustrative problems P1 and P2===\nWe will illustrate the finite element method using two sample problems from which the general method can be extrapolated. It is assumed that the reader is familiar with [[calculus]] and [[linear algebra]].\n\nP1 is a ''' one-dimensional''' problem\n:<math>\\mbox{ P1 }:\\begin{cases}\nu''(x)=f(x) \\mbox{ in } (0,1), \\\\\nu(0)=u(1)=0,\n\\end{cases}</math>\nwhere <math>f</math> is given, <math>u</math> is an unknown function of <math>x</math>, and <math>u''</math> is the second derivative of <math>u</math> with respect to <math>x</math>.\n\nP2 is a ''' two-dimensional''' problem ([[Dirichlet problem]])\n:<math>\\mbox{P2 }:\\begin{cases}\nu_{xx}(x,y)+u_{yy}(x,y)=f(x,y) & \\mbox{ in } \\Omega, \\\\\nu=0 & \\mbox{ on } \\partial \\Omega,\n\\end{cases}</math>\n\nwhere <math>\\Omega</math> is a connected open region in the <math>(x,y)</math> plane whose boundary <math>\\partial \\Omega</math> is \"nice\" (e.g., a [[smooth manifold]] or a [[polygon]]), and <math>u_{xx}</math> and <math>u_{yy}</math> denote the second derivatives with respect to <math>x</math> and <math>y</math>, respectively.\n\nThe problem P1 can be solved \"directly\" by computing [[antiderivative]]s. However, this method of solving the [[boundary value problem]] (BVP) works only when there is one spatial dimension and does not generalize to higher-dimensional problems or to problems like <math>u+u''=f</math>. For this reason, we will develop the finite element method for P1 and outline its generalization to P2.\n\nOur explanation will proceed in two steps, which mirror two essential steps one must take to solve a boundary value problem (BVP) using the FEM.\n*In the first step, one rephrases the original BVP in its weak form. Little to no computation is usually required for this step.  The transformation is done by hand on paper.\n*The second step is the discretization, where the weak form is discretized in a finite-dimensional space.\nAfter this second step, we have concrete formulae for a large but finite-dimensional linear problem whose solution will approximately solve the original BVP. This finite-dimensional problem is then implemented on a [[computer]].\n\n===Weak formulation===\nThe first step is to convert P1 and P2 into their equivalent [[weak formulation]]s.\n\n====The weak form of P1====\nIf <math>u</math> solves P1, then for any smooth function <math>v</math> that satisfies the displacement boundary conditions, i.e. <math>v=0</math> at <math>x=0</math> and <math>x=1</math>, we have\n\n(1) <math>\\int_0^1 f(x)v(x) \\, dx = \\int_0^1 u''(x)v(x) \\, dx.</math>\n\nConversely, if <math>u</math> with <math>u(0)=u(1)=0</math> satisfies (1) for every smooth function <math>v(x)</math> then one may show that this <math>u</math> will solve P1.  The proof is easier for twice continuously differentiable <math>u</math> ([[mean value theorem]]), but may be proved in a [[Distribution (mathematics)|distributional]] sense as well.\n\nWe define a new function <math>\\phi(u,v)</math> by using [[integration by parts]] on the right-hand-side of (1):\n\n(2)<math>\n\\begin{align}\n \\int_0^1 f(x)v(x) \\, dx & = \\int_0^1 u''(x)v(x) \\, dx \\\\\n & = u'(x)v(x)|_0^1-\\int_0^1 u'(x)v'(x) \\, dx \\\\\n & = -\\int_0^1 u'(x)v'(x) \\, dx \\equiv -\\phi (u,v),\n\\end{align}\n</math>\n\nwhere we have used the assumption that <math>v(0)=v(1)=0</math>.\n\n====The weak form of P2====\nIf we integrate by parts using a form of [[Green's identities]], we see that if <math>u</math> solves P2, then we may define <math>\\phi(u,v)</math> for any <math>v</math> by\n\n:<math>\\int_\\Omega fv\\,ds = -\\int_\\Omega \\nabla u \\cdot \\nabla v \\, ds \\equiv -\\phi(u,v),</math>\n\nwhere <math>\\nabla</math> denotes the [[gradient]] and <math>\\cdot</math> denotes the [[dot product]] in the two-dimensional plane. Once more <math>\\,\\!\\phi</math> can be turned into an inner product on a suitable space <math>H_0^1(\\Omega)</math> of \"once differentiable\" functions of <math>\\Omega</math> that are zero on <math>\\partial \\Omega</math>. We have also assumed that <math>v \\in H_0^1(\\Omega)</math> (see [[Sobolev space]]s). Existence and uniqueness of the solution can also be shown.\n\n====A proof outline of existence and uniqueness of the solution====\nWe can loosely think of <math>H_0^1(0,1)</math> to be the [[absolutely continuous]] functions of <math>(0,1)</math> that are <math>0</math> at <math>x=0</math> and <math>x=1</math> (see [[Sobolev spaces]]). Such functions are (weakly) \"once differentiable\" and it turns out that the symmetric [[bilinear map]] <math>\\!\\,\\phi</math> then defines an [[inner product]] which turns <math>H_0^1(0,1)</math> into a [[Hilbert space]] (a detailed proof is nontrivial). On the other hand, the left-hand-side <math>\\int_0^1 f(x)v(x)dx</math> is also an inner product, this time on the [[Lp space]] <math>L^2(0,1)</math>. An application of the [[Riesz representation theorem]] for Hilbert spaces shows that there is a unique <math>u</math> solving (2) and therefore P1.  This solution is a-priori only a member of <math>H_0^1(0,1)</math>, but using [[elliptic operator|elliptic]] regularity, will be smooth if <math>f</math> is.\n\n==Discretization==\n[[File:Finite element method 1D illustration1.png|thumb|A function in <math>H_0^1,</math> with zero values at the endpoints (blue), and a piecewise linear approximation (red)]]\n\nP1 and P2 are ready to be discretized which leads to a common sub-problem (3). The basic idea is to replace the infinite-dimensional linear problem:\n:Find <math>u \\in  H_0^1</math>  such that\n:<math>\\forall v \\in H_0^1, \\; -\\phi(u,v)=\\int fv</math>\nwith a finite-dimensional version:\n\n:(3) Find <math>u \\in V</math> such that\n:<math>\\forall v \\in V, \\; -\\phi(u,v)=\\int fv</math>\n\nwhere <math>V</math> is a finite-dimensional [[Linear subspace|subspace]] of <math>H_0^1</math>. There are many possible choices for <math>V</math> (one possibility leads to the [[spectral method]]). However, for the finite element method we take <math>V</math> to be a space of piecewise polynomial functions.\n\n===For problem P1===\nWe take the interval <math>(0,1)</math>, choose <math>n</math> values of <math>x</math> with <math>0=x_0<x_1<\\cdots<x_n<x_{n+1}=1</math> and we define <math>V</math> by:\n\n:<math>V=\\{v:[0,1] \\rightarrow \\Bbb R\\;: v\\mbox{ is continuous, }v|_{[x_k,x_{k+1}]} \\mbox{ is linear for } k=0,\\dots,n \\mbox{, and } v(0)=v(1)=0 \\} </math>\n\nwhere we define <math>x_0=0</math> and <math>x_{n+1}=1</math>. Observe that functions in <math>V</math> are not differentiable according to the elementary definition of calculus. Indeed, if <math>v \\in V</math> then the derivative is typically not defined at any <math>x=x_k</math>, <math>k=1,\\ldots,n</math>. However, the derivative exists at every other value of <math>x</math> and one can use this derivative for the purpose of [[integration by parts]].\n\n[[File:Piecewise linear function2D.svg|thumb|A piecewise linear function in two dimensions]]\n\n===For problem P2===\nWe need <math>V</math> to be a set of functions of <math>\\Omega</math>. In the figure on the right, we have illustrated a [[Polygon triangulation|triangulation]] of a 15 sided [[polygon]]al region <math>\\Omega</math> in the plane (below), and a piecewise linear function (above, in color) of this polygon which is linear on each triangle of the triangulation; the space <math>V</math> would consist of functions that are linear on each triangle of the chosen triangulation.\n\nOne hopes that as the underlying triangular mesh becomes finer and finer, the solution of the discrete problem (3) will in some sense converge to the solution of the original boundary value problem P2. To measure this mesh fineness, the triangulation is indexed by a real valued parameter <math>h > 0</math> which one takes to be very small. This parameter will be related to the size of the largest or average triangle in the triangulation. As we refine the triangulation, the space of piecewise linear functions <math>V</math> must also change with <math>h</math>. For this reason, one often reads <math>V_h</math> instead of <math>V</math> in the literature. Since we do not perform such an analysis, we will not use this notation.\n\n===Choosing a basis===\n{{multiple image|caption_align=left|header_align=center\n | align = right\n | direction = vertical\n | width = 200\n | header = Interpolation of a [[Bessel function]]\n | image1 = Linear interpolation of J0 (basis set).svg\n | alt1 = Sixteen triangular basis functions used to reconstruct J0\n | caption1 = 16 scaled and shifted triangular basis functions (colors) used to reconstruct a zeroeth order Bessel function ''J''<sub>''0''</sub> (black).\n | image2 = Linear interpolation of J1 (basis set).svg\n | alt2 = Summation of basis functions\n | caption2  = The linear combination of basis functions (yellow) reproduces ''J''<sub>''0''</sub> (blue) to any desired accuracy.\n}}\nTo complete the discretization, we must select a [[Basis (linear algebra)|basis]] of <math>V</math>. In the one-dimensional case, for each control point <math>x_k</math> we will choose the piecewise linear function <math>v_k</math> in <math>V</math> whose value is <math>1</math> at <math>x_k</math> and zero at every <math>x_j,\\;j \\neq k</math>, i.e.,\n\n:<math>v_{k}(x)=\\begin{cases} {x-x_{k-1} \\over x_k\\,-x_{k-1}} & \\mbox{ if } x \\in [x_{k-1},x_k], \\\\\n{x_{k+1}\\,-x \\over x_{k+1}\\,-x_k} & \\mbox{ if } x \\in [x_k,x_{k+1}], \\\\\n0 & \\mbox{ otherwise},\\end{cases}</math>\n\nfor <math>k=1,\\dots,n</math>; this basis is a shifted and scaled [[tent function]]. For the two-dimensional case, we choose again one basis function <math>v_k</math> per vertex <math>x_k</math> of the triangulation of the planar region <math>\\Omega</math>. The function <math>v_k</math> is the unique function of <math>V</math> whose value is <math>1</math> at <math>x_k</math> and zero at every <math>x_j,\\;j \\neq k</math>.\n\nDepending on the author, the word \"element\" in \"finite element method\" refers either to the triangles in the domain, the piecewise linear basis function, or both. So for instance, an author interested in curved domains might replace the triangles with curved primitives, and so might describe the elements as being curvilinear. On the other hand, some authors replace \"piecewise linear\" by \"piecewise quadratic\" or even \"piecewise polynomial\". The author might then say \"higher order element\" instead of \"higher degree polynomial\". Finite element method is not restricted to triangles (or tetrahedra in 3-d, or higher order simplexes in multidimensional spaces), but can be defined on quadrilateral subdomains (hexahedra, prisms, or pyramids in 3-d, and so on). Higher order shapes (curvilinear elements) can be defined with polynomial and even non-polynomial shapes (e.g. ellipse or circle).\n\nExamples of methods that use higher degree piecewise polynomial basis functions are the\n[[hp-FEM]] and [[spectral element method|spectral FEM]].\n\nMore advanced implementations (adaptive finite element methods) utilize a method to assess the quality of the results (based on error estimation theory) and modify the mesh during the solution aiming to achieve approximate solution within some bounds from the 'exact' solution of the continuum problem. Mesh adaptivity may utilize various techniques, the most popular are:\n*moving nodes (r-adaptivity)\n*refining (and unrefining) elements (h-adaptivity)\n*changing order of base functions (p-adaptivity)\n*combinations of the above ([[hp-FEM|hp-adaptivity]]).\n\n=== Small support of the basis ===\n[[File:Finite element triangulation.svg|thumb|Solving the two-dimensional problem <math>u_{xx}+u_{yy}=-4</math> in the disk centered at the origin and radius 1, with zero boundary conditions.<br />(a) The triangulation.]]\n[[File:Finite element sparse matrix.png|thumb|(b) The [[sparse matrix]] ''L'' of the discretized linear system]]\n[[File:Finite element solution.svg|thumb|(c) The computed solution, <math>u(x, y)=1-x^2-y^2.</math>]]\nThe primary advantage of this choice of basis is that the inner products\n:<math>\\langle v_j,v_k \\rangle=\\int_0^1 v_j v_k\\,dx</math>\nand\n:<math>\\phi(v_j,v_k)=\\int_0^1 v_j' v_k'\\,dx</math>\n\nwill be zero for almost all <math>j,k</math>.\n(The matrix containing <math>\\langle v_j,v_k \\rangle</math> in the <math>(j,k)</math> location is known as the [[Gramian matrix]].)\nIn the one dimensional case, the [[support (mathematics)|support]] of <math>v_k</math> is the interval <math>[x_{k-1},x_{k+1}]</math>. Hence, the integrands of <math>\\langle v_j,v_k \\rangle</math> and ''<math>\\phi(v_j,v_k)</math>'' are identically zero whenever <math>|j-k|>1</math>.\n\nSimilarly, in the planar case, if <math>x_j</math> and <math>x_k</math> do not share an edge of the triangulation, then the integrals\n:<math>\\int_{\\Omega} v_j v_k\\,ds</math>\nand\n:<math>\\int_{\\Omega} \\nabla v_j \\cdot \\nabla v_k\\,ds</math>\nare both zero.\n\n===Matrix form of the problem===\nIf we write <math>u(x)=\\sum_{k=1}^n u_k v_k(x)</math> and <math>f(x)=\\sum_{k=1}^n f_k v_k(x)</math> then problem (3), taking <math>v(x)=v_j(x)</math> for <math>j=1,\\dots,n</math>, becomes\n:<math>-\\sum_{k=1}^n u_k \\phi (v_k,v_j) = \\sum_{k=1}^n f_k \\int v_k v_j dx</math> for <math>j=1,\\dots,n.</math>  (4)\n\nIf we denote by <math>\\mathbf{u}</math> and <math>\\mathbf{f}</math> the column vectors <math>(u_1,\\dots,u_n)^t</math> and <math>(f_1,\\dots,f_n)^t</math>, and if we let\n:<math>L=(L_{ij})</math>\nand\n:<math>M=(M_{ij})</math>\nbe matrices whose entries are\n:<math>L_{ij}=\\phi (v_i,v_j)</math>\nand\n:<math>M_{ij}=\\int v_i v_j dx</math>\nthen we may rephrase (4) as\n:<math>-L \\mathbf{u} = M \\mathbf{f}.</math> (5)\n\nIt is not necessary to assume <math>f(x)=\\sum_{k=1}^n f_k v_k(x)</math>. For a general function  <math>f(x)</math>,  problem (3) with <math>v(x)=v_j(x)</math> for <math>j=1,\\dots,n</math> becomes actually simpler, since no matrix <math>M</math> is used,\n: <math>-L \\mathbf{u} = \\mathbf{b}</math>, (6)\nwhere <math>\\mathbf{b}=(b_1,\\dots,b_n)^t</math> and <math>b_j=\\int f v_j dx</math> for <math>j=1,\\dots,n</math>.\n\nAs we have discussed before, most of the entries of <math>L</math> and <math>M</math> are zero because the basis functions <math>v_k</math> have small support. So we now have to solve a linear system in the unknown <math>\\mathbf{u}</math> where most of the entries of the matrix <math>L</math>, which we need to invert, are zero.\n\nSuch matrices are known as [[sparse matrix|sparse matrices]], and there are efficient solvers for such problems (much more efficient than actually inverting the matrix.) In addition, <math>L</math> is symmetric and positive definite, so a technique such as the [[conjugate gradient method]] is favored. For problems that are not too large, sparse [[LU decomposition]]s and [[Cholesky decomposition]]s still work well. For instance, [[MATLAB]]'s backslash operator (which uses sparse LU, sparse Cholesky, and other factorization methods) can be sufficient for meshes with a hundred thousand vertices.\n\nThe matrix <math>L</math> is usually referred to as the [[stiffness matrix]], while the matrix <math>M</math> is dubbed the [[mass matrix]].\n\n===General form of the finite element method===\nIn general, the finite element method is characterized by the following process.\n\n*One chooses a grid for <math>\\Omega</math>. In the preceding treatment, the grid consisted of triangles, but one can also use squares or curvilinear polygons.\n*Then, one chooses basis functions. In our discussion, we used piecewise linear basis functions, but it is also common to use piecewise polynomial basis functions.\n\nA separate consideration is the smoothness of the basis functions. For second order [[elliptic boundary value problem]]s, piecewise polynomial basis function that are merely continuous suffice (i.e., the derivatives are discontinuous.) For higher order partial differential equations, one must use smoother basis functions. For instance, for a fourth order problem such as <math>u_{xxxx}+u_{yyyy}=f</math>, one may use piecewise quadratic basis functions that are [[Smooth function#Order of continuity|<math>C^1</math>]].\n\nAnother consideration is the relation of the finite-dimensional space <math>V</math> to its infinite-dimensional counterpart, in the examples above <math>H_0^1</math>. A [[conforming element method]] is one in which the space <math>V</math> is a subspace of the element space for the continuous problem. The example above is such a method. If this condition is not satisfied, we obtain a [[nonconforming element method]], an example of which is the space of piecewise linear functions over the mesh which are continuous at each edge midpoint. Since these functions are in general discontinuous along the edges, this finite-dimensional space is not a subspace of the original <math>H_0^1</math>.\n\nTypically, one has an algorithm for taking a given mesh and subdividing it. If the main method for increasing precision is to subdivide the mesh, one has an ''h''-method (''h'' is customarily the diameter of the largest element in the mesh.) In this manner, if one shows that the error with a grid <math>h</math> is bounded above by <math>Ch^p</math>, for some <math>C<\\infty</math> and <math>p>0</math>, then one has an order ''p'' method. Under certain hypotheses (for instance, if the domain is convex), a piecewise polynomial of order <math>d</math> method will have an error of order <math>p=d+1</math>.\n\nIf instead of making ''h'' smaller, one increases the degree of the polynomials used in the basis function, one has a ''p''-method. If one combines these two refinement types, one obtains an ''hp''-method ([[hp-FEM]]). In the hp-FEM, the polynomial degrees can vary from element to element. High order methods with large uniform ''p'' are called spectral finite element methods ([[spectral element method|SFEM]]). These are not to be confused with [[spectral method]]s.\n\nFor vector partial differential equations, the basis functions may take values in <math>\\mathbb{R}^n</math>.\n\n==Various types of finite element methods==\n\n===AEM===\nThe Applied Element Method, or AEM combines features of both FEM and [[Discrete element method]], or (DEM).\n{{Main|Applied element method}}\n\n=== Generalized finite element method ===\nThe generalized finite element method (GFEM) uses local spaces consisting of functions, not necessarily polynomials, that reflect the available information on the unknown solution and thus ensure good local approximation. Then a [[partition of unity]] is used to \u201cbond\u201d these spaces together to form the approximating subspace. The effectiveness of GFEM has been shown when applied to problems with domains having complicated boundaries, problems with micro-scales, and problems with boundary layers.<ref>{{cite journal | first1=Ivo | last1=Babu\u0161ka | author1-link=Ivo Babu\u0161ka | first2=Uday | last2=Banerjee | first3=John E. | last3=Osborn | author3-link=John E. Osborn (mathematician) |  title=Generalized Finite Element Methods: Main Ideas, Results, and Perspective | journal=International Journal of Computational Methods |date=June 2004 | issue=1  | pages= 67\u2013103 | doi=10.1142/S0219876204000083 | volume=1}}</ref>\n\n===Mixed finite element method===\n{{Main|Mixed finite element method}}\nThe mixed finite element method is a type of finite element method in which extra independent variables are introduced as nodal variables during the discretization of a partial differential equation problem.\n\n===hp-FEM===\nThe [[hp-FEM]] combines adaptively, elements with variable size ''h'' and polynomial degree ''p'' in order to achieve exceptionally fast, exponential convergence rates.<ref>P. Solin, K. Segeth, I. Dolezel: Higher-Order Finite Element Methods, Chapman & Hall/CRC Press, 2003</ref>\n\n===hpk-FEM===\nThe [[hpk-FEM]] combines adaptively, elements with variable size ''h'', polynomial degree of the local approximations ''p'' and global differentiability of the local approximations ''(k-1)'' in order to achieve best convergence rates.\n\n===XFEM===\n{{main|Extended finite element method}}\n\nThe [[extended finite element method]] (XFEM) is a numerical technique based on the generalized finite element method (GFEM) and the partition of unity method (PUM). It extends the classical finite element method by enriching the solution space for solutions to differential equations with discontinuous functions. Extended finite element methods enrich the approximation space so that it is able to naturally reproduce the challenging feature associated with the problem of interest: the discontinuity, singularity, boundary layer, etc. It was shown that for some problems, such an embedding of the problem's feature into the approximation space can significantly improve convergence rates and accuracy. Moreover, treating problems with discontinuities with XFEMs suppresses the need to mesh and remesh the discontinuity surfaces, thus alleviating the computational costs and projection errors associated with conventional finite element methods, at the cost of restricting the discontinuities to mesh edges.\n\nSeveral research codes implement this technique to various degrees:\n1. GetFEM++\n2. xfem++\n3. openxfem++\n\nXFEM has also been implemented in codes like Altair Radioss, ASTER, Morfeo and Abaqus. It is increasingly being adopted by other commercial finite element software, with a few plugins and actual core implementations available (ANSYS, SAMCEF, OOFELIE, etc.).\n\n===S-FEM===\n{{Main|Smoothed finite element method}}\nThe S-FEM, Smoothed Finite Element Methods, are a particular class of numerical simulation algorithms for the simulation of physical phenomena. It was developed by combining meshfree methods with the finite element method.\n\n===Spectral element method===\n{{Main|Spectral element method}}\n\n===Meshfree methods===\n{{Main|Meshfree methods}}\n\n===Discontinuous Galerkin methods===\n{{Main|Discontinuous Galerkin method}}\n\n===Finite element limit analysis===\n{{Main|Finite element limit analysis}}\n\n===Stretched grid method===\n{{Main|Stretched grid method}}\n\n==Link with the gradient discretisation method==\nSome types of finite element methods (conforming, nonconforming, mixed finite element methods) are particular cases of the [[gradient discretisation method]] (GDM). Hence the convergence properties of the GDM, which are established for a series of problems (linear and non linear elliptic problems, linear, nonlinear and degenerate parabolic problems), hold as well for these particular finite element methods.\n\n==Comparison to the finite difference method==\n{{Unreferenced section|date=November 2010}}\nThe [[finite difference method]] (FDM) is an alternative way of approximating solutions of PDEs. The differences between FEM and FDM are:\n\n*The most attractive feature of the FEM is its ability to handle complicated geometries (and boundaries) with relative ease. While FDM in its basic form is restricted to handle rectangular shapes and simple alterations thereof, the handling of geometries in FEM is theoretically straightforward.\n*The most attractive feature of finite differences is that it can be very easy to implement.\n*There are several ways one could consider the FDM a special case of the FEM approach. E.g., first order FEM is identical to FDM for [[Poisson's equation]], if the problem is [[Discretization|discretized]] by a regular rectangular mesh with each rectangle divided into two triangles.\n*There are reasons to consider the mathematical foundation of the finite element approximation more sound, for instance, because the quality of the approximation between grid points is poor in FDM.\n*The quality of a FEM approximation is often higher than in the corresponding FDM approach, but this is extremely problem-dependent and several examples to the contrary can be provided.\n\nGenerally, FEM is the method of choice in all types of analysis in structural mechanics (i.e. solving for deformation and stresses in solid bodies or dynamics of structures) while [[computational fluid dynamics]] (CFD) tends to use FDM or other methods like [[finite volume method]] (FVM). CFD problems usually require discretization of the problem into a large number of cells/gridpoints (millions and more), therefore cost of the solution favors simpler, lower order approximation within each cell. This is especially true for 'external flow' problems, like air flow around the car or airplane, or weather simulation.\n\n==Application==\n[[File:FAE visualization.jpg|thumb|250px|Visualization of how a car deforms in an asymmetrical crash using finite element analysis.[http://impact.sourceforge.net]]]\nA variety of specializations under the umbrella of the mechanical engineering discipline (such as aeronautical, biomechanical, and automotive industries) commonly use integrated FEM in design and development of their products. Several modern FEM packages include specific components such as thermal, electromagnetic, fluid, and structural working environments. In a structural simulation, FEM helps tremendously in producing stiffness and strength visualizations and also in minimizing weight, materials, and costs.\n\nFEM allows detailed visualization of where structures bend or twist, and indicates the distribution of stresses and displacements. FEM software provides a wide range of simulation options for controlling the complexity of both modeling and analysis of a system. Similarly, the desired level of accuracy required and associated computational time requirements can be managed simultaneously to address most engineering applications. FEM allows entire designs to be constructed, refined, and optimized before the design is manufactured.\n\nThis powerful design tool has significantly improved both the standard of engineering designs and the methodology of the design process in many industrial applications.<ref name=Hastings>Hastings, J. K., Juds, M. A., Brauer, J. R., ''Accuracy and Economy of Finite Element Magnetic Analysis'', 33rd Annual National Relay Conference, April 1985.</ref> The introduction of FEM has substantially decreased the time to take products from concept to the production line.<ref name=Hastings/> It is primarily through improved initial prototype designs using FEM that testing and development have been accelerated.<ref name=\"McLaren-Mercedes\">{{cite web|title=McLaren Mercedes: Feature - Stress to impress|author=McLaren-Mercedes|year=2006|url=http://www.mclaren.com/features/technical/stress_to_impress.php|accessdate=2006-10-03 |archiveurl = http://web.archive.org/web/20061030200423/http://www.mclaren.com/features/technical/stress_to_impress.php <!-- Bot retrieved archive --> |archivedate = 2006-10-30}}</ref> In summary, benefits of FEM include increased accuracy, enhanced design and better insight into critical design parameters, virtual prototyping, fewer hardware prototypes, a faster and less expensive design cycle, increased productivity, and increased revenue.<ref name=Hastings/>\n\nFEA has also been proposed to use in stochastic modelling for numerically solving probability models.<ref>{{cite journal |title=Methods with high accuracy for finite element probability computing |author1=Peng Long |author2=Wang Jinliang |author3=Zhu Qiding |journal=Journal of Computational and Applied Mathematics |volume=59 |issue=2 |date=19 May 1995 |pages=181\u2013189 |doi=10.1016/0377-0427(94)00027-X}}</ref><ref>{{cite book |first=Achintya |last=Haldar |first2=Sankaran |last2=Mahadevan |title=Reliability Assessment Using Stochastic Finite Element Analysis |publisher=John Wiley & Sons |isbn=978-0471369615 |year=2000}}</ref>\n\n==See also==\n*[[Applied element method]]\n*[[Boundary element method]]\n*[[Computer experiment]]\n*[[Direct stiffness method]]\n*[[Discontinuity layout optimization]]\n*[[Discrete element method]]\n*[[Finite difference method]]\n*[[Finite element machine]]\n*[[Finite element method in structural mechanics]]\n*[[Finite volume method]]\n*[[Finite volume method for unsteady flow]]\n*[[Interval finite element]]\n*[[Isogeometric analysis]]\n*[[Lattice Boltzmann methods]]\n*[[List of finite element software packages]]\n*[[Movable cellular automaton]]\n*[[Multidisciplinary design optimization]]\n*[[Multiphysics]]\n*[[Patch test (finite elements)|Patch test]]\n*[[Rayleigh\u2013Ritz method]]\n*[[Space mapping]]\n*[[Weakened weak form]]\n\n==References==\n{{Reflist|30em}}\n\n==Further reading==\n*G. Allaire and A. Craig: ''Numerical Analysis and Optimization:An Introduction to Mathematical Modelling and Numerical Simulation''\n*K. J. Bathe : ''Numerical methods in finite element analysis'', Prentice-Hall (1976).\n*J. Chaskalovic, ''Finite Elements Methods for Engineering Sciences'', Springer Verlag, (2008).\n*O. C. Zienkiewicz, R. L. Taylor, J. Z. Zhu : ''The Finite Element Method: Its Basis and Fundamentals'', Butterworth-Heinemann, (2005).\n\n==External links==\n*[http://homepage.usask.ca/~ijm451/finite/fe_resources/ IFER] Internet Finite Element Resources - Describes and provides access to finite element analysis software via the Internet.\n*[http://www.nafems.org NAFEMS]\u2014The International Association for the Engineering Analysis Community\n*[http://math.nist.gov/mcsd/savg/tutorial/ansys/FEM/ Mathematics of the Finite Element Method]\n*[http://people.maths.ox.ac.uk/suli/fem.pdf Finite Element Methods for Partial Differential Equations] - Lecture notes by [[Endre S\u00fcli]]\n*[https://hal.archives-ouvertes.fr/hal-01382358v2/document] - Describes the convergence of the Gradient Discretisation Method on various problems.\n\n{{Numerical PDE}}\n\n{{Authority control}}\n\n[[Category:Continuum mechanics]]\n[[Category:Finite element method]]\n[[Category:Numerical differential equations]]\n[[Category:Partial differential equations]]\n[[Category:Structural analysis]]"}]}}}}