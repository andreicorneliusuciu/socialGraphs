{"batchcomplete":"","query":{"normalized":[{"from":"data_link_layer","to":"Data link layer"}],"pages":{"152949":{"pageid":152949,"ns":0,"title":"Data link layer","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{refimprove|date=June 2013}}\n{{OSIModel}}\n\nThe '''data link layer''' or '''layer 2''' is the second layer of the seven-layer [[OSI model]] of [[computer network]]ing. This layer is the protocol layer that transfers data between adjacent network nodes in a [[wide area network]] (WAN) or between nodes on the same [[local area network]] (LAN) [[network segment|segment]].<ref>{{cite web|title=What is layer 2, and Why Should You Care?|url=http://www.accel-networks.com/blog/2009/09/what-is-layer-2-and-why-should-you-care.html|archiveurl=https://web.archive.org/web/20100218075030/http://www.accel-networks.com/blog/2009/09/what-is-layer-2-and-why-should-you-care.html|archivedate=2010-02-18|publisher=accel-networks.com|accessdate=2009-09-29}}</ref> The data link layer provides the functional and procedural means to [[transfer (computing)|transfer]] data between network entities and might provide the means to detect and possibly correct errors that may occur in the [[physical layer]].\n\nThe data link layer is concerned with local delivery of [[Frame (networking)|frames]] between devices on the same LAN.  Data-link frames, as these [[protocol data units]] are called, do not cross the boundaries of a local network.  Inter-network routing and global addressing are higher-layer functions, allowing data-link protocols to focus on local delivery, addressing, and media arbitration.  This way, the data link layer is analogous to a neighborhood traffic cop; it endeavors to arbitrate between parties contending for access to a medium, without concern for their ultimate destination. When devices attempt to use a medium simultaneously, frame collisions occur.  Data-link protocols specify how devices detect and recover from such collisions, and may provide mechanisms to reduce or prevent them.\n\nExamples of data link protocols are [[Ethernet]] for local area networks (multi-node), the [[Point-to-Point Protocol]] (PPP), [[HDLC]] and [[ADCCP]] for point-to-point (dual-node) connections. In the [[Internet Protocol Suite]] (TCP/IP), the data link layer functionality is contained within the [[link layer]], the lowest layer of the descriptive model.\n\n== Overview ==\nA frame's header contains source and destination addresses that indicate which device originated the frame and which device is expected to receive and process it.  In contrast to the hierarchical and routable addresses of the network layer, layer-2 addresses are flat, meaning that no part of the address can be used to identify the logical or physical group to which the address belongs.\n\nThe data link thus provides data transfer across the physical link.  That transfer can be reliable or unreliable; many data-link protocols do not have acknowledgments of successful [[Data frame|frame]] reception and acceptance, and some data-link protocols might not even have any form of checksum to check for transmission errors.  In those cases, higher-level protocols must provide [[flow control (data)|flow control]], error checking, and acknowledgments and retransmission.\n\nIn some networks, such as [[IEEE 802]] local area networks, the data link layer is described in more detail with [[media access control]] (MAC) and [[logical link control]] (LLC) sublayers; this means that the [[IEEE 802.2]] LLC protocol can be used with all of the IEEE 802 MAC layers, such as Ethernet, [[token ring]], [[IEEE 802.11]], etc., as well as with some non-802 MAC layers such as [[FDDI]].  Other data-link-layer protocols, such as [[HDLC]], are specified to include both sublayers, although some other protocols, such as [[Cisco HDLC]], use HDLC's low-level framing as a MAC layer in combination with a different LLC layer. In the [[ITU-T]] [[G.hn]] standard, which provides a way to create a high-speed (up to 1 Gigabit/s) [[local area network]] using existing home wiring ([[Power line communication|power lines]], phone lines and [[Ethernet over coax|coaxial cables]]), the data link layer is divided into three sub-layers (application protocol convergence, logical link control and media access control).\n\nWithin the semantics of the OSI network architecture, the data-link-layer protocols respond to service requests from the [[network layer]] and they perform their function by issuing service requests to the [[physical layer]].\n\n==Sublayers==\nThe data link layer has two sublayers:  ''[[logical link control]]'' (LLC) and ''[[media access control]]'' (MAC).<ref>{{cite book\n | title = Voice & data communications handbook\n | edition = 5th\n | author = Regis J. Bates and Donald W. Gregory\n | publisher = McGraw-Hill Professional\n | year = 2007\n | isbn = 978-0-07-226335-0\n | page = 45\n | url = https://books.google.com/books?id=eq1kRHdyXSUC&pg=PA45\n }}</ref>\n\n===Logical link control sublayer===\nThe uppermost sublayer, LLC, [[multiplexes]] protocols running atop the data link layer, and optionally provides flow control, acknowledgment, and error notification. The LLC provides addressing and control of the data link. It specifies which mechanisms are to be used for addressing stations over the transmission medium and for controlling the data exchanged between the originator and recipient machines.\n\n===Media access control sublayer===\nMAC may refer to the sublayer that determines who is allowed to access the media at any one time (e.g. [[CSMA/CD]]). Other times it refers to a [[Frame (networking)|frame]] structure delivered based on [[MAC address]]es inside.\n\nThere are generally two forms of media access control: distributed and centralized.<ref name=Miao>{{cite book|author1=[[Guowang Miao]]|author2=Guocong Song|title=Energy and spectrum efficient wireless network design|publisher=[[Cambridge University Press]]|isbn=1107039886|year=2014}}</ref> Both of these may be compared to communication between people. In a network made up of people speaking, i.e. a conversation, we look for clues from our fellow talkers to see if any of them appear to be about to speak. If two people speak at the same time, they will each pause a random amount of time and then attempt to speak again, effectively establishing a long and elaborate game of saying \"no, you first\".\n\nThe Media Access Control sublayer also determines where one [[Frame (networking)|frame]] of data ends and the next one starts \u2013 [[frame synchronization]]. There are four means of frame synchronization: time based, character counting, byte stuffing and bit stuffing.\n* The ''time based'' approach simply puts a specified amount of time between frames. The major drawback of this is that new gaps can be introduced or old gaps can be lost due to external influences.\n* ''Character counting'' simply notes the count of remaining characters in the frame's header. This method, however, is easily disturbed if this field gets faulty in some way, thus making it hard to keep up synchronization.\n* ''[[Byte stuffing]]'' precedes the frame with a special byte sequence such as [[Data Link Escape|DLE]] [[Start Of Text|STX]] and succeeds it with DLE [[End Of Text|ETX]]. Appearances of DLE (byte value 0x10) have to be [[Escape sequence|escaped]] with another DLE. The start and stop marks are detected at the receiver and removed as well as the inserted DLE characters.\n* Similarly, ''[[bit stuffing]]'' replaces these start and end marks with flag consisting of a special bit pattern (e.g. a 0, six 1 bits and a 0). Occurrences of this bit pattern in the data to be transmitted are avoided by  inserting a bit. To use the example where the flag is 01111110, a 0 is inserted after 5 consecutive 1's in the data stream. The flags and the inserted 0's are removed at the receiving end. This makes for arbitrary long frames and easy synchronization for the recipient. Note that this stuffed bit is added even if the following data bit is 0, which could not be mistaken for a [[sync sequence]], so that the receiver can unambiguously distinguish stuffed bits from normal bits.\n\n==Services==\n* Encapsulation of [[network layer]] data packets into [[Frame (telecommunications)|frames]]\n* [[Frame synchronization]]\n* [[Logical link control]] (LLC) sublayer:\n** [[Error control]] ([[automatic repeat request]],ARQ), in addition to ARQ provided by some [[transport-layer]] protocols, to [[forward error correction]] (FEC) techniques provided on the [[physical layer]], and to error-detection and packet canceling provided at all layers, including the [[network layer]].  Data-link-layer error control  (i.e. retransmission of erroneous packets) is provided in wireless networks and [[V.42#Error control and data compression|V.42 telephone network modems]], but not in LAN protocols such as [[Ethernet]], since bit errors are so uncommon in short wires. In that case, only [[error detection]] and canceling of erroneous packets are provided.\n** [[Flow control (data)|Flow control]], in addition to the one provided on the [[transport layer]]. Data-link-layer error control is not used in LAN protocols such as Ethernet, but in modems and wireless networks.\n* [[Media access control]] (MAC) sublayer:\n** [[Multiple access protocol]]s for channel-access control, for example [[CSMA/CD]] protocols for [[collision detection]] and re-transmission in [[Ethernet]] bus networks and hub networks, or the [[CSMA/CA]] protocol for [[collision avoidance]] in wireless networks.\n** Physical addressing (MAC addressing)\n** [[LAN switching]] ([[packet switching]]), including MAC filtering, [[Spanning Tree Protocol]] (STP) and [[Shortest Path Bridging]] (SPB)\n** Data packet queuing or [[Scheduling algorithm#In computer networks and multiplexing|scheduling]]\n** [[Store-and-forward]] switching or [[cut-through switching]]\n** [[Quality of Service]] (QoS) control\n** [[Virtual LAN]]s (VLAN)\n\n==Error detection and correction==\nBeside framing, data link layers also include mechanisms to detect and even recover from transmission errors.  For a receiver to detect transmission error, the sender must add redundant information (in the form of bits) as an [[Error detection and correction|error detection]] code to the frame sent.  When the receiver obtains a frame with an error detection code it recomputes it and verifies whether the received error detection code matches the computed error detection code.  If they match the [[Frame (telecommunications)|frame]] is considered to be valid.\n\nAn error detection code can be defined as a function that computes the {{mvar|r}} (amount of redundant bits) corresponding to each string of {{mvar|N}} total number of bits.  The simplest error detection code is the [[parity bit]], which allows a receiver to detect transmission errors that have affected a single bit among the transmitted {{mvar|N + r}} bits.  If there are two or more bits in error, the receiver may not be able to detect the transmission error.\n\n{| class=\"wikitable floatright\"\n|-\n! H || E || L || L || O\n|-\n| 8 || 5 || 12 || 12 || 15\n|}\n\nA simple example of how this works using [[metadata]] is transmitting the word \"HELLO\", by encoding each letter as its position in the alphabet. Thus, the letter ''A'' is coded as 1, ''B'' as 2, and so on as shown in the table on the right.  Adding up the resulting numbers yields 8&nbsp;+ 5&nbsp;+ 12&nbsp;+ 12&nbsp;+ 15&nbsp;= 52, and 5&nbsp;+ 2&nbsp;= 7 calculates the metadata.  Finally, the \"8 5 12 12 15 7\" numbers sequence is transmitted, which the receiver will see on its end if there are no transmission errors.  The receiver knows that the last number received is the error-detecting metadata and that all data before is the message, so the receiver can recalculate the above math and if the metadata matches it can be concluded that the data has been received error-free.  Though, if the receiver sees something like a \"7 5 12 12 15 7\" sequence, it can run the check by calculating 7&nbsp;+ 5&nbsp;+ 12&nbsp;+ 12&nbsp;+ 15&nbsp;= 51 and 5&nbsp;+ 1&nbsp;= 6, and discard the received data as defective since 6 does not equal 7.\n\n==Protocol examples==\n{{colbegin||30em}}\n* [[Address Resolution Protocol]] (ARP)\n* [[ARCnet]]\n* [[Asynchronous Transfer Mode|ATM]]\n* [[Cisco Discovery Protocol]] (CDP)\n* [[Controller Area Network]] (CAN)\n* [[Econet]]\n* [[Ethernet]]\n* [[Ethernet Automatic Protection Switching]] (EAPS)\n* [[Fiber Distributed Data Interface]] (FDDI)\n* [[Frame Relay]]\n* [[High-Level Data Link Control]] (HDLC)\n* [[IEEE 802.2]] (provides LLC functions to IEEE 802 MAC layers)\n* [[IEEE 802.11]] [[wireless LAN]]\n* [[I\u00b2C]]\n* [[LattisNet]]\n* [[Link Access Procedures, D channel]] (LAPD)\n* [[Link Layer Discovery Protocol]] (LLDP)\n* [[LocalTalk]]\n* [[MIL-STD-1553]]\n* [[Multiprotocol Label Switching]] (MPLS)\n* [[Nortel Discovery Protocol]] (NDP)\n* [[OpenFlow]] (SDN)\n* [[Point-to-Point Protocol]] (PPP)\n* [[Profibus]]\n* [[SpaceWire]]\n* Serial Line Internet Protocol ([[SLIP]]) (obsolete)\n* [[Split multi-link trunking]] (SMLT)\n* [[IEEE 802.1aq]] - [[Shortest Path Bridging]]\n* [[Spanning Tree Protocol]]\n* [[StarLan]]\n* [[Token ring]]\n* [[UDLD|Unidirectional Link Detection]] (UDLD)\n* [[UNI/O]]\n* [[1-Wire]]\n* and most forms of [[serial communication]].\n{{colend}}\n\n==Relation to the TCP/IP model==\nIn the [[Internet Protocol Suite]] (TCP/IP), OSI's data link layer functionality is contained within its lowest layer, the [[link layer]]. The TCP/IP link layer has the operating scope of the link a host is connected to, and only concerns itself with hardware issues to the point of obtaining hardware (MAC) addresses for locating hosts on the link and transmitting data frames onto the link. The link layer functionality was described in RFC 1122 and is defined differently than the Data Link Layer of OSI, and encompasses all methods that affect the local link.\n\nThe TCP/IP model is not a top-down comprehensive design reference for networks. It was formulated for the purpose of illustrating the logical groups and scopes of functions needed in the design of the suite of internetworking protocols of TCP/IP, as needed for the operation of the Internet. In general, direct or strict comparisons of the OSI and TCP/IP models should be avoided, because the layering in TCP/IP is not a principal design criterion and in general considered to be \"harmful\" (RFC 3439). In particular, TCP/IP does not dictate a strict hierarchical sequence of encapsulation requirements, as is attributed to OSI protocols.\n\n==See also==\n* [[Open Data-Link Interface|ODI]]\n* [[Network Driver Interface Specification|NDIS]]\n* [[SANA-II]] \u2013 Standard [[Amiga]] Networking Architecture, version 2\n\n==References==\n{{Reflist}}\n* {{cite book\n|last=S. Tanenbaum\n|first=Andrew\n|title=Computer Networks\n|edition=4th\n|year=2005\n|publisher=Dorling Kindersley(India)Pvt. Ltd.,licenses of Pearson Education in South Asia\n|location=482,F.I.E., [[Patparganj]], Delhi 110 092\n|isbn=81-7758-165-1}}\n* {{cite book\n|last=Odom\n|first=Wendel\n|title=CCENT/CCNA ICND1 100-101, CCENT Official cert guide\n|year=2013\n|publisher=Paul Boger, cisco press\n|isbn=1-58714-385-2}}\n\n==External links==\n{{Commons category}}\n* [http://www.codeproject.com/Articles/57072/DataLink-Simulator DataLink layer simulation, written in C#]\n* [http://www.cs.gmu.edu/~huangyih/656/error.pdf DataLink Layer, Part 2: Error Detection and Correction]\n\n[[Category:OSI protocols]]\n[[Category:Link protocols]]\n\n[[de:OSI-Modell#Schicht 2 \u2013 Sicherungsschicht]]"}]}}}}