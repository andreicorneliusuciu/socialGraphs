{"batchcomplete":"","query":{"normalized":[{"from":"distributed_database","to":"Distributed database"}],"pages":{"41054":{"pageid":41054,"ns":0,"title":"Distributed database","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{multiple issues|\n{{refimprove|date=August 2010}}\n{{Cleanup|date=June 2009}}\n}}\n\nA '''distributed database''' is a [[database]]  in which [[computer data storage|storage devices]] are not all attached to a common [[Processor (computing)|processor]].<ref>http://www.its.bldrdoc.gov/fs-1037/dir-012/_1750.htm</ref> It may be stored in multiple [[computers]], located in the same physical location; or may be dispersed over a [[computer network|network]] of interconnected computers. Unlike [[Parallel computing|parallel systems]], in which the processors are tightly coupled and constitute a single database system, a distributed database system consists of loosely coupled sites that share no physical components.\n\nSystem administrators can distribute collections of data (e.g. in a database) across multiple physical locations. A distributed database can reside on organized [[network servers]] or [[blockchain (database)|decentralized independent computers]] on the [[Internet]], on corporate [[intranets]] or [[extranets]], or on other organization [[Computer network|networks]]. Because they store data across multiple computers, distributed databases may improve performance at [[end-user]] worksites by allowing transactions to be processed on many machines, instead of being limited to one.<ref name=\"obrien\">\nO'Brien, J. & Marakas, G.M.(2008) Management Information Systems (pp. 185-189). New York, NY: McGraw-Hill Irwin</ref>\n\nTwo processes ensure that the distributed databases remain up-to-date and current: [[Replication (computing)|replication]] and [[Data transmission|duplication]].\n\n# Replication involves using specialized software that looks for changes in the distributive database. Once the changes have been identified, the replication process makes all the databases look the same. The replication process can be complex and time-consuming depending on the size and number of the distributed databases. This process can also require a lot of time and computer resources.  \n# Duplication, on the other hand, has less complexity. It basically identifies one database as a [[master-slave (technology)|master]] and then duplicates that database. The duplication process is normally done at a set time after hours.  This is to ensure that each distributed location has the same data.  In the duplication process, users may change only the master database. This ensures that local data will not be overwritten.\n\nBoth replication and duplication can keep the data current in all distributive locations.<ref name=\"obrien\" />\n\nBesides distributed database replication and fragmentation, there are many other distributed database design technologies. For example, local autonomy, synchronous and asynchronous distributed database technologies. These technologies' implementations can and do depend on the needs of the business and the sensitivity/[[confidentiality]] of the data stored in the database, and the price the business is willing to spend on ensuring [[data security]], [[data consistency|consistency]] and [[data integrity|integrity]].\n\nWhen discussing access to distributed databases, [[Microsoft]] favors the term '''distributed query''', which it defines in protocol-specific manner as \"[a]ny SELECT, INSERT, UPDATE, or DELETE statement that references tables and rowsets from one or more external OLE DB data sources\".<ref>\n{{cite web\n |url          = http://technet.microsoft.com/en-us/library/cc966484.aspx\n |title        = TechNet Glossary\n |publisher    = Microsoft\n |accessdate   = 2013-07-16\n |quote        = distributed query[:] Any SELECT, INSERT, UPDATE, or DELETE statement that references tables and rowsets from one or more external OLE DB data sources.\n}}\n</ref>\n[[Oracle Database|Oracle]] provides a more language-centric view in which distributed queries and [[distributed transaction]]s form part of '''distributed SQL'''.<ref>\n{{cite web\n |url          = http://docs.oracle.com/cd/E11882_01/server.112/e25789/toc.htm\n |title        = Oracle Database Concepts, 11g Release 2 (11.2)\n |last1        = Ashdown\n |first1       = Lance\n |last2        = Kyte\n |first2       = Tom\n |date=September 2011\n |publisher    = Oracle Corporation\n |accessdate   = 2013-07-17\n |quote        = Distributed SQL synchronously accesses and updates data distributed among multiple databases. [...] Distributed SQL includes distributed queries and distributed transactions. \n}}\n</ref>\n\nToday the distributed [[DBMS]] market is evolving dramatically, with new, innovative entrants and incumbents supporting the growing use of unstructured data and [[NoSQL]] DBMS engines, as well as [[XML database]]s and [[NewSQL|NewSQL databases]]. These databases are increasingly supporting distributed database architecture that provides [[high availability]] and [[fault tolerance]] through [[replication (computing)|replication]] and scale out ability.  Some examples are [[Aerospike database|Aerospike]],<ref>{{cite web|title=Aerospike distributed database|url=http://www.aerospike.com|website=Aerospike}}</ref> [[Apache Cassandra|Cassandra]],<ref>{{cite web |url=http://cassandra.apache.org/ |title=Apache Cassandra database menagement system |publisher=Apache.org}}</ref> [[Clusterpoint]],<ref>{{cite web |url=http://www.clusterpoint.com |title=Clusterpoint XML distributed database |publisher=Clusterpoint}}</ref> [[Clustrix|ClustrixDB]],<ref>{{cite web|title=Frequently Asked Questions about ClustrixDB - Clustrix Documentation|url=http://docs.clustrix.com/display/CLXDOC/Frequently+Asked+Questions+about+ClustrixDB#FrequentlyAskedQuestionsaboutClustrixDB-WhatisClustrixDB?|publisher=Clustrix, Inc.}}</ref> [[Couchbase Server|Couchbase]],<ref>{{cite web|title=Couchbase distributed database|url=http://www.couchbase.com|website=Couchbase}}</ref> [[Druid (open-source data store)]],<ref>{{cite web |url=http://druid.io |title=Druid distributed datastore/database |publisher=The Druid Community}}</ref> [[FoundationDB]],<ref>\n{{cite web |url=https://foundationdb.com |title=FoundationDB database |publisher=FoundationDB}}</ref> [[NuoDB]],<ref>Clark, Jack. [http://www.theregister.co.uk/2014/02/26/nuodb_funding/ \"NuoDB slurps European cash for database expansion\"] The Register. Feb. 26, 2014</ref> [[Riak]]<ref>\n{{cite web |url=http://www.basho.com |title=Basho Riak Distributed database |publisher=Basho}}</ref> and [[OrientDB]].<ref>\n{{cite web |url=http://www.orientdb.com |title=OrientDB database |publisher=OrientDB}}</ref> The [[Blockchain (database)|blockchain]] technology popularised by [[bitcoin]] is an implementation of a distributed database.<ref>{{cite news|last1=Margaret|first1=Alyson|title=How Bitcoin and the blockchain are a transformative technology |url=http://blog.blockchain.com/2015/06/23/how-bitcoin-and-the-block-chain-are-a-transformative-technology/|accessdate=23 July 2015|date=23 June 2015}}</ref>\n\n== Architecture ==\nA database user accesses the distributed database through:\n;Local applications\n:applications which do not require data from other sites.\n;Global applications\n:applications which do require data from other sites.\n\nA '''homogeneous distributed database''' has identical software and hardware running all databases instances, and may appear through a single interface as if it were a single database.  A '''heterogeneous distributed database''' may have different hardware, operating systems, database management systems, and even data models for different databases.\n\n===Homogeneous Distributed Databases Management System===\nIn homogeneous distributed database all sites have identical software and are aware of each other and agree to cooperate in processing user requests. Each site surrenders part of its autonomy in terms of right to change schema or software. A homogeneous DBMS appears to the user as a single system. The homogeneous system is much easier to design and manage. The following conditions must be satisfied for homogeneous database:\n*The operating system used at each location must be same or compatible.{{According to whom|date=March 2013}}{{Elucidate|date=March 2013}}\n*The data structures used at each location must be same or compatible.\n*The database application (or DBMS) used at each location must be same or compatible.\n\n===Heterogeneous DDBMS===\n{{See also|Heterogeneous database system}}\nIn a heterogeneous distributed database, different sites may use different schema and software. Difference in schema is a major problem for query processing and transaction processing. Sites may not be aware of each other and may provide only limited facilities for cooperation in transaction processing. In heterogeneous systems, different nodes may have different hardware & software and data structures at various nodes or locations are also incompatible. Different computers and operating systems, database applications or data models may be used at each of the locations. For example, one location may have the latest relational database management technology, while another location may store data using conventional files or old version of database management system. Similarly, one location may have the Windows 10 operating system, while another may have UNIX. Heterogeneous systems are usually used when individual sites use their own hardware and software. On heterogeneous system, translations are required to allow communication between different sites (or DBMS). In this system, the users must be able to make requests in a database language at their local sites. Usually the SQL database language is used for this purpose. If the hardware is different, then the translation is straightforward, in which computer codes and word-length is changed. The heterogeneous system is often not technically or economically feasible. In this system, a user at one location may be able to read but not update the data at another location.\n\n== Important considerations ==\nCare with a distributed database must be taken to ensure the following:\n* The distribution is transparent \u2014 users must be able to interact with the system as if it were one logical system.  This applies to the system's performance, and methods of access among other things.\n* [[Database transaction|Transaction]]s are transparent \u2014 each transaction must maintain [[database integrity]] across multiple databases.  Transactions must also be divided into sub-transactions, each sub-transaction affecting one database system.\n\nThere are two principal approaches to store a relation r in a distributed database system:\n\n:A) [[database replication|Replication]]\n:B) Fragmentation/[[Partition (database)|Partitioning]]\n\nA) Replication: In replication, the system maintains several identical replicas of the same relation r in different sites.\n:* Data is more available in this scheme.\n:* Parallelism is increased when read request is served.\n:* Increases overhead on update operations as each site containing the replica needed to be updated in order to maintain consistency.\n:* Multi-datacenter replication provides geographical diversity, like in [[Clusterpoint]]<ref>\n{{cite web |url=http://www.clusterpoint.com/solutions/distributed-storage |title=Clusterpoint database distributed storage multi-datacenter replication|publisher=Clusterpoint}}</ref> or [[Riak]].<ref>\n{{cite web |url=http://basho.com/tag/multi-datacenter-replication/ |title=Riak database multi-datacenter replication|publisher=Basho}}</ref>\n\nB) Fragmentation: The relation r is fragmented into several relations r<sub>1</sub>, r<sub>2</sub>, r<sub>3</sub>....r<sub>n</sub> in such a way that the actual relation could be reconstructed from the fragments and then the fragments are scattered to different locations. There are basically two schemes of fragmentation:\n\n:* Horizontal fragmentation - splits the relation by assigning each tuple of r to one or more fragments.\n:* Vertical fragmentation - splits the relation by decomposing the schema R of relation r.\n\nA distributed database can be run by independent or even competing parties as, for example, in [[bitcoin]] or [[Hasq]].\n\n== Advantages ==\n* Management of distributed data with different levels of transparency like network transparency, fragmentation transparency, replication transparency, etc.\n* Increase reliability and availability\n* Easier expansion\n* Reflects organizational structure \u2014 database fragments potentially stored within the departments they relate to\n* Local autonomy or site autonomy \u2014 a department can control the data about them (as they are the ones familiar with it)\n* Protection of valuable data \u2014 if there were ever a catastrophic event such as a fire, all of the data would not be in one place, but distributed in multiple locations\n* Improved performance \u2014 data is located near the site of greatest demand, and the database systems themselves are parallelized, allowing load on the databases to be balanced among servers.  (A high load on one module of the database won't affect other modules of the database in a distributed database)\n* Economics \u2014 it may cost less to create a network of smaller computers with the power of a single large computer\n* Modularity \u2014 systems can be modified, added and removed from the distributed database without affecting other modules (systems)\n* Reliable transactions - due to replication of the database\n* Hardware, operating-system, network, fragmentation, DBMS, replication and location independence\n* Continuous operation, even if some nodes go offline (depending on design)\n* Distributed query processing can improve performance\n* Single-site failure does not affect performance of system.\n* For those systems that support full distributed transactions, operations enjoy the [[ACID]] properties:\n** A-atomicity, the transaction takes place as a whole or not at all\n** C-consistency, maps one consistent DB state to another\n** I-isolation, each transaction sees a consistent DB\n** D-durability, the results of a transaction must survive system failures\n\nThe Merge Replication Method is popularly used to consolidate the data between databases.{{citation needed|date=July 2013}}\n\n== Disadvantages ==\n* Complexity \u2014 [[Database administrator|DBAs]] may have to do extra work to ensure that the distributed nature of the system is transparent.  Extra work must also be done to maintain multiple [[disparate system]]s, instead of one big one.  Extra database design work must also be done to account for the disconnected nature of the database \u2014 for example, joins become prohibitively expensive when performed across multiple systems.\n* Economics \u2014 increased complexity and a more extensive infrastructure means extra labour costs\n* Security \u2014 remote database fragments must be secured, and they are not centralized so the remote sites must be secured as well.  The infrastructure must also be secured (for example, by encrypting the network links between remote sites).\n* Difficult to maintain integrity \u2014 but in a distributed database, enforcing integrity over a network may require too much of the network's resources to be feasible\n* Inexperience \u2014 distributed databases are difficult to work with, and in such a young field there is not much readily available experience in \"proper\" practice\n* Lack of standards \u2014 there are no tools or methodologies yet to help users convert a centralized DBMS into a distributed DBMS{{citation needed|date=July 2013}}\n* Database design more complex \u2014 In addition to traditional database design challenges, the design of a distributed database has to consider fragmentation of data, allocation of fragments to specific sites and data replication\n* Additional software is required\n* Operating system should support distributed environment\n* [[Concurrency control]] poses a major issue. It can be solved by [[Lock (database)|locking]] and [[timestamp]]ing.\n* Distributed access to data\n* Analysis of distributed data\n\n==See also==\n*[[Centralized database]]\n*[[Data grid]]\n*[[Distributed data store]]\n*[[Distributed cache]]\n*[[Routing protocol]]\n*[[Distributed hash table]]\n\n==References==\n{{Reflist|30em}}\n{{more footnotes|date=April 2013}}\n*M. T. \u00d6zsu and P. Valduriez, ''Principles of Distributed Databases'' (3rd edition) (2011), Springer, ISBN 978-1-4419-8833-1\n*Elmasri and Navathe, ''Fundamentals of database systems'' (3rd edition), Addison-Wesley Longman, ISBN 0-201-54263-3\n*''Oracle Database Administrator's Guide 10g'' (Release 1), http://docs.oracle.com/cd/B14117_01/server.101/b10739/ds_concepts.htm\n\n{{Databases}}\n\n[[Category:Data management]]\n[[Category:Types of databases]]\n[[Category:Distributed computing architecture]]\n[[Category:Applications of distributed computing]]\n[[Category:Database management systems]]"}]}}}}