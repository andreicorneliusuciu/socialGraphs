{"batchcomplete":"","query":{"normalized":[{"from":"compiler","to":"Compiler"}],"pages":{"5739":{"pageid":5739,"ns":0,"title":"Compiler","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{About|the computing term|the anime|Compiler (anime)}}\n{{Redirect2|Compile|compiling|the software company|Compile (publisher)|other uses|Compilation (disambiguation){{!}}Compilation}}\n{{multiple issues|\n{{citation style|date=January 2014}}\n{{more footnotes|date=January 2014}}\n}}\n{{Program execution}}\n{{Use dmy dates|date=July 2012}}\n\nA '''compiler''' is a [[computer program]] (or a set of programs) that transforms [[source code]] written in a [[programming language]] (the source language) into another computer language (the target language), with the latter often having a binary form known as [[object code]].<ref>{{cite news|title=Definition of:compiler|url=http://www.pcmag.com/encyclopedia/term/40105/compiler | work=PC Magazine}}</ref>  The most common reason for converting source code is to create an [[executable]] program.\n\nThe name \"compiler\" is primarily used for programs that translate source code from a [[high-level programming language]] to a [[lower level language]] (e.g., [[assembly language]] or [[machine code]]). If the compiled program can run on a computer whose [[CPU]] or [[operating system]] is different from the one on which the compiler runs, the compiler is known as a [[cross-compiler]].  More generally, compilers are a specific type of [[Translator (computing)|translator]].\n\nWhile all programs that take a set of programming specifications and translate them, i.e. create a means to execute those specifications, are technically \"compilers\", the term generally means a program that produces a separate executable from the compiler (that may require a run time library or subsystem to operate), a compiler that merely executes the original specifications is usually referred to as an \"[[interpreter (computing)|interpreter]]\", although because of differing methods of analyzing what represents compilation and what represents interpretation, there is some overlap between the two terms.\n\nA program that translates from a [[low level language]] to a higher level one is a [[decompiler]].  A program that translates between high-level languages is usually called a [[source-to-source compiler]] or transpiler.  A language [[rewriting|rewriter]] is usually a program that translates the form of expressions without a change of language.  The term [[compiler-compiler]] is sometimes used to refer to a [[parser generator]], a tool often used to help create the [[lexical analysis|lexer]] and [[parser]]. A compiler is likely to perform many or all of the following operations: [[lexical analysis]], [[preprocessing]], [[parsing]], [[Semantic analysis (compilers)|semantic analysis]] ([[syntax-directed translation]]), [[code generation (compiler)|code generation]], and [[code optimization]].  Program faults caused by incorrect compiler behavior can be very difficult to track down and work around; therefore, compiler implementors invest significant effort to ensure [[compiler correctness]].\n\n== History ==\n{{Main article|History of compiler construction}}\n\n[[File:Compiler.svg|right|thumb|300px|A diagram of the operation of a typical multi-language, multi-target compiler]]\n\nSoftware for early computers was primarily written in assembly language. Although the first high level language is nearly as old as the first computer, the limited [[main memory|memory]] capacity of early computers led to substantial technical challenges when the first compilers were designed.{{discuss|Vague comments about \"first\" in lede}}\n\nThe first high-level programming language ([[Plankalk\u00fcl]]) was proposed by [[Konrad Zuse]] in 1943. The first compiler was written by [[Grace Hopper]], in 1952, for the [[A-0 programming language]]; the A-0 functioned more as a loader or linker than the modern notion of a compiler. The first [[autocode]] and its compiler were developed by [[Alick Glennie]] in 1952 for the Mark 1 computer at the University of Manchester and is considered by some to be the first compiled programming language.<ref>Knuth, D. E., & Pardo, L. T. (1980). [http://bitsavers.trailing-edge.com/pdf/stanford/cs_techReports/STAN-CS-76-562_EarlyDevelPgmgLang_Aug76.pdf The early development of programming languages.] A history of computing in the twentieth century, 197-273.</ref> The [[FORTRAN]]<!-- ###here (only), upper-case FORTRAN is correct, as it was the name used at the time, and on IBM's early compilers ###--> team led by [[John Backus]] at [[IBM]] is generally credited as having introduced the first complete compiler in 1957. [[COBOL]] was an early language to be compiled on multiple architectures, in 1960.<ref>{{cite web |url=http://www.interesting-people.org/archives/interesting-people/199706/msg00011.html |title=IP: The World's First COBOL Compilers |date=12 June 1997 |publisher=interesting-people.org}}</ref>\n\nIn many application domains the idea of using a higher level language quickly caught on.  Because of the expanding functionality supported by newer [[programming language]]s and the increasing complexity of computer architectures, compilers have become more complex.\n\nEarly compilers were written in assembly language. The first ''[[self-hosting]]'' compiler \u2013 capable of compiling its own source code in a high-level language \u2013 was created in 1962 for [[Lisp programming language|Lisp]] by Tim Hart and Mike Levin at [[Massachusetts Institute of Technology|MIT]].<ref>{{cite web |url=ftp://publications.ai.mit.edu/ai-publications/pdf/AIM-039.pdf |author=T. Hart and M. Levin |title=The New Compiler, AIM-39 - CSAIL Digital Archive - Artificial Intelligence Laboratory Series |publisher=publications.ai.mit.edu}}</ref> Since the 1970s it has become common practice to implement a compiler in the language it compiles, although both [[Pascal (programming language)|Pascal]] and [[C (programming language)|C]] have been popular choices for implementation language. Building a self-hosting compiler is a [[bootstrapping (compilers)|bootstrapping]] problem\u2014the first such compiler for a language must be compiled either by hand or by a compiler written in a different language, or (as in Hart and Levin's Lisp compiler) compiled by running the compiler in an [[Interpreter (computing)|interpreter]].\n\n=== Compilation ===\nCompilers enabled the development of programs that are machine-independent. Before the development of [[Fortran|FORTRAN]], the first [[High-level programming language|high-level language]], in the 1950s,<ref>{{cite journal|last1=Sheridan|first1=Peter B|title=The arithmetic translator-compiler of the IBM FORTRAN automatic coding system|journal=Communications of the ACM|date=1959|volume=2|issue=2|pages=9\u201321|publisher=ACM|doi=10.1145/368280.368289}}</ref> machine-dependent [[assembly language]] was widely used. While assembly language produces more [[Abstraction layer|abstraction]] than machine code on the same architecture, just as with machine code, it has to be modified or rewritten if the program is to be executed on different [[computer hardware]] architecture.\n\nWith the advent of high-level programming languages that followed FORTRAN, such as [[COBOL]], [[C (programming language)|C]], and [[BASIC]], programmers could write machine-independent source programs. A compiler translates the high-level source programs into target programs in machine languages for the specific hardware. Once the target program is generated, the user can execute the program.\n\n=== Compilers in education ===\nCompiler construction and [[compiler optimization]] are taught at universities and schools as part of a [[computer science]] curriculum.<ref>Chakraborty, P., Saxena, P. C., Katti, C. P., Pahwa, G., Taneja, S. A new practicum in compiler construction. ''Computer Applications in Engineering Education'', In Press. http://onlinelibrary.wiley.com/doi/10.1002/cae.20566/pdf</ref> Such courses are usually supplemented with the implementation of a compiler for an [[educational programming language]]. A well-documented example is [[Niklaus Wirth]]'s [[PL/0]] compiler, which Wirth used to teach compiler construction in the 1970s.<ref>{{cite web |url=http://www.246.dk/pl0.html |title=The PL/0 compiler/interpreter}}</ref> In spite of its simplicity, the PL/0 compiler introduced several influential concepts to the field:\n\n# Program development by stepwise refinement (also the title of a 1971 paper by Wirth)<ref>{{cite web |url=http://www.acm.org/classics/dec95/ |title=The ACM Digital Library}}</ref>\n# The use of a [[recursive descent parser]]\n# The use of [[Extended Backus\u2013Naur Form]] (EBNF) to specify the [[syntax (programming languages)|syntax]] of a language\n# A [[code generation (compiler)|code generator]] producing portable [[Bytecode|P-code]]\n# The use of [[tombstone diagram]]s in the formal description of the [[bootstrapping (compilers)|bootstrapping]] problem.\n\n== Compiler output ==\n{{unreferenced section|date=May 2013}}\nOne classification of compilers is by the [[platform (computing)|platform]] on which their generated code executes. This is known as the ''target platform.''\n\nA ''native'' or ''hosted'' compiler is one which output is intended to directly run on the same type of computer and operating system that the compiler itself runs on. The output of a [[cross compiler]] is designed to run on a different platform.  Cross compilers are often used when developing software for [[embedded system]]s that are not intended to support a software development environment.\n\nThe output of a compiler that produces code for a [[virtual machine]] (VM) may or may not be executed on the same platform as the compiler that produced it.  For this reason such compilers are not usually classified as native or cross compilers.\n\nThe lower level language that is the target of a compiler may itself be a [[high-level programming language]]. C, often viewed as some sort of portable assembler, can also be the target language of a compiler. E.g.: [[Cfront]], the original compiler for [[C++]] used C as target language. The C created by such a compiler is usually not intended to be read and maintained by humans. So [[indent style]] and pretty C intermediate code are irrelevant. Some features of C turn it into a good target language. E.g.: C code with [[C preprocessor#Special macros and directives|<code>#line</code>]] directives can be generated to support [[debugging]] of the original source.\n\n=== Compiled versus interpreted languages ===\nHigher-level programming languages usually appear with a type of [[Translator (computing)|translation]] in mind: either designed as [[compiled language]] or [[interpreted language]]. However, in practice there is rarely anything about a language that ''requires'' it to be exclusively compiled or exclusively interpreted, although it is possible to design languages that rely on re-interpretation at run time. The categorization usually reflects the most popular or widespread implementations of a language \u2014 for instance, [[BASIC]] is sometimes called an interpreted language, and C a compiled one, despite the existence of BASIC compilers and C interpreters.\n\nInterpretation does not replace compilation completely. It only hides it from the user and makes it gradual. Even though an interpreter can itself be interpreted, a directly executed program is needed somewhere at the bottom of the stack (see [[machine language]]). Modern trends toward [[just-in-time compilation]] and [[bytecode|bytecode interpretation]] at times blur the traditional categorizations of compilers and interpreters.\n\nSome language specifications spell out that implementations ''must'' include a compilation facility; for example, [[Common Lisp]]. However, there is nothing inherent in the definition of Common Lisp that stops it from being interpreted. Other languages have features that are very easy to implement in an interpreter, but make writing a compiler much harder; for example, [[APL (programming language)|APL]], [[SNOBOL4]], and many scripting languages allow programs to construct arbitrary source code at runtime with regular string operations, and then execute that code by passing it to a special [[eval|evaluation function]]. To implement these features in a compiled language, programs must usually be shipped with a [[runtime library]] that includes a version of the compiler itself.\n\n=== Special type of compilers ===\nWhile the typical compiler outputs machine code, there are several other types:\n* A [[source-to-source compiler]] is a type of compiler that takes a high level language as its input and outputs a high level language.  For example, an [[Automatic parallelization|automatic parallelizing]] compiler will frequently take in a high level language program as an input and then transform the code and annotate it with parallel code annotations (e.g. [[OpenMP]]) or language constructs (e.g. Fortran's <code>DOALL</code> statements).\n* [[Bytecode]] compilers that compile to assembly language of a theoretical machine, like some [[Prolog]] implementations\n** This Prolog machine is also known as the [[Warren Abstract Machine]] (or WAM).\n** Bytecode compilers for [[Java (programming language)|Java]], [[Python (programming language)|Python]] are also examples of this category.\n* [[Just-in-time compilation|Just-in-time compiler]] (JIT compiler) is the last part of a multi-pass compiler chain in which some compilation stages are deferred to run-time. Examples are implemented in [[Smalltalk]], [[Java (programming language)|Java]] and Microsoft [[.NET Framework|.NET]]'s [[Common Intermediate Language]] (CIL) systems.\n** Applications are first compiled using a bytecode compiler and delivered in a machine-independent [[intermediate representation]]. This bytecode is then compiled using a JIT compiler to native machine code just when the execution of the program is required.<ref>{{cite journal|last1=Aycock|first1=John|title=A Brief History of Just-in-time|journal=ACM Comput. Surv.|date=June 2003|volume=35|issue=2|pages=93\u2013113|doi=10.1145/857076.857077|location=New York, NY, USA}}</ref>\n* [[silicon compiler|hardware compilers]] (also known as syntheses tools) are compilers whose output is a description of the hardware configuration instead of a sequence of instructions.\n** The output of these compilers target [[computer hardware]] at a very low level, for example a [[field-programmable gate array]] (FPGA) or structured [[application-specific integrated circuit]] (ASIC).<ref>{{cite web|last=Swartz| first=Jordan S.|last2=Betz| first2=Vaugh| last3=Rose |first3=Jonathan|title=A Fast Routability-Driven Router for FPGAs|url=http://www.eecg.toronto.edu/~vaughn/papers/fpga98.pdf|publisher=Department of Electrical and Computer Engineering, University of Toronto}}</ref> Such compilers are said to be hardware compilers, because the source code they compile effectively controls the final configuration of the hardware and how it operates. The output of the compilation is only an interconnection of [[transistor]]s or [[lookup table]]s.\n** An example of hardware compiler is XST,<ref>{{cite book|last1=Lysaght|first1=Patrick|last2=Blodget|first2=Brandon|last3=Mason|first3=Jeff|last4=Young|first4=Jay|last5=Bridgford|first5=Brendan|title=2006 International Conference on Field Programmable Logic and Applications|date=2006|publisher=IEEE|chapter=Invited paper: Enhanced architectures, design methodologies and cad tools for dynamic reconfiguration of xilinx fpgas}}</ref><ref>{{cite web|last1=Xilinx\u00ae Inc.|title=XST Synthesis Overview|url=http://www.xilinx.com/support/documentation/sw_manuals/xilinx11/ise_c_using_xst_for_synthesis.htm|website=Xilinx.com|publisher=Xilinx\u00ae Inc.|accessdate=20 June 2016}}</ref> the Xilinx Synthesis Tool used for configuring FPGAs. Similar tools are available from Altera,<ref>{{cite web|last1=Altera Corporation|title=Spectra-Q\u2122 Engine|url=https://www.altera.com/products/design-software/fpga-design/quartus-prime/features/spectra-q.html|website=altera.com|publisher=Altera Corporation|accessdate=20 June 2016}}</ref> Synplicity, Synopsys and other hardware vendors.\n\n== Compiler construction ==\n{{unreferenced section|date=September 2010}}\n\nCompilers bridge source programs in high-level languages with the underlying hardware. A compiler verifies code syntax, generates efficient object code, performs run-time organization, and formats the output according to [[Assembler (computing)|assembler]] and [[Linker (computing)|linker]] conventions.\n\nIn the early days, the approach taken to compiler design used to be directly affected by the complexity of the processing, the experience of the person(s) designing it, and the resources available.\n\nA compiler for a relatively simple language written by one person might be a single, monolithic piece of software. When the source language is large and complex, and high quality output is required, the design may be split into a number of relatively independent phases. Having separate phases means development can be parceled up into small parts and given to different people. It also becomes much easier to replace a single phase by an improved one, or to insert new phases later (e.g., additional optimizations).\n\nThe division of the compilation processes into phases was championed by the [[PQCC|Production Quality Compiler-Compiler Project]] (PQCC) at [[Carnegie Mellon University]]. This project introduced the terms ''front end'', ''middle end'', and ''back end''.\n\nAll but the smallest of compilers have more than two phases. The point at which these ''ends'' meet is not always clearly defined.\n\n=== One-pass versus multi-pass compilers{{anchor|Single-pass}} ===\nClassifying compilers by number of passes has its background in the hardware resource limitations of computers.  Compiling involves performing lots of work and early computers did not have enough memory to contain one program that did all of this work.  So compilers were split up into smaller programs which each made a pass over the source (or some representation of it) performing some of the required analysis and translations.\n\nThe ability to compile in a [[one-pass compiler|single pass]] has classically been seen as a benefit because it simplifies the job of writing a compiler and one-pass compilers generally perform compilations faster than [[multi-pass compiler]]s.  Thus, partly driven by the resource limitations of early systems, many early languages were specifically designed so that they could be compiled in a single pass (e.g., [[Pascal (programming language)|Pascal]]).\n\nIn some cases the design of a language feature may require a compiler to perform more than one pass over the source.  For instance, consider a declaration appearing on line 20 of the source which affects the translation of a statement appearing on line 10.  In this case, the first pass needs to gather information about declarations appearing after statements that they affect, with the actual translation happening during a subsequent pass.\n\nThe disadvantage of compiling in a single pass is that it is not possible to perform many of the sophisticated [[compiler optimization|optimizations]] needed to generate high quality code.  It can be difficult to count exactly how many passes an optimizing compiler makes.  For instance, different phases of optimization may analyse one expression many times but only analyse another expression once.\n\nSplitting a compiler up into small programs is a technique used by researchers interested in producing provably correct compilers.  Proving the correctness of a set of small programs often requires less effort than proving the correctness of a larger, single, equivalent program.\n\n=== Three phases compiler structure ===\n\nRegardless of the exact number of stages which a compiler is built of, it is common practice to classify them into three phases. These phases are named after the [[PQCC|Production Quality Compiler-Compiler Project]] phases mentioned before.\n[[File:Compiler design.svg|thumb|center|upright=2.5|Compiler design]]\n\n* The ''front end'' verifies syntax and semantics according to a specific source language. Performs [[type checking]] by collecting type information. Generates errors and warnings, if any, highlighting them on the source code. Aspects of the front end include lexical analysis, syntax analysis, and semantic analysis. Eventually generates an [[intermediate representation]] or ''IR'' of the source code for processing by the middle-end. This IR is usually a lower level of representation of the program with respect to the source code.\n* The ''middle end'' performs optimizations on a form other than the source code or machine code. This source code/machine code independence is intended to enable generic optimizations to be shared between versions of the compiler supporting different languages and target processors. Examples of middle end optimizations are removal of useless or unreachable code, discovery and propagation of constant values, relocation of computation to a less frequently executed place (e.g., out of a loop), or specialization of computation based on the context. Eventually it may generate another IR for to be used in the back end.\n* The ''back end'' takes the output from the middle end. It may perform more analysis, transformations and optimizations that are for a particular computer. Generates the target-dependent assembly code, performing [[register allocation]] in process. Performs optimizations of the target code utilization of the hardware, like figuring out how to keep parallel [[execution unit]]s busy by filling [[delay slot]]s. Although most algorithms for optimization are [[NP-hardness|NP-hard]], heuristic techniques are well-developed and currently implemented in production-quality compilers.<ref>{{cite web|author1=LLVM community|title=The LLVM Target-Independent Code Generator|url=http://llvm.org/docs/CodeGenerator.html#built-in-register-allocators|website=LLVM Documentation|accessdate=17 June 2016}}</ref> Typically the output of a back end is machine code specialized for a particular processor and operating system.\n\nThis front/middle/back-end approach makes it possible to combine front ends for different languages with back ends for different [[CPU]]s. Practical examples of this approach are the [[GNU Compiler Collection]], [[LLVM]],<ref name=LattnerBook1st>{{cite book|last1=Lattner|first1=Chris|editor1-last=Brown|editor1-first=Amy|editor2-last=Wilson|editor2-first=Greg|title=The Architecture of Open Source Applications|edition=1|url=http://www.aosabook.org/en/llvm.html|chapter=LLVM}}</ref> and the [[Amsterdam Compiler Kit]], which have multiple front-ends, shared analysis and multiple back-ends.\n\n=== Front end ===\n[[File:Xxx Scanner and parser example for C.gif|thumb|right|400px|[[Lexical analysis|Lexer]] and [[Parsing|parser]] example for [[C (programming language)|C]]. Starting from the sequence of characters \"<code>if(net>0.0)total+=net*(1.0+tax/100.0);</code>\", the scanner composes a sequence of [[Lexical analysis#token|tokens]], and categorizes each of them, for example as {{color|#600000|identifier}}, {{color|#606000|reserved word}}, {{color|#006000|number literal}}, or {{color|#000060|operator}}. The latter sequence is transformed by the parser into a [[abstract syntax tree|syntax tree]], which is then treated by the remaining compiler phases. The scanner and parser handles the [[regular grammar|regular]] and properly [[context-free grammar|context-free]] parts of the [[C syntax#External links|grammar for C]], respectively.]]\n\nThe ''compiler frontend'' analyzes the source code to build an internal representation of the program, called the [[intermediate representation]] or ''IR''. It also manages the [[symbol table]], a data structure mapping each symbol in the source code to associated information such as location, type and scope.\n\nWhile the frontend can be a single monolithic function or program, as in a [[scannerless parser]], it is more commonly implemented and analyzed as several phases, which may execute sequentially or concurrently. This method is favored due to its modularity and [[separation of concerns]]. Most commonly today, the frontend is broken into three phases: [[lexical analysis]] (also known as lexing), [[syntax analysis]] (also known as parsing), and [[Semantic analysis (compilers)|semantic analysis]]. Lexical analysis and parsing comprise the syntactic analysis (word syntax and phrase syntax, respectively), and in simple cases these modules (the lexer and parser) can be automatically generated from a grammar for the language, though in more complex cases these require manual modification. The lexical grammar and phrase grammar are usually [[context-free grammar]]s, which simplifies analysis significantly, with context-sensitivity handled at the semantic analysis phase. The semantic analysis phase is generally more complex and written by hand, but can be partially or fully automated using [[attribute grammar]]s. These phases themselves can be further broken down \u2013 lexing as scanning and evaluating, parsing as first building a concrete syntax tree (CST, parse tree), and then transforming it into an abstract syntax tree (AST, syntax tree).\n\nIn some cases additional phases are used, notably ''line reconstruction'' and ''preprocessing,'' but these are rare. A detailed list of possible phases includes:\n\n# ''{{visible anchor|Line reconstruction}}'':  Languages which [[stropping (syntax)|strop]] their keywords or allow arbitrary spaces within identifiers require a phase before parsing, which converts the input character sequence to a canonical form ready for the parser.  The [[top-down parsing|top-down]], [[recursive descent parser|recursive-descent]], table-driven parsers used in the 1960s typically read the source one character at a time and did not require a separate tokenizing phase. [[Atlas Autocode]], and [[Edinburgh IMP|Imp]] (and some implementations of [[ALGOL]] and [[Coral 66]]) are examples of stropped languages which compilers would have a ''Line Reconstruction'' phase.\n# [[Lexical analysis]] breaks the source code text into small pieces called ''tokens''.  Each token is a single atomic unit of the language, for instance a [[keyword (computing)|keyword]], [[identifier]] or [[symbol|symbol name]].  The token syntax is typically a [[regular language]], so a [[finite state automaton]] constructed from a [[regular expression]] can be used to recognize it.  This phase is also called lexing or scanning, and the software doing lexical analysis is called a [[lexical analyzer]] or scanner. This may not be a separate step \u2013 it can be combined with the parsing step in [[scannerless parsing]], in which case parsing is done at the character level, not the token level.\n# [[Preprocessor|Preprocessing]].  Some languages, e.g., C, require a preprocessing phase which supports [[Macro (computer science)|macro]] substitution and conditional compilation. Typically the preprocessing phase occurs before syntactic or semantic analysis; e.g. in the case of C, the preprocessor manipulates lexical tokens rather than syntactic forms. However, some languages such as [[Scheme (programming language)|Scheme]] support macro substitutions based on syntactic forms.\n# [[Syntax analysis]] involves [[parsing]] the token sequence to identify the syntactic structure of the program. This phase typically builds a [[parse tree]], which replaces the linear sequence of tokens with a tree structure built according to the rules of a [[formal grammar]] which define the language's syntax. The parse tree is often analyzed, augmented, and transformed by later phases in the compiler.\n# [[Semantic analysis (compilers)|Semantic analysis]] is the phase in which the compiler adds semantic information to the [[parse tree]] and builds the [[symbol table]]. This phase performs semantic checks such as [[type checking]] (checking for type errors), or [[object binding]] (associating variable and function references with their definitions), or [[definite assignment analysis|definite assignment]] (requiring all local variables to be initialized before use), rejecting incorrect programs or issuing warnings. Semantic analysis usually requires a complete parse tree, meaning that this phase logically follows the [[parsing]] phase, and logically precedes the [[code generation (compiler)|code generation]] phase, though it is often possible to fold multiple phases into one pass over the code in a compiler implementation.\n\n=== Back end ===\nThe term ''back end'' is sometimes confused with ''[[code generation (compiler)|code generator]]'' because of the overlapped functionality of generating assembly code. Some literature uses ''middle end'' to distinguish the generic analysis and optimization phases in the back end from the machine-dependent code generators.\n\nThe main phases of the back end include the following:\n\n# [[Compiler analysis|Analysis]]: This is the gathering of program information from the intermediate representation derived from the input; [[data-flow analysis]] is used to build [[use-define chain]]s, together with [[dependence analysis]], [[alias analysis]], [[pointer analysis]], [[escape analysis]], etc. Accurate analysis is the basis for any compiler optimization. The [[call graph]] and [[control flow graph]] are usually also built during the analysis phase.\n# [[Compiler optimization|Optimization]]: the intermediate language representation is transformed into functionally equivalent but faster (or smaller) forms. Popular optimizations are [[inline expansion]], [[dead code elimination]], [[constant propagation]], [[loop transformation]], [[register allocation]] and even [[automatic parallelization]].\n# [[Code generation (compiler)|Code generation]]: the transformed intermediate language is translated into the output language, usually the native [[machine language]] of the system. This involves resource and storage decisions, such as deciding which variables to fit into registers and memory and the selection and scheduling of appropriate machine instructions along with their associated addressing modes (see also [[Sethi-Ullman algorithm]]).  Debug data may also need to be generated to facilitate [[debugging]].\n\nCompiler analysis is the prerequisite for any compiler optimization, and they tightly work together. For example, [[dependence analysis]] is crucial for [[loop transformation]].\n\nIn addition, the scope of compiler analysis and optimizations vary greatly, from as small as a [[basic block]] to the procedure/function level, or even over the whole program ([[interprocedural optimization]]). Obviously{{clarify|date=November 2015}}, a compiler can potentially do a better job using a broader view. But that broad view is not free: large scope analysis and optimizations are very costly in terms of compilation time and memory space; this is especially true for interprocedural analysis and optimizations.\n\nInterprocedural analysis and optimizations are common in modern commercial compilers from [[Hewlett-Packard|HP]], [[IBM]], [[Silicon Graphics|SGI]], [[Intel]], [[Microsoft]], and [[Sun Microsystems]]. The open source [[GNU Compiler Collection|GCC]] was criticized for a long time for lacking powerful interprocedural optimizations, but it is changing in this respect. Another open source compiler with full analysis and optimization infrastructure is [[Open64]], which is used by many organizations for research and commercial purposes.\n\nDue to the extra time and space needed for compiler analysis and optimizations, some compilers skip them by default. Users have to use compilation options to explicitly tell the compiler which optimizations should be enabled.\n\n=== Compiler correctness ===\n{{Main article|Compiler correctness}}\n[[Compiler correctness]] is the branch of software engineering that deals with trying to show that a compiler behaves according to its [[programming language|language specification]].<ref>{{cite web|last=Chlipala|first=Adam|title=Syntactic Proofs of Compositional Compiler Correctness|url=http://adam.chlipala.net/tmp/compose.pdf|publisher=Harvard University Cambridge, Massachusetts, USA}}</ref>   Techniques include developing the compiler using [[formal methods]] and using rigorous testing (often called compiler validation) on an existing compiler.\n\n== {{Anchor|International conferences and organizations}}Conferences and organizations ==\nA number of conferences in the field of [[programming languages]] present advances in compiler construction as one of their main topics.\n\n[[Association for Computing Machinery|ACM]] [[SIGPLAN]] supports a number of conferences, including:\n* [[Programming Language Design and Implementation]] (PLDI)\n* [[POPL|Principles of Programming Languages]] (POPL)\n* [[OOPSLA|Object-Oriented Programming, Systems, Languages, and Applications]] (OOPSLA)\n* [[International Conference on Functional Programming]] (ICFP)\n\nThe European Joint Conferences on Theory and Practice of Software ([[ETAPS]]) sponsors the International Conference on Compiler Construction, with papers from both the academic and industrial sectors.<ref>[http://www.etaps.org/ ETAPS] - European Joint Conferences on Theory and Practice of Software. Cf. \"CC\" (Compiler Construction) subsection.</ref>\n\nAsian Symposium on Programming Languages and Systems (APLAS) is organized by the Asian Association for Foundation of Software (AAFS).\n\n== Related techniques ==\n{{main article|Translator (computing)}}\n\n{{merge from|Translator (computing)|discuss=Talk:Compiler#Merger proposal|date=July 2014|section=yes}}\n\n[[Assembly language]] is a type of low-level language and a program that compiles it is more commonly known as an ''assembler'', with the inverse program known as a [[disassembler]].\n\nA program that translates from a low level language to a higher level one is a [[decompiler]].\n\nA program that translates between high-level languages is usually called a language translator, [[source to source translator]], language converter, or language [[Rewriting|rewriter]]. The last term is usually applied to translations that do not involve a change of language.\n\nA program that translates into an object code format that is not supported on the compilation machine is called a [[cross compiler]] and is commonly used to prepare code for embedded applications.\n\n== See also ==\n{{Portal|Computer programming}}\n{{Wikipedia books|Compiler construction}}\n\n* [[Abstract interpretation]]\n* [[Binary recompiler]]\n* [[Bottom-up parsing]]\n* [[Compile and go loader]]\n* [[Compile farm]]\n* [[List of compilers]]\n* {{Section link|List of important publications in computer science|Compilers}}\n* [[Metacompilation]]\n\n== Notes ==\n{{reflist|30em}}\n\n== References ==\n{{refbegin|30em}}\n# [https://web.archive.org/web/20150103161301/http://www.informatik.uni-trier.de/~ley/db/books/compiler/index.html Compiler textbook references] A collection of references to mainstream Compiler Construction Textbooks\n# {{Cite book |authorlink1=Alfred V. Aho |last1=Aho |first1=Alfred V. |authorlink2 = Ravi Sethi |last2=Sethi |first2=Ravi |authorlink3=Jeffrey D. Ullman |last3=Ullman |first3=Jeffrey D. |title=[[Compilers: Principles, Techniques, and Tools]] |isbn=9780201100884 |publisher=[[Addison-Wesley]] |year=1986 |edition=1st}}\n# {{Cite journal |authorlink=Frances E. Allen |last1=Allen |first1=Frances E. |url=http://www.research.ibm.com/journal/rd/255/ibmrd2505Q.pdf |title=A History of Language Processor Technology in IBM |work=IBM Journal of Research and Development |volume=25 |number=5 |date=September 1981 |publisher=[[IBM]] |subscription=yes| doi = 10.1147/rd.255.0535 }}\n# {{Cite book |last1=Allen |first1=Randy |authorlink2=Ken Kennedy (computer scientist) |last2=Kennedy |first2=Ken |title=Optimizing Compilers for Modern Architectures |publisher=[[Morgan Kaufmann Publishers]] |year=2001 |isbn=1-55860-286-0}}\n# {{Cite book |authorlink=Andrew Appel |last1=Appel |first1=Andrew Wilson |title=Modern Compiler Implementation in Java |edition=2nd |publisher=[[Cambridge University Press]] |year=2002 |isbn=0-521-82060-X}}\n# {{Cite book |authorlink=Andrew Appel |last1=Appel |first1=Andrew Wilson |url=https://books.google.com/books?id=8APOYafUt-oC |title=Modern Compiler Implementation in ML |publisher=[[Cambridge University Press]] |year=1998 |isbn=0-521-58274-1}}\n# {{cite book|last=Bornat|first=Richard|title=Understanding and Writing Compilers: A Do It Yourself Guide|year=1979|publisher=[[Macmillan Publishing]]|isbn=0-333-21732-2|url=http://www.cs.mdx.ac.uk/staffpages/r_bornat/books/compiling.pdf|authorlink=Richard Bornat}}\n# {{cite book | title=Engineering a Compiler | publisher=[[Morgan Kaufmann]] | year=2004 | isbn=1-55860-699-8 | first1=Keith D. | last1=Cooper | first2=Linda | last2=Torczon}}\n# {{Cite journal |first1=Bruce W. |last1=Leverett |first2=R. G. G. |last2=Cattell |first3=Joseph M. |last3=Newcomer |last4=Hobbs |first4=S.O. |last5=Reiner |first5=A.H. |last6=Schatz |first6=B.R. |last7=Wulf |first7=W.A. |title=An Overview of the Production \u2013 Quality Compiler \u2013 Compiler Project |work=[[Computer (magazine)|Computer]] |publisher=[[Carnegie-Mellon University]] |volume=13 |issue=8  |pages=38\u201349 |date=August 1980 |issn=0018-9162 |doi=10.1109/MC.1980.1653748 |subscription=yes}}\n# {{Cite book |last1=McKeeman |first1=William Marshall |authorlink2=Jim Horning |last2=Horning |first2=James J. |last3=Wortman |first3=David B. |url=http://www.cs.toronto.edu/XPL/ |title=A Compiler Generator |location=[[Englewood Cliffs, NJ]] |publisher=[[Prentice-Hall]] |year=1970 |isbn=0-13-155077-2}}\n# {{Cite book |authorlink=Steven Muchnick |last1=Muchnick |first1=Steven |url=https://books.google.com/books?id=Pq7pHwG1_OkC |title=Advanced Compiler Design and Implementation |publisher=[[Morgan Kaufmann Publishers]] |year=1997 |isbn=1-55860-320-4}}\n# {{cite book |authorlink=Michael L. Scott |last1=Scott |first1=Michael Lee |url=https://books.google.com/books?id=4LMtA2wOsPcC |title=Programming Language Pragmatics |publisher=[[Morgan Kaufmann]] |year=2005 |edition=2nd |isbn=0-12-633951-1}}\n# {{Cite book |last=Srikant |first=Y. N. |last2=Shankar |first2=Priti |url=https://books.google.com/books?id=0K_jIsgyNpoC |title=The Compiler Design Handbook: Optimizations and Machine Code Generation |publisher=[[CRC Press]] |year=2003 |isbn=0-8493-1240-X}}\n# {{Cite book |last1=Terry |first1=Patrick D. |url=http://scifac.ru.ac.za/compilers/conts.htm |title=Compilers and Compiler Generators: An Introduction with C++ |publisher=International Thomson Computer Press |year=1997 |isbn=1-85032-298-8}}\n# {{Cite book |authorlink1=Niklaus Wirth |last1=Wirth |first1=Niklaus |url=http://www.ethoberon.ethz.ch/WirthPubl/CBEAll.pdf |title=Compiler Construction |isbn=0-201-40353-6 |publisher=[[Addison-Wesley]] |year=1996}}\n{{refend}}\n\n== External links ==\n{{Wiktionary|compiler}}\n{{Wikibooks|Compiler Construction}}\n\n* {{dmoz|Computers/Programming/Compilers/|Compilers}}\n* [http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf Incremental Approach to Compiler Construction]{{snd}} a PDF Tutorial\n* [http://la-samhna.de/library/compile/index.html Compile-Howto]\n* ''[http://www.diku.dk/hjemmesider/ansatte/torbenm/Basics/ Basics of Compiler Design]'' by Torben \u00c6gidius Mogensen\n* {{YouTube|_C5AHaS1mOA|Short animation}} explaining the key conceptual difference between compilers and interpreters\n* {{YouTube|id=QPCC2sbukeo|title=Syntax Analysis & LL1 Parsing}}\n* [http://compilers.iecc.com/crenshaw/ Let's Build a Compiler], by Jack Crenshaw\n* [https://web.archive.org/web/20141010102940/http://www.compdev.net/ Forum about compiler development]\n\n{{Authority control}}\n\n[[Category:American inventions]]\n[[Category:Compilers| ]]\n[[Category:Compiler construction]]\n[[Category:Computer libraries]]\n[[Category:Programming language implementation]]\n[[Category:Utility software types]]"}]}}}}