{"batchcomplete":"","query":{"normalized":[{"from":"Hypertext_Transfer_Protocol","to":"Hypertext Transfer Protocol"}],"pages":{"13443":{"pageid":13443,"ns":0,"title":"Hypertext Transfer Protocol","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{Refimprove|date=August 2016}}\n{{pp-pc1}}\n{{IPstack}}\nThe '''Hypertext Transfer Protocol''' ('''HTTP''') is an [[application protocol]] for distributed, collaborative, [[hypermedia]] information systems.<ref name=\"ietf2616\">{{cite IETF\n | rfc = 2616\n | title = Hypertext Transfer Protocol -- HTTP/1.1\n | first1 = Roy T. | last1 = Fielding | first2 = James | last2 = Gettys | first3 = Jeffrey C. | last3 = Mogul\n | first4 = Henrik Frystyk | last4 = Nielsen | first5 = Larry | last5 = Masinter | first6 = Paul J. | last6 = Leach\n | first7 = Tim | last7 = Berners-Lee\n | publisher = [[Internet Engineering Task Force|IETF]]\n | year = 1999\n | month = June\n | ref = ietf\n}}</ref> HTTP is the foundation of data communication for the [[World Wide Web]].\n\n[[Hypertext]] is structured text that uses logical links ([[hyperlinks]]) between [[node (computer science)|node]]s containing text. HTTP is the protocol to exchange or transfer hypertext.\n\nDevelopment of HTTP was initiated by [[Tim Berners-Lee]] at [[CERN]] in 1989. Standards development of HTTP was coordinated by the [[Internet Engineering Task Force]] (IETF) and the [[World Wide Web Consortium]] (W3C), culminating in the publication of a series of [[Requests for Comments]] (RFCs). The first definition of HTTP/1.1, the version of HTTP in common use, occurred in RFC 2068 in 1997, although this was obsoleted by RFC 2616 in 1999.\n\nA later version, the successor [[HTTP/2]], was standardized in 2015, and is now supported by major web servers.\n\n==Technical overview==\n[[File:Internet1.jpg|thumb|right|[[URL]] beginning with the HTTP scheme and the [[World Wide Web|WWW]] domain name label.]]\n\nHTTP functions as a [[request\u2013response]] protocol in the [[Client\u2013server model|client\u2013server computing model]]. A [[Web browser engine|web browser]], for example, may be the ''client'' and an application running on a computer [[Host (network)|hosting]] a [[website]] may be the ''server''. The client submits an HTTP ''request'' message to the server. The server, which provides ''resources'' such as HTML files and other content, or performs other functions on behalf of the client, returns a ''response'' message to the client. The response contains completion status information about the request and may also contain requested content in its message body.\n\nA web browser is an example of a ''[[user agent]]'' (UA). Other types of user agent include the indexing software used by search providers ([[web crawler]]s), [[voice browser]]s, [[Mobile enterprise application platform|mobile apps]], and other [[software]] that accesses, consumes, or displays web content.\n\nHTTP is designed to permit intermediate network elements to improve or enable communications between clients and servers. High-traffic websites often benefit from [[web cache]] servers that deliver content on behalf of [[upstream server]]s to improve response time. Web browsers cache previously accessed web resources and reuse them when possible to reduce network traffic. HTTP [[proxy server]]s at [[private network]] boundaries can facilitate communication for clients without a globally routable address, by relaying messages with external servers.\n\nHTTP is an [[application layer]] protocol designed within the framework of the [[Internet protocol suite]]. Its definition presumes an underlying and reliable [[transport layer]] protocol,<ref>{{cite IETF|rfc=2616|sectionname=Overall Operation|section=1.4|page=12|idanchor=ietf}}</ref> and [[Transmission Control Protocol]] (TCP) is commonly used. However HTTP can be adapted to use unreliable protocols such as the [[User Datagram Protocol]] (UDP), for example in [[Universal Plug and Play#Protocol|HTTPU]] and [[Simple Service Discovery Protocol]] (SSDP).\n\n[[Web resource|HTTP resource]]s are identified and located on the network by [[Uniform Resource Locator]]s (URLs), using the [[Uniform Resource Identifier]]s (URI's) schemes ''http'' and ''https''. URIs and [[hyperlink]]s in [[HTML]] documents form inter-linked [[hypertext]] documents.\n\nHTTP/1.1 is a revision of the original HTTP (HTTP/1.0). In HTTP/1.0 a separate [[Connection-oriented communication|connection]] to the same server is made for every resource request. HTTP/1.1 can reuse a connection multiple times to download images, [[Client-side scripting|scripts]], [[Cascading Style Sheets|stylesheets]], ''etc'' after the page has been delivered. HTTP/1.1 communications therefore experience less [[Latency (engineering)|latency]] as the establishment of TCP connections presents considerable overhead.\n\n==History==\n[[File:Tim Berners-Lee CP 2.jpg|thumb|[[Tim Berners-Lee]] ]]\n\nThe term [[hypertext]] was coined by [[Ted Nelson]] in 1965 in the [[Xanadu Project]], which was in turn inspired by [[Vannevar Bush]]'s vision (1930s) of the microfilm-based information retrieval and management \"[[memex]]\" system described in his essay [[As We May Think]] (1945). [[Tim Berners-Lee]] and his team at [[CERN]] are credited with inventing the original HTTP along with HTML and the associated technology for a web server and a text-based web browser. Berners-Lee first proposed the \"WorldWideWeb\" project in 1989&nbsp;\u2014 now known as the [[World Wide Web]].\nThe first version of the protocol had only one method, namely GET, which would request a page from a server.<ref>{{cite web|last=Berners-Lee|first=Tim|title=HyperText Transfer Protocol|url=http://www.w3.org/History/19921103-hypertext/hypertext/WWW/Protocols/HTTP.html|publisher=[[World Wide Web Consortium]]|accessdate=31 August 2010}}</ref> The response from the server was always an HTML page.<ref>{{cite web|title=The Original HTTP as defined in 1991|url=http://www.w3.org/Protocols/HTTP/AsImplemented.html|publisher=[[World Wide Web Consortium]]|accessdate=24 July 2010|author=[[Tim Berners-Lee]]}}</ref>\n\nThe first documented version of HTTP was '''[http://www.w3.org/pub/WWW/Protocols/HTTP/AsImplemented.html HTTP V0.9]''' (1991). [[Dave Raggett]] led the HTTP Working Group (HTTP WG) in 1995 and wanted to expand the protocol with extended operations, extended negotiation, richer meta-information, tied with a security protocol which became more efficient by adding additional methods and [[List of HTTP header fields|header fields]].<ref name=\"raggettprofile\">{{cite web|last=Raggett|first=Dave|title=Dave Raggett's Bio|url=http://www.w3.org/People/Raggett/profile.html|publisher=[[World Wide Web Consortium]]|accessdate=11 June 2010}}</ref><ref>{{cite web|last=Raggett|first=Dave|title=Hypertext Transfer Protocol Working Group|url=http://www.w3.org/Arena/webworld/httpwgcharter.html|publisher=World Wide Web Consortium|accessdate=29 September 2010|first2=Tim|last2=Berners-Lee}}</ref> RFC 1945 officially introduced and recognized HTTP V1.0 in 1996.\n\nThe HTTP WG planned to publish new standards in December 1995<ref>{{cite web|last=Raggett|first=Dave|title=HTTP WG Plans|url=http://www.w3.org/Arena/webworld/httpwgplans.html|publisher=World Wide Web Consortium|accessdate=29 September 2010}}</ref> and the support for pre-standard HTTP/1.1 based on the then developing RFC 2068 (called HTTP-NG) was rapidly adopted by the major browser developers in early 1996. By March 1996, pre-standard HTTP/1.1 was supported in [[Arena (web browser)|Arena]],<ref name=\"simon\">{{cite web|title=Progress on HTTP-NG|url=http://www.w3.org/Protocols/HTTP-NG/http-ng-status.html|publisher=[[World Wide Web Consortium]]|accessdate=11 June 2010|author=[[Simon Spero]]}}</ref> [[Netscape Navigator|Netscape 2.0]],<ref name=\"simon\" /> Netscape Navigator Gold 2.01,<ref name=\"simon\" /> [[Mosaic (web browser)|Mosaic 2.7]],{{citation needed|date=September 2010}} [[Lynx (web browser)|Lynx 2.5]],{{citation needed|date=September 2010}} and in [[Internet Explorer 2|Internet Explorer 2.0]].{{citation needed|date=September 2010}} End-user adoption of the new browsers was rapid. In March 1996, one web hosting company reported that over 40% of browsers in use on the Internet were HTTP 1.1 compliant.{{Citation needed|date=August 2010}} That same web hosting company reported that by June 1996, 65% of all browsers accessing their servers were HTTP/1.1 compliant.<ref>{{cite web|work=Webcom.com Glossary entry|title=HTTP/1.1|url=http://www.webcom.com/glossary/http1.1.shtml|accessdate=2009-05-29}}</ref> The HTTP/1.1 standard as defined in RFC 2068 was officially released in January 1997. Improvements and updates to the HTTP/1.1 standard were released under RFC 2616 in June 1999.\n\nIn 2007, the '''[http://trac.tools.ietf.org/wg/httpbis/trac/wiki HTTPbis Working Group]''' was formed, in part, to revise and clarify the HTTP/1.1 specification. In June 2014, the WG released an updated six-part specification obsoleting RFC 2616:\n\n* RFC 7230, ''HTTP/1.1: Message Syntax and Routing''\n* RFC 7231, ''HTTP/1.1: Semantics and Content''\n* RFC 7232, ''HTTP/1.1: Conditional Requests''\n* RFC 7233, ''HTTP/1.1: Range Requests''\n* RFC 7234, ''HTTP/1.1: Caching''\n* RFC 7235, ''HTTP/1.1: Authentication''\n\n[[HTTP/2]] was published as RFC 7540 in May 2015.\n\n==HTTP session==\nAn HTTP session is a sequence of network request-response transactions. An HTTP client initiates a request by establishing a [[Transmission Control Protocol]] (TCP) connection to a particular [[TCP and UDP port|port]] on a server (typically port 80, occasionally port 8080; see [[List of TCP and UDP port numbers]]). An HTTP server listening on that port waits for a client's request message. Upon receiving the request, the server sends back a status line, such as \"HTTP/1.1 200 OK\", and a message of its own. The body of this message is typically the requested resource, although an error message or other information may also be returned.<ref name=\"ietf2616\" />\n\n==HTTP Authentication==\nHTTP provides multiple authentication schemes such as [[Basic access authentication]] and [[Digest access authentication]] which operate via  a challenge-response mechanism whereby the server identifies and issues a challenge before serving the requested content.\n\nHTTP provides a general framework for access control and authentication, via an extensible set of challenge-response authentication schemes, which can be used by a server to challenge a client request and by a client to provide authentication information.<ref name=\"ietf7235\">{{cite IETF\n | rfc = 7235\n | title = Hypertext Transfer Protocol (HTTP/1.1): Authentication\n | first1 = Roy T. \n | last1 = Fielding \n | first2 = Julian F.  \n | last2 = Reschke\n | publisher = [[Internet Engineering Task Force|IETF]]\n | year = 2014\n | month = June\n | ref = ietf\n}}</ref>\n\n===Authentication Realms===\nThe HTTP Authentication spec also provides an arbitrary, implementation specific construct \nfor further dividing resources common to a given root URI.  The realm value string, if present, is combined\nwith the canonical root URI to form the protection space component of the challenge. This in effect allows the \nserver to define separate authentication scopes under one root URI<ref name=\"ietf7235\" />\n\n==Request methods==\n[[File:Http request telnet ubuntu.png|thumb|right|An HTTP 1.1 request made using telnet. The [[HTTP request|request]] message, [[HTTP response|response]] header section, and response body are highlighted.]]\nHTTP defines methods (sometimes referred to as ''verbs'') to indicate the desired action to be performed on the identified resource. What this resource represents, whether pre-existing data or data that is generated dynamically, depends on the implementation of the server. Often, the resource corresponds to a file or the output of an executable residing on the server.\nThe HTTP/1.0 specification<ref>{{cite IETF\n | rfc = 1945\n | title = Hypertext Transfer Protocol -- HTTP/1.0\n | first1 = Tim | last1 = Berners-Lee\n | first2 = Roy T. | last2 = Fielding\n | first3 = Henrik Frystyk | last3 = Nielsen\n | publisher = [[Internet Engineering Task Force|IETF]]\n | sectionname = Method Definitions\n | section = 8\n | pages = 30-32\n}}</ref> defined the GET, POST and HEAD methods and the HTTP/1.1 specification<ref>{{cite IETF|rfc= 2616 |sectionname= Method Definitions |section= 9 |pages= 51-57 |idanchor= ietf }}</ref> added 5 new methods: OPTIONS, PUT, DELETE, TRACE and CONNECT. By being specified in these documents their semantics are well known and can be depended on. Any client can use any method and the server can be configured to support any combination of methods. If a method is unknown to an intermediate it will be treated as an unsafe and [[idempotence|non-idempotent]] method. There is no limit to the number of methods that can be defined and this allows for future methods to be specified without breaking existing infrastructure. For example, [[WebDAV]] defined 7 new methods and RFC 5789 specified the [[Patch verb|PATCH]] method.\n;GET:The GET method requests a representation of the specified resource. Requests using GET should only [[Data retrieval|retrieve data]] and should have no other effect. (This is also true of some other HTTP methods.)<ref name=\"ietf2616\" /> The [[W3C]] has published guidance principles on this distinction, saying, \"[[Web application]] design should be informed by the above principles, but also by the relevant limitations.\"<ref>{{cite web|last= Jacobs |first= Ian |title= URIs, Addressability, and the use of HTTP GET and POST |url= http://www.w3.org/2001/tag/doc/whenToUseGet.html#checklist |work= Technical Architecture Group finding |publisher= W3C |accessdate= 26 September 2010 |year= 2004 }}</ref> See [[#Safe methods|safe methods]] below.\n;HEAD: The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful for retrieving meta-information written in response headers, without having to transport the entire content.\n;POST: The [[POST (HTTP)|POST method]] requests that the server accept the entity enclosed in the request as a new subordinate of the [[web resource]] identified by the URI. The data POSTed might be, for example, an annotation for existing resources; a message for a bulletin board, newsgroup, mailing list, or comment thread; a block of data that is the result of submitting a [[Form (HTML)|web form]] to a data-handling process; or an item to add to a database.<ref>{{cite IETF|rfc= 2616 |sectionname= POST |section= 9.5 |page= 54 |idanchor= ietf }}</ref>\n;PUT: The PUT method requests that the enclosed entity be stored under the supplied [[URI]]. If the URI refers to an already existing resource, it is modified; if the URI does not point to an existing resource, then the server can create the resource with that URI.<ref>{{cite IETF|rfc= 2616 |sectionname= PUT |section= 9.6 |page= 55 |idanchor= ietf }}</ref>\n;DELETE: The DELETE method deletes the specified resource.\n;TRACE: The TRACE method echoes the received request so that a client can see what (if any) changes or additions have been made by intermediate servers.\n;OPTIONS: The OPTIONS method returns the HTTP methods that the server supports for the specified [[URL]]. This can be used to check the functionality of a web server by requesting '*' instead of a specific resource.\n;CONNECT:<ref name=\"rfc2616.9.9\">{{cite IETF|title= Hypertext Transfer Protocol -- HTTP/1.1 |rfc= 2616 |sectionname= CONNECT |section= 9.9 |page= 57 |year= 1999 |month= June |publisher= [[Internet Engineering Task Force|IETF]] |accessdate= 23 February 2014 }}</ref> The CONNECT method converts the request connection to a transparent [[tunneling protocol|TCP/IP tunnel]], usually to facilitate [[Transport Layer Security|SSL]]-encrypted communication ([[HTTP Secure|HTTPS]]) through an unencrypted [[HTTP proxy]].<ref>{{cite IETF\n | rfc = 2817\n | title = Upgrading to TLS Within HTTP/1.1\n | first1 = Rohit | last1 = Khare | first2 = Scott | last2 = Lawrence\n | year = 2000\n | month = May\n | publisher = [[Internet Engineering Task Force|IETF]]\n}}</ref><ref>{{cite web\n | url = http://www.kb.cert.org/vuls/id/150227\n | title = Vulnerability Note VU#150227: HTTP proxy default configurations allow arbitrary TCP connections\n | accessdate = 2007-05-10 | date = 2002-05-17 | publisher = [[CERT Coordination Center|US-CERT]]\n}}</ref> See [[HTTP tunnel#HTTP CONNECT tunneling|HTTP CONNECT tunneling]].\n;PATCH: The PATCH method applies partial modifications to a resource.<ref>{{cite IETF\n | rfc = 5789\n | title = PATCH Method for HTTP\n | first1 = Lisa | last1 = Dusseault | first2 = James M. | last2 = Snell\n | year = 2010\n | month = March\n | publisher = [[Internet Engineering Task Force|IETF]]\n}}</ref>\nAll general-purpose HTTP servers are required to implement at least the GET and HEAD methods,<ref>{{cite IETF|rfc= 2616 |sectionname= Method |section= 5.1.1 |page= 36 |idanchor= ietf }}</ref> and, whenever possible, also the OPTIONS method.{{Citation needed|date=August 2008}}\n\n===Safe methods===\nSome of the  methods (for example, HEAD, GET, OPTIONS and TRACE) are, by convention, defined as ''safe'', which means they are intended only for information retrieval and should not change the state of the server. In other words, they should not have [[side effect (computer science)|side effects]], beyond relatively harmless effects such as [[Server log|logging]], [[web cache|caching]], the serving of [[web banner|banner advertisements]] or incrementing a [[web counter]]. Making arbitrary GET requests without regard to the context of the application's state should therefore be considered safe. However, this is not mandated by the standard, and it is explicitly acknowledged that it cannot be guaranteed.\n\nBy contrast, methods such as POST, PUT, DELETE and PATCH are intended for actions that may cause side effects either on the server, or external side effects such as [[eCommerce|financial transactions]] or transmission of [[email]]. Such methods are therefore not usually used by conforming [[Internet bot|web robots]] or [[web crawler]]s; some that do not conform tend to make requests without regard to context or consequences.\n\nDespite the prescribed safety of ''GET'' requests, in practice their handling by the server is not technically limited in any way. Therefore, careless or deliberate programming can cause non-trivial changes on the server. This is discouraged, because it can cause problems for [[web caching]], [[search engines]] and other automated agents, which can make unintended changes on the server.\n\n===Idempotent methods and web applications===\nMethods PUT and DELETE are defined to be [[idempotent#Computer science meaning|idempotent]], meaning that multiple identical requests should have the same effect as a single request ({{citation needed span|note that idempotence refers to the state of the system after the request has completed, so while the action the server takes (e.g. deleting a record) or the response code it returns may be different on subsequent requests, the system state will be the same every time|date=October 2016}}). Methods GET, HEAD, OPTIONS and TRACE, being prescribed as safe, should also be idempotent, as HTTP is a [[stateless protocol]].<ref name=\"ietf2616\" />\n\nIn contrast, the POST method is not necessarily idempotent, and therefore sending an identical POST request multiple times may further affect state or cause further side effects (such as [[ecommerce|financial transactions]]). In some cases this may be desirable, but in other cases this could be due to an accident, such as when a user does not realize that their action will result in sending another request, or they did not receive adequate feedback that their first request was successful. While [[web browser]]s may show [[alert dialog box]]es to warn users in some cases where reloading a page may re-submit a POST request, it is generally up to the web application to handle cases where a POST request should not be submitted more than once.\n\nNote that whether a method is idempotent is not enforced by the protocol or web server. It is perfectly possible to write a web application in which (for example) a database insert or other non-idempotent action is triggered by a GET or other request. Ignoring this recommendation, however, may result in undesirable consequences, if a [[user agent]] assumes that repeating the same request is safe when it isn't.\n\n===Security===\nThe TRACE method can be used as part of a class of attacks known as [[cross-site tracing]]; for that reason, common security advice is for it to be disabled in the server configuration.<ref name=\"OWASP-XST\">{{cite web |url=https://www.owasp.org/index.php/Cross_Site_Tracing |title=Cross Site Tracing |publisher=[[OWASP]] |accessdate=2016-06-22 }}</ref> Microsoft [[Internet Information Services|IIS]] supports a proprietary \"TRACK\" method, which behaves similarly, and which is likewise recommended to be disabled.<ref name=\"OWASP-XST\" />\n\n===Summary table===\n{| class=\"wikitable sortable\" style=\"text-align: center; font-size: 85%; width: auto; table-layout: fixed;\"\n|-\n! HTTP Method\n! RFC\n! Request Has Body\n! Response Has Body\n! Safe\n! Idempotent\n! Cacheable\n|-\n| GET\n| RFC 7231\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n|-\n| HEAD\n| RFC 7231\n| {{No}}\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n|-\n| POST\n| RFC 7231\n| {{Yes}}\n| {{Yes}}\n| {{No}}\n| {{No}}\n| {{Yes}}\n|-\n| PUT\n| RFC 7231\n| {{Yes}}\n| {{Yes}}\n| {{No}}\n| {{Yes}}\n| {{No}}\n|-\n| DELETE\n| RFC 7231\n| {{No}}\n| {{Yes}}\n| {{No}}\n| {{Yes}}\n| {{No}}\n|-\n| CONNECT\n| RFC 7231\n| {{Yes}}\n| {{Yes}}\n| {{No}}\n| {{No}}\n| {{No}}\n|-\n| OPTIONS\n| RFC 7231\n| {{Optional}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{No}}\n|-\n| TRACE\n| RFC 7231\n| {{No}}\n| {{Yes}}\n| {{Yes}}\n| {{Yes}}\n| {{No}}\n|-\n| PATCH\n| RFC 5789\n| {{Yes}}\n| {{Yes}}\n| {{No}}\n| {{No}}\n| {{Yes}}\n|}\n\n==Status codes==\n{{See also|List of HTTP status codes}}\nIn HTTP/1.0 and since, the first line of the HTTP response is called the ''status line'' and includes a numeric ''status code'' (such as \"[[HTTP 404|404]]\") and a textual ''reason phrase'' (such as \"Not Found\"). The way the [[user agent]] handles the response primarily depends on the code and secondarily on the other [[HTTP response header field|response header fields]]. Custom status codes can be used since, if the user agent encounters a code it does not recognize, it can use the first digit of the code to determine the general class of the response.<ref>{{cite IETF|rfc=2616|sectionname=Status-Line|section=6.1|page=39|idanchor=ietf}}</ref>\n\nThe standard ''reason phrases'' are only recommendations and can be replaced with \"local equivalents\" at the [[web developer]]'s discretion. If the status code indicated a problem, the user agent might display the ''reason phrase'' to the user to provide further information about the nature of the problem. The standard also allows the user agent to attempt to interpret the ''reason phrase'', though this might be unwise since the standard explicitly specifies that status codes are machine-readable and ''reason phrases'' are human-readable.\nHTTP status code is primarily divided into five groups for better explanation of request and responses between client and server as named:\nInformational 1XX,\nSuccessful 2XX,\nRedirection 3XX,\nClient Error 4XX\nand Server Error 5XX.\n\n==Persistent connections==\n{{Main article|HTTP persistent connection}}\nIn HTTP/0.9 and 1.0, the connection is closed after a single request/response pair. In HTTP/1.1 a keep-alive-mechanism was introduced, where a connection could be reused for more than one request. Such ''persistent connections'' reduce request [[latency (engineering)|latency]] perceptibly, because the client does not need to re-negotiate the TCP 3-Way-Handshake connection after the first request has been sent. Another positive side effect is that in general the connection becomes faster with time due to TCP's [[slow-start]]-mechanism.\n\nVersion 1.1 of the protocol also made bandwidth optimization improvements to HTTP/1.0. For example, HTTP/1.1 introduced [[chunked transfer encoding]] to allow content on persistent connections to be streamed rather than buffered. [[HTTP pipelining]] further reduces lag time, allowing clients to send multiple requests before waiting for each response. Another addition to the protocol was [[byte serving]], where a server transmits just the portion of a resource explicitly requested by a client.\n\n==HTTP session state==\nHTTP is a [[stateless protocol]]. A stateless protocol does not require the [[HTTP server]] to retain information or status about each user for the duration of multiple requests. However, some [[web application]]s implement states or [[Session (computer science)|server side sessions]] using for instance [[HTTP cookie]]s or hidden [[variable (computer science)|variable]]s within [[Form (web)|web form]]s.\n\n==Encrypted connections==\nThe most popular way of establishing an encrypted HTTP connection is [[HTTP Secure]].<ref>{{cite book|last=Canavan|first=John|title=Fundamentals of Networking Security|year=2001|publisher=Artech House|location=Norwood, MA|isbn=9781580531764|pages=82\u201383}}</ref> Two other methods for establishing an encrypted HTTP connection also exist: [[Secure Hypertext Transfer Protocol]], and using the [[HTTP/1.1 Upgrade header]] to specify an upgrade to TLS. Browser support for these two is, however, nearly non-existent.<ref>{{cite web|last1=Zalewski|first1=Michal|title=Browser Security Handbook|url=https://code.google.com/p/browsersec/wiki/Part1#True_URL_schemes|accessdate=30 April 2015}}</ref><ref>{{cite web|title=Chromium Issue 4527: implement RFC 2817: Upgrading to TLS Within HTTP/1.1|url=https://code.google.com/p/chromium/issues/detail?id=4527|accessdate=30 April 2015}}</ref><ref>{{cite web|title=Mozilla Bug 276813 - [RFE] Support RFC 2817 / TLS Upgrade for HTTP 1.1|url=https://bugzilla.mozilla.org/show_bug.cgi?id=276813|accessdate=30 April 2015}}</ref>\n\n== Message Format ==\nThe client and server communicate by sending plain-text ([[ASCII]]) messages.  The client sends '''requests''' to the server and the server sends '''responses'''.\n\n===Request message===\nThe request message consists of the following:\n\n* A request line (e.g., ''GET /images/logo.png HTTP/1.1'', which requests a resource called <tt>/images/logo.png</tt> from the server).\n* [[HTTP request header field|Request header fields]] (e.g., ''Accept-Language: en'').\n* An empty line.\n* An optional [[HTTP message body|message body]].\n\nThe request line and other header fields must each end with <CR><LF> (that is, a [[carriage return]] character followed by a [[line feed]] character). The empty line must consist of only <CR><LF> and no other [[Whitespace (computer science)|whitespace]].<ref name=\"ietf2616sec4\">{{cite IETF|rfc=2616|sectionname=HTTP Message|section=4|page=31|idanchor=ietf}}</ref> In the HTTP/1.1 protocol, all header fields except ''Host'' are optional.\n\nA request line containing only the path name is accepted by servers to maintain compatibility with HTTP clients before the HTTP/1.0 specification in RFC 1945.<ref name=\"apacheweek_com-http11\">{{cite web|title=Apache Week. HTTP/1.1|url=http://www.apacheweek.com/features/http11}} 090502 apacheweek.com</ref>\n\n===Response message===\nThe response message consists of the following:\n\n* A status line which includes the [[List of HTTP status codes|status code]] and reason message (e.g., ''HTTP/1.1 200 OK'', which indicates that the client's request succeeded).\n* [[HTTP response header field|Response header fields]] (e.g., ''Content-Type: text/html'').\n* An empty line.\n* An optional [[HTTP message body|message body]].\n\nThe status line and other header fields must all end with <CR><LF>. The empty line must consist of only <CR><LF> and no other [[Whitespace (computer science)|whitespace]].<ref name=\"ietf2616sec4\" /> This strict requirement for <CR><LF> is relaxed somewhat within message bodies for consistent use of other system linebreaks such as <CR> or <LF> alone.<ref>{{cite IETF|rfc=2616|sectionname=Canonicalization and Text Defaults|section=3.7.1|idanchor=ietf}}</ref>\n\n===Example session===\nBelow is a sample conversation between an HTTP client and an HTTP server running on [[example.com|www.example.com]], port 80.  As mentioned in the previous sections, all the data is sent in a plain-text ([[ASCII]]) encoding, using a [[Newline|two-byte CR LF]] ('\\r\\n') line ending at the end of each line.\n\n====Client request====\n<source lang=\"http\">\nGET /index.html HTTP/1.1\nHost: www.example.com\n</source>\n\nA client request (consisting in this case of the request line and only one header field) is followed by a blank line, so that the request ends with a double newline, each in the form of a [[carriage return]] followed by a [[line feed]]. The \"Host\" field distinguishes between various [[Domain Name System|DNS]] names sharing a single [[IP address]], allowing name-based [[virtual hosting]]. While optional in HTTP/1.0, it is mandatory in HTTP/1.1.\n\n====Server response====\n<source lang=\"http\">\nHTTP/1.1 200 OK\nDate: Mon, 23 May 2005 22:38:34 GMT\nContent-Type: text/html; charset=UTF-8\nContent-Encoding: UTF-8\nContent-Length: 138\nLast-Modified: Wed, 08 Jan 2003 23:11:55 GMT\nServer: Apache/1.3.3.7 (Unix) (Red-Hat/Linux)\nETag: \"3f80f-1b6-3e1cb03b\"\nAccept-Ranges: bytes\nConnection: close\n\n<html>\n<head>\n  <title>An Example Page</title>\n</head>\n<body>\n  Hello World, this is a very simple HTML document.\n</body>\n</html>\n</source>\n\nThe [[HTTP ETag|ETag]] (entity tag) header field is used to determine if a cached version of the requested resource is identical to the current version of the resource on the server. ''Content-Type'' specifies the [[Internet media type]] of the data conveyed by the HTTP message, while ''Content-Length'' indicates its length in bytes. The HTTP/1.1 [[webserver]] publishes its ability to respond to requests for certain byte ranges of the document by setting the field ''Accept-Ranges: bytes''. This is useful, if the client needs to have only certain portions<ref>{{cite IETF\n | draft = draft-ietf-http-range-retrieval-00\n | title = Byte Range Retrieval Extension to HTTP\n | first1 = Ari | last1 = Luotonen | first2 = John | last2 = Franks\n | publisher = [[Internet Engineering Task Force|IETF]]\n | date = February 22, 1996\n}}</ref> of a resource sent by the server, which is called [[byte serving]]. When ''Connection: close'' is sent, it means that the [[web server]] will close the [[Transmission Control Protocol|TCP]] connection immediately after the transfer of this response.\n\nMost of the header lines are optional. When ''Content-Length'' is missing the length is determined in other ways. Chunked transfer encoding uses a chunk size of 0 to mark the end of the content. ''Identity'' encoding without ''Content-Length'' reads content until the socket is closed.\n\nA ''Content-Encoding'' like ''[[gzip]]'' can be used to compress the transmitted data.\n\n==Similar protocols==\nThe [[Gopher (protocol)|Gopher protocol]] was a content delivery protocol that was displaced by HTTP in the early 1990s.\nThe [[SPDY]] protocol is an alternative to HTTP developed at [[Google]], it is superseded by the new HTTP protocol,  [[HTTP/2]].\n\n==See also==<!-- PLEASE RESPECT ALPHABETICAL ORDER -->\n{{HTTP}}\n* [[Basic access authentication]]\n* [[Constrained Application Protocol]] \u2013 A semantically similar protocol to HTTP but used UDP or UDP-like messages targeted for devices with limited processing capability. Re-uses HTTP and other internet concepts like [[Internet media type]] and web linking (<nowiki>RFC 5988</nowiki>)<ref>{{cite IETF\n | rfc = 5988\n | title = Web Linking\n | first1 = Mark | last1 = Nottingham\n | publisher = [[Internet Engineering Task Force|IETF]]\n | year = 2010\n | month = October\n}}</ref>\n* [[Content negotiation]]\n* [[Curl-loader]] \u2013 HTTP/S loading and testing open-source software\n* [[Digest access authentication]]\n* [[Fiddler (software)]]\n* [[HTTP compression]]\n* [[HTTP/2]] \u2013 developed by the IETF's Hypertext Transfer Protocol Bis (httpbis) working group.<ref>{{cite web|url=https://datatracker.ietf.org/wg/httpbis/charter/|title=Hypertext Transfer Protocol Bis (httpbis) \u2013 Charter|publisher=IETF|year=2012}}</ref>\n* HTTP-MPLEX \u2013 A backwards compatible enhancement to HTTP to improve page and web object retrieval time in congested networks proposed by Robert Mattson\n* [[HTTPS]]\n* [[List of file transfer protocols]]\n* [[List of HTTP header fields]]\n* [[List of HTTP status codes]]\n* [[Representational state transfer]] (REST)\n* [[Variant object]]\n* [[Waka (protocol)]] \u2013 An HTTP replacement proposed by [[Roy Fielding]]\n* [[Web cache]]\n* [[WebSocket]]\n* [[Wireshark]]\n\n==Notes==\n{{reflist|colwidth=30em}}\n\n==References==\n* [http://www.w3.org/Protocols/HTTP/AsImplemented.html HTTP 0.9 \u2013 As Implemented in 1991]\n\n==External links==\n{{Commons category|HTTP}}\n* {{cite web|url=http://www.w3.org/Protocols/History.html |title=Change History for HTTP |publisher=W3.org |date= |accessdate=2010-08-01}} A detailed technical history of HTTP.\n* {{cite web|url=http://www.w3.org/Protocols/DesignIssues.html |title=Design Issues for HTTP |publisher=W3.org |date= |accessdate=2010-08-01}} Design Issues by Berners-Lee when he was designing the protocol.\n* {{cite web|url=http://www.w3.org/Protocols/Classic.html |title=Classic HTTP Documents |publisher=W3.org |date=1998-05-14 |accessdate=2010-08-01}} list of other classic documents recounting the early protocol history\n{{Semantic Web}}\n{{URI scheme}}\n\n{{Authority control}}\n\n[[Category:Hypertext Transfer Protocol| ]]\n[[Category:Application layer protocols]]\n[[Category:Internet protocols]]\n[[Category:Network protocols]]\n[[Category:World Wide Web]]\n[[Category:World Wide Web Consortium standards]]"}]}}}}