{"batchcomplete":"","query":{"normalized":[{"from":"Internet_protocol_suite","to":"Internet protocol suite"}],"pages":{"15476":{"pageid":15476,"ns":0,"title":"Internet protocol suite","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{About|the protocols that make up the Internet architecture|the IP network protocol only|Internet protocol}}\n{{IPstack}}\nThe '''Internet protocol suite''' is the [[conceptual model]] and set of [[communications protocol]]s used on the [[Internet]] and similar [[computer network]]s. It is commonly known as '''TCP/IP''' because the original protocols in the suite were the [[Transmission Control Protocol]] (TCP) and the [[Internet Protocol]] (IP). It is occasionally known as the '''Department of Defense (DoD) model''', because the development of the networking model was funded by [[DARPA]], an agency of the [[United States Department of Defense]].\n\nThe Internet protocol suite provides [[End-to-end principle|end-to-end data communication]] specifying how data should be packetized, addressed, transmitted, [[routing|routed]] and received. This functionality is organized into four [[abstraction layer]]s which are used to sort all related protocols according to the scope of networking involved.<ref>RFC 1122, ''Requirements for Internet Hosts \u2013 Communication Layers'', R. Braden (ed.), October 1989.</ref><ref>RFC 1123, ''Requirements for Internet Hosts \u2013 Application and Support'', R. Braden (ed.), October 1989</ref> From lowest to highest, the layers are the [[link layer]], containing communication methods for data that remains within a single network segment (link); the [[internet layer]], connecting independent networks, thus providing [[internetworking]]; the [[transport layer]] handling host-to-host communication; and the [[application layer]], which provides process-to-process data exchange for applications.\n\n[[Technical standard]]s specifying the Internet protocol suite and many of its constituent protocols are maintained by the [[Internet Engineering Task Force]] (IETF). The Internet protocol suite model is a simpler model developed prior to the [[OSI model]]. \n\n==History==\n\n===Early research===\n[[File:SRI First Internetworked Connection diagram.jpg|thumb|right|Diagram of the first internetworked connection]]\n[[File:SRI Packet Radio Van.jpg|thumb|right|A [[SRI International|Stanford Research Institute]] [[Packet Radio Van]], used for the first three-way [[Internetworking|internetworked]] transmission.]]\nThe Internet protocol suite resulted from research and development conducted by the Defense Advanced Research Projects Agency ([[DARPA]]) in the late 1960s.<ref>[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.7505&rep=rep1&type=pdf \"The DoD Internet Architecture Model\"], Vinton G. Cerf and Edward Cain, ''Computer Networks'', 7 (1983), North-Holland, pp. 307-318</ref> After initiating the pioneering [[ARPANET]] in 1969, DARPA started work on a number of other data transmission technologies. In 1972, [[Robert E. Kahn]] joined the DARPA [[Information Processing Technology Office]], where he worked on both satellite packet networks and ground-based radio packet networks, and recognized the value of being able to communicate across both. In the spring of 1973, [[Vinton Cerf]], the developer of the existing ARPANET [[Network Control Program]] (NCP) protocol, joined Kahn to work on open-architecture interconnection models with the goal of designing the next protocol generation for the ARPANET.\n\nBy the summer of 1973, Kahn and Cerf had worked out a fundamental reformulation, in which the differences between network protocols were hidden by using a common [[internetwork protocol]], and, instead of the network being responsible for reliability, as in the ARPANET, this function was delegated to the hosts. Cerf credits [[Hubert Zimmermann]] and [[Louis Pouzin]], designer of the [[CYCLADES]] network, with important influences on this design. The protocol was implemented as the ''Transmission Control Program'' (TCP), first published in 1974.<ref>[https://www.cs.princeton.edu/courses/archive/fall06/cos561/papers/cerf74.pdf], Vinton G. Cerf and Robert E. Kahn, ''A Protocol for Packet Network Intercommunication'', 5 (1974)</ref>\n\nInitially, the TCP managed both [[datagram]] transmissions and routing, but as the protocol grew, other researchers recommended a division of functionality into protocol layers.  Advocates included [[Jonathan Postel]] of the University of Southern California's [[Information Sciences Institute]], who edited the Request for Comments (RFCs), the technical and strategic series that both documented and catalyzed Internet development.<ref>Internet Hall of Fame</ref> Postel stated, \u201c''we are screwing up in our design of Internet protocols by violating the principle of layering''\u201d.<ref>[https://www.rfc-editor.org/ien/ien2.txt], Jon Postel, ''Comments on Internet Protocol and TCP'', (1977), Section 3.3.3.2</ref>  Encapsulation of different mechanisms was intended to create an environment where the upper layers could access only what was needed from the lower layers. A monolithic design would be inflexible and lead to scalability issues. The Transmission Control Program was split into two distinct protocols, the Transmission Control Protocol and the Internet Protocol. The new suite replaced all protocols used previously.,<ref>[http://delivery.acm.org/10.1145/1480000/1478502/p281-abramson.pdf?ip=128.97.245.227&id=1478502&acc=ACTIVE%20SERVICE&key=CA367851C7E3CE77%2E79535EF926D6BC05%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35&CFID=629051973&CFTOKEN=44130697&__acm__=1465663088_c4f902161cc11de56b66495b29fc6bb1], Norman Abramson, ''The Aloha System - Another alternative for computer communications'', (1970)</ref> PRnet,<ref>[http://delivery.acm.org/10.1145/370000/360253/p395-metcalfe.pdf?ip=128.97.245.227&id=360253&acc=ACTIVE%20SERVICE&key=CA367851C7E3CE77%2E79535EF926D6BC05%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35&CFID=629051973&CFTOKEN=44130697&__acm__=1465663289_329f0c668c78e6397f895ad9fb4564ac], Robert M. Metcalfe and David R. Boggs, ''Ethernet: Distributed Packet Switching or Local Computer Networks'', (1976)</ref> and SATnet<ref>Vinton Robert E. Kahn, ''The Introduction of Packet Satellite Communications'', (1979)</ref><ref>MIT Press Cambridge ''Inventing the Internet'', J. Abbate (2000)</ref>\n\nThe design of the network included the recognition that it should provide only the functions of efficiently transmitting and routing traffic between end nodes and that all other intelligence should be located at the edge of the network, in the end nodes. This design is known as the [[end-to-end principle]]. Using this design, it became possible to connect almost any network to the ARPANET, irrespective of the local characteristics, thereby solving Kahn's initial problem. One popular expression is that TCP/IP, the eventual product of Cerf and Kahn's work, will run over \"''two tin cans and a string.''\" (Years later, as a joke, the [[IP over Avian Carriers]] formal protocol specification was created and successfully tested.)\n\nA computer called a [[Router (computing)|router]] is provided with an interface to each network. It forwards [[packet (information technology)|packets]] back and forth between them.<ref>RFC 1812, ''Requirements for IP Version 4 Routers'', F. Baker (June 1995)</ref> Originally a router was called ''gateway'', but the term was changed to avoid confusion with other types of [[Gateway (computer networking)|gateways]].\n\n===Specification===\nFrom 1973 to 1974, Cerf's networking research group at Stanford worked out details of the idea, resulting in the first TCP specification.<ref>RFC 675, ''Specification of Internet Transmission Control Protocol'', V. Cerf et al. (December 1974)</ref> A significant technical influence was the early networking work at [[Xerox PARC]], which produced the [[PARC Universal Packet]] protocol suite, much of which existed around that time.\n\nDARPA then contracted with [[BBN Technologies]], [[Stanford University]], and the [[University College London]] to develop operational versions of the protocol on different hardware platforms. Four versions were developed: TCP v1, TCP v2, TCP v3 and IP v3, and TCP/IP v4. The last protocol is still in use today.\n\nIn 1975, a two-network TCP/IP communications test was performed between Stanford and University College London (UCL). In November, 1977, a three-network TCP/IP test was conducted between sites in the US, the UK, and Norway. Several other TCP/IP prototypes were developed at multiple research centers between 1978 and 1983. The migration of the ARPANET to TCP/IP was officially completed on [[Flag day (software)|flag day]] January 1, 1983, when the new protocols were permanently activated.<ref>{{cite web|url=http://www.livinginternet.com/i/ii.htm|title=Internet History, Who invented the Internet, When was the Internet invented|publisher=|accessdate=12 September 2016}}</ref>\n\n===Adoption===\nIn March 1982, the US Department of Defense declared TCP/IP as the standard for all military computer networking.<ref>{{cite web | url = http://www.columbia.edu/~rh120/other/tcpdigest_paper.txt | title = From the ARPANET to the Internet | author = Ronda Hauben | publisher = TCP Digest (UUCP) | accessdate = 2007-07-05}}</ref> In 1985, the Internet Advisory Board (later renamed the [[Internet Architecture Board]]) held a three-day workshop on TCP/IP for the computer industry, attended by 250 vendor representatives, promoting the protocol and leading to its increasing commercial use.\n\nIn 1985, the first [[Interop]] conference focused on network interoperability by broader adoption of TCP/IP. The conference was founded by Dan Lynch, an early Internet activist. From the beginning, large corporations, such as IBM and DEC, attended the meeting. Interoperability conferences have been held every year since then. Every year from 1985 through 1993, the number of attendees tripled.{{citation needed|date=January 2012}}\n\nIBM, AT&T and DEC were the first major corporations to adopt TCP/IP, despite having competing internal protocols ([[IBM Systems Network Architecture|SNA]], [[Xerox Network Systems|XNS]], [[DECNET]]). In IBM, from 1984, [[Barry Appelman]]'s group did TCP/IP development. (Appelman later moved to [[AOL]] to be the head of all its development efforts.) They navigated the corporate politics to get a stream of TCP/IP products for various IBM systems, including [[MVS]], [[VM (operating system)|VM]], and [[OS/2]]. At the same time, several smaller companies began offering TCP/IP stacks for [[DOS]] and [[MS Windows]], such as the company [[FTP Software]], and the [[Wollongong Group]].<ref>[http://support.microsoft.com/kb/108007 Wollongong]</ref> The first VM/CMS TCP/IP stack came from the University of Wisconsin.<ref>{{cite web|url=http://www.weblab.isti.cnr.it/education/ssfs/lezioni/slides/archives/cern.htm|title=A Short History of Internet Protocols at CERN|publisher=|accessdate=12 September 2016}}</ref>\n\nSome of these TCP/IP stacks were written single-handedly by a few programmers. Jay Elinsky and [[Oleg Vishnepolsky]] of IBM Research wrote TCP/IP stacks for VM/CMS and OS/2, respectively.<ref>[[Barry Appelman]]</ref>  In 1984 Donald Gillies at MIT wrote a 'ntcp' multi-connection TCP which ran atop the IP/PacketDriver layer maintained by John Romkey at MIT in 1983-4.  Romkey leveraged this TCP in 1986 when FTP Software was founded.<ref>{{cite web|title=Desktop TCP/IP at middle age|last1= Baker |first1= Steven |last2= Gillies |first2= Donald W|url= http://www.ece.ubc.ca/~gillies/9802net.html}}</ref><ref>{{cite web|url=http://www.romkey.com/about/|title=About|last=Romkey|first=John|date=17 February 2011|publisher=|accessdate=12 September 2016}}</ref> Phil Karn created KA9Q TCP (a multi-connection TCP for ham radio applications) starting in 1985.<ref>{{cite web|title=KA9Q TCP Download Website |first1= Phil |last1=Karn }}</ref>\n\nThe spread of TCP/IP was fueled further in June 1989, when AT&T agreed to place the TCP/IP code developed for [[UNIX]] into the public domain. Various vendors, including IBM, included this code in their own TCP/IP stacks. Many companies sold TCP/IP stacks for Windows until Microsoft released a native TCP/IP stack in Windows 95. This event was a little late in the evolution of the Internet, but it cemented TCP/IP's dominance over other protocols, which began to lose ground. These protocols included [[IBM Systems Network Architecture]] (SNA), [[Digital Equipment Corporation]]'s [[DECnet]], [[Open Systems Interconnection]] (OSI), and [[Xerox Network Systems]] (XNS).\n\n==Key architectural principles==\nAn early architectural document, RFC 1122, emphasizes architectural principles over layering.<ref>RFC 1958, ''Architectural Principles of the Internet'', B. Carpenter (June 1996)</ref>\n* [[End-to-end principle]]: This principle has evolved over time. Its original expression put the maintenance of state and overall intelligence at the edges, and assumed the Internet that connected the edges retained no state and concentrated on speed and simplicity. Real-world needs for firewalls, network address translators, web content caches and the like have forced changes in this principle.<ref>[http://www.csd.uoc.gr/~hy558/papers/Rethinking_2001.pdf Rethinking the design of the Internet: The end-to-end arguments vs. the brave new world], Marjory S. Blumenthal, David D. Clark, August 2001</ref>\n* [[Robustness Principle]]: \"In general, an implementation must be conservative in its sending behavior, and liberal in its receiving behavior. That is, it must be careful to send well-formed datagrams, but must accept any datagram that it can interpret (e.g., not object to technical errors where the meaning is still clear).\"<ref>[http://www.ietf.org/rfc/rfc0791.txt?number=791 p.23 INTERNET PROTOCOL DARPA INTERNET PROGRAM PROTOCOL SPECIFICATION September 1981 Jon Postel Editor]</ref> \"The second part of the principle is almost as important: software on other hosts may contain deficiencies that make it unwise to exploit legal but obscure protocol features.\"<ref>[http://tools.ietf.org/html/rfc1122#page-12 Requirements for Internet Hosts -- Communication Layers p.13 October 1989 R. Braden, Editor]</ref> (Postel famously summarized the principle as, \"Be conservative in what you do, be liberal in what you accept from others\" -- a saying that came to known as \"[[Robustness principle|Postel's Law]].\")\n\n==Abstraction layers==\n{| style=\"float:right;\"\n|-\n| [[Image:IP stack connections.svg|thumb|350px|Two Internet hosts connected via two routers and the corresponding layers used at each hop. The application on each host executes read and write operations as if the processes were directly connected to each other by some kind of data pipe. Every other detail of the communication is hidden from each process. The underlying mechanisms that transmit data between the host computers are located in the lower protocol layers.]]\n|-\n| [[Image:UDP encapsulation.svg|thumb|350px|Encapsulation of application data descending through the layers described in RFC 1122]]\n|}\n\n[[encapsulation (networking)|Encapsulation]] is used to provide abstraction of protocols and services. Encapsulation is usually aligned with the division of the protocol suite into layers of general functionality. In general, an application (the highest level of the model) uses a set of protocols to send its data down the layers, being further encapsulated at each level.\n\nThe layers of the protocol suite near the top are logically closer to the user application, while those near the bottom are logically closer to the physical transmission of the data. Viewing layers as providing or consuming a service is a method of [[abstraction (computer science)|abstraction]] to isolate upper layer protocols from the details of transmitting bits over, for example, [[Ethernet]] and [[Carrier sense multiple access with collision detection|collision detection]], while the lower layers avoid having to know the details of each and every application and its protocol.\n\nEven when the layers are examined, the assorted architectural documents\u2014there is no single architectural model such as ISO 7498, the [[OSI model|Open Systems Interconnection (OSI) model]]\u2014have fewer and less rigidly defined layers than the OSI model, and thus provide an easier fit for real-world protocols. One frequently referenced document, RFC 1958, does not contain a stack of layers. The lack of emphasis on layering is a major difference between the IETF and OSI approaches. It only refers to the existence of the internetworking layer and generally to ''upper layers''; this document was intended as a 1996 snapshot of the architecture: \"The Internet and its architecture have grown in evolutionary fashion from modest beginnings, rather than from a Grand Plan. While this process of evolution is one of the main reasons for the technology's success, it nevertheless seems useful to record a snapshot of the current principles of the Internet architecture.\"\n\nRFC 1122, entitled ''Host Requirements'', is structured in paragraphs referring to layers, but the document refers to many other architectural principles not emphasizing layering. It loosely defines a four-layer model, with the layers having names, not numbers, as follows:\n*The application layer is the scope within which applications create user data and communicate this data to other applications on another or the same host. The applications, or processes, make use of the services provided by the underlying, lower layers, especially the Transport Layer which provides reliable or unreliable ''pipes'' to other processes. The communications partners are characterized by the application architecture, such as the [[client-server model]] and [[peer-to-peer]] networking. This is the layer in which all ''higher level'' protocols, such as [[Simple Mail Transfer Protocol|SMTP]], [[File Transfer Protocol|FTP]], [[Secure Shell|SSH]], [[HyperText Transfer Protocol|HTTP]], operate. Processes are addressed via ports which essentially represent services.\n*The transport layer performs host-to-host communications on either the same or different hosts and on either the local network or remote networks separated by routers. It provides a channel for the communication needs of applications. UDP is the basic transport layer protocol, providing an unreliable datagram service. The Transmission Control Protocol provides flow-control, connection establishment, and reliable transmission of data.\n*The internet layer has the task of exchanging datagrams across network boundaries. It provides a uniform networking interface that hides the actual topology (layout) of the underlying network connections.  It is therefore also referred to as the layer that establishes internetworking, indeed, it defines and establishes the Internet. This layer defines the addressing and routing structures used for the TCP/IP protocol suite. The primary protocol in this scope is the Internet Protocol, which defines [[IP address]]es. Its function in routing is to transport datagrams to the next IP router that has the connectivity to a network closer to the final data destination.\n*The link layer defines the networking methods within the scope of the local network link on which hosts communicate without intervening routers. This layer includes the protocols used to describe the local network topology and the interfaces needed to effect transmission of Internet layer datagrams to next-neighbor hosts.\n\nThe Internet protocol suite and the layered [[protocol stack]] design were in use before the OSI model was established. Since then, the TCP/IP model has been compared with the OSI model in books and classrooms, which often results in confusion because the two models use different assumptions and goals, including the relative importance of strict layering.\n\nThis abstraction also allows upper layers to provide services that the lower layers do not provide.  While the original OSI model was extended to include connectionless services (OSIRM CL),<ref>[ OSI: Reference Model Addendum 1: Connectionless-mode Transmission,ISO7498/AD1],ISO7498/AD1, May 1986</ref>  IP is not designed to be reliable and is a [[best effort delivery]] protocol. This means that all transport layer implementations must choose whether or how to provide reliability. UDP provides data integrity via a [[checksum]] but does not guarantee delivery; TCP provides both data integrity and delivery guarantee by retransmitting until the receiver acknowledges the reception of the packet.\n\nThis model lacks the formalism of the OSI model and associated documents, but the IETF does not use a formal model and does not consider this a limitation, as illustrated in the comment by [[David D. Clark]], \"We reject: kings, presidents and voting. We believe in: rough consensus and running code.\" Criticisms of this model, which have been made with respect to the OSI model, often do not consider ISO's later extensions to that model.\n\nFor multi-access links with their own addressing systems (e.g. Ethernet) an address mapping protocol is needed. Such protocols can be considered to be below IP but above the existing link system. While the IETF does not use the terminology, this is a subnetwork dependent convergence facility according to an extension to the OSI model, the internal organization of the network layer (IONL).<ref>[http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=16011 \"Information processing systems -- Open Systems Interconnection -- Internal organization of the Network Layer\"], ISO 8648:1988.</ref>\n\nICMP & IGMP operate on top of IP but do not transport data like UDP or TCP. Again, this functionality exists as layer management extensions to the OSI model, in its ''Management Framework'' (OSIRM MF)<ref>[http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=14258 \"Information processing systems -- Open Systems Interconnection -- Basic Reference Model -- Part 4: Management framework\"], ISO 7498-4:1989.</ref>\n\nThe SSL/TLS library operates above the transport layer (uses TCP) but below application protocols. Again, there was no intention, on the part of the designers of these protocols, to comply with OSI architecture.\n\nThe link is treated as a black box. The IETF explicitly does not intend to discuss transmission systems, which is a less academic{{citation needed|date=May 2013}} but practical alternative to the OSI model.\n\nThe following is a description of each layer in the TCP/IP networking model starting from the lowest level.\n\n===Link layer===\nThe [[link layer]] has  the networking scope of the local network connection to which a host is attached. This regime is called the ''link'' in TCP/IP literature. It is the lowest component layer of the Internet protocols, as TCP/IP is designed to be hardware independent. As a result, TCP/IP may be implemented on top of virtually any hardware networking technology.\n\nThe link layer is used to move packets between the Internet layer interfaces of two different hosts on the same link. The processes of transmitting and receiving packets on a given link can be controlled both in the [[software]] [[device driver]] for the [[network card]], as well as on [[firmware]] or specialized [[chipsets]]. These perform [[Data link layer|data link]] functions such as adding a [[packet header]] to prepare it for transmission, then actually transmit the frame over a [[Physical layer|physical]] [[transmission medium|medium]]. The TCP/IP model includes specifications of translating the network addressing methods used in the Internet Protocol to data link addressing, such as [[Media Access Control]] (MAC). All other aspects below that level, however, are implicitly assumed to exist in the link layer, but are not explicitly defined.\n\nThis is also the layer where packets may be selected to be sent over a [[virtual private network]] or other [[tunneling protocol|networking tunnel]]. In this scenario, the link layer data may be considered application data which traverses another instantiation of the IP stack for transmission or reception over another IP connection. Such a connection, or virtual link, may be established with a transport protocol or even an application scope protocol that serves as a [[tunneling protocol|tunnel]] in the link layer of the protocol stack. Thus, the TCP/IP model does not dictate a strict hierarchical encapsulation sequence.\n\nThe TCP/IP model's link layer corresponds to the Open Systems Interconnection (OSI) model physical and data link layers, layers one and two of the OSI model.\n\n===Internet layer===\nThe [[internet layer]] has the responsibility of sending packets across potentially multiple networks. [[Internetworking]] requires sending data from the source network to the destination network. This process is called [[routing]].<!--Now a nasty spam link. no archive available. <ref>http://www.comsci.us/datacom/ippacket.html</ref>-->\n\nThe Internet Protocol performs two basic functions:\n*Host addressing and identification: This is accomplished with a hierarchical [[IP address]]ing system.\n*Packet routing: This is the basic task of sending packets of data (datagrams) from source to destination by forwarding them to the next network router closer to the final destination.\n\nThe internet layer is not only agnostic of data structures at the transport layer, but it also does not distinguish between operation of the various transport layer protocols. IP carries data for a variety of different [[upper layer protocol]]s. These protocols are each identified by a unique [[List of IP protocol numbers|protocol number]]: for example, [[Internet Control Message Protocol]] (ICMP) and [[Internet Group Management Protocol]] (IGMP) are protocols 1 and 2, respectively.\n\nSome of the protocols carried by IP, such as ICMP which is used to transmit diagnostic information, and IGMP which is used to manage [[IP Multicast]] data, are layered on top of IP but perform internetworking functions. This illustrates the differences in the architecture of the TCP/IP stack of the Internet and the OSI model. The TCP/IP model's internet layer corresponds to layer three of the Open Systems Interconnection (OSI) model, where it is referred to as the network layer.\n\nThe internet layer provides an unreliable datagram transmission facility between hosts located on potentially different IP networks by forwarding the transport layer datagrams to an appropriate next-hop router for further relaying to its destination. With this functionality, the internet layer makes possible internetworking, the interworking of different IP networks, and it essentially establishes the Internet. The Internet Protocol is the principal component of the internet layer, and it defines two addressing systems to identify network hosts' computers, and to locate them on the network. The original address system of the [[ARPANET]] and its successor, the Internet, is [[IPv4|Internet Protocol version 4]] (IPv4). It uses a 32-bit [[IP address]] and is therefore capable of identifying approximately four billion hosts. This limitation was eliminated in 1998 by the standardization of [[IPv6|Internet Protocol version 6]] (IPv6) which uses 128-bit addresses. IPv6 production implementations emerged in approximately 2006.\n\n===Transport layer===\nThe transport layer establishes basic data channels that applications use for task-specific data exchange. The layer establishes process-to-process connectivity, meaning it provides end-to-end services that are independent of the structure of user data and the logistics of exchanging information for any particular specific purpose. Its responsibility includes end-to-end message transfer independent of the underlying network, along with error control, segmentation, flow control, congestion control, and application addressing (port numbers). End-to-end message transmission or connecting applications at the transport layer can be categorized as either [[connection-oriented]], implemented in TCP, or [[connectionless]], implemented in UDP.\n\nFor the purpose of providing process-specific transmission channels for applications, the layer establishes the concept of the [[TCP and UDP port|port]]. This is a numbered logical construct allocated specifically for each of the communication channels an application needs. For many types of services, these [[port number]]s have been standardized so that client computers may address specific services of a server computer without the involvement of service announcements or directory services.\n\nBecause IP provides only a [[best effort delivery]], some transport layer protocols offer reliability. However, IP can run over a reliable data link protocol such as the [[High-Level Data Link Control]] (HDLC).\n\nFor example, the TCP is a connection-oriented protocol that addresses numerous reliability issues in providing a [[reliable byte stream]]:\n* data arrives in-order\n* data has minimal error (i.e., correctness)\n* duplicate data is discarded\n* lost or discarded packets are resent\n* includes traffic congestion control\n\nThe newer [[Stream Control Transmission Protocol]] (SCTP) is also a reliable, connection-oriented transport mechanism. It is message-stream-oriented\u2014not byte-stream-oriented like TCP\u2014and provides multiple streams multiplexed over a single connection. It also provides [[multi-homed|multi-homing]] support, in which a connection end can be represented by multiple IP addresses (representing multiple physical interfaces), such that if one fails, the connection is not interrupted. It was developed initially for telephony applications (to transport [[Signaling System 7|SS7]] over IP), but can also be used for other applications.\n\nThe User Datagram Protocol is a connectionless [[datagram]] protocol. Like IP, it is a best effort, \"unreliable\" protocol. Reliability is addressed through [[error detection]] using a weak checksum algorithm. UDP is typically used for applications such as streaming media (audio, video, [[Voice over IP]] etc.) where on-time arrival is more important than reliability, or for simple query/response applications like [[Domain Name System|DNS]] lookups, where the overhead of setting up a reliable connection is disproportionately large. [[Real-time Transport Protocol]] (RTP) is a datagram protocol that is designed for real-time data such as [[streaming media|streaming audio and video]].\n\nThe applications at any given network address are distinguished by their TCP or UDP port. By convention certain ''well known ports'' are associated with specific applications.\n\nThe TCP/IP model's transport or host-to-host layer corresponds to the fourth layer in the Open Systems Interconnection (OSI) model, also called the transport layer.\n\n===Application layer===\nThe [[application layer]] includes the protocols used by most applications for providing user services or exchanging application data over the network connections established by the lower level protocols, but this may include some basic network support services, such as many routing protocols, and host configuration protocols. Examples of application layer protocols include the [[Hypertext Transfer Protocol]] (HTTP), the [[File Transfer Protocol]] (FTP), the [[Simple Mail Transfer Protocol]] (SMTP), and the [[Dynamic Host Configuration Protocol]] (DHCP).<ref>[http://www.kohala.com/start/tcpipiv1.html ''TCP/IP Illustrated: the protocols''], ISBN 0-201-63346-9, W. Richard Stevens, February 1994</ref> Data coded according to application layer protocols are  [[encapsulation (networking)|encapsulated]] into transport layer protocol units (such as TCP or UDP messages), which in turn use [[lower layer protocol]]s to effect actual data transfer.\n\nThe TCP/IP model does not consider the specifics of formatting and presenting data, and does not define additional layers between the application and transport layers as in the OSI model (presentation and session layers). Such functions are the realm of [[Library (computing)|libraries]] and [[application programming interface]]s.\n\nApplication layer protocols generally treat the transport layer (and lower) protocols as [[black box]]es which provide a stable network connection across which to communicate, although the applications are usually aware of key qualities of the transport layer connection such as the end point IP addresses and port numbers. Application layer protocols are often associated with particular [[client\u2013server]] applications, and common services have ''well-known'' port numbers reserved by the [[Internet Assigned Numbers Authority]] (IANA). For example, the [[HyperText Transfer Protocol]] uses server port 80 and [[Telnet]] uses server port 23. [[client (computing)|Clients]] connecting to a service usually use [[ephemeral port]]s, i.e., port numbers assigned only for the duration of the transaction at random or from a specific range configured in the application.\n\nThe transport layer and lower-level layers are unconcerned with the specifics of application layer protocols. Routers and [[network switch|switches]] do not typically examine the encapsulated traffic, rather they just provide a conduit for it. However, some [[Firewall (computing)|firewall]] and [[bandwidth throttling]] applications must interpret application data. An example is the [[Resource Reservation Protocol]] (RSVP). It is also sometimes necessary for [[network address translator]] (NAT) traversal to consider the application payload.\n\nThe application layer in the TCP/IP model is often compared as equivalent to a combination of the fifth (Session), sixth (Presentation), and the seventh (Application) layers of the Open Systems Interconnection (OSI) model.\n\nFurthermore, the TCP/IP reference model distinguishes between ''user protocols'' and ''support protocols''.<ref>[https://tools.ietf.org/html/rfc1122#page-9 RFC 1122], ''Requirements for Internet Hosts -- Communication Layers'', 1.1.3  ''Internet Protocol Suite'', 1989</ref> Support protocols provide services to a system. User protocols are used for actual user applications. For example, FTP is a user protocol and DNS is a support protocol.\n\n==Layer names and number of layers in the literature==\nThe following table shows various networking models. The number of layers varies between three and seven.\n\n{| class=\"wikitable\"\n|-\n! style=\"background:#adb\" | RFC 1122, Internet STD 3 (1989)\n! style=\"background:#adb\" | Cisco Academy<ref>{{cite web|url=https://books.google.com/books?id=JVAk7r6jHF4C|title=Network Fundamentals, CCNA Exploration Companion Guide|first1=Mark|last1=Dye|first2=Rick|last2=McDonald|first3=Antoon|last3=Rufi|date=29 October 2007|publisher=Cisco Press|isbn=9780132877435|accessdate=12 September 2016|via=Google Books}}</ref>\n! style=\"background:#adb\" | Kurose,<ref>[http://www.pearsonhighered.com/educator/academic/product/0,,0321497708,00%2ben-USS_01DBC.html James F. Kurose, Keith W. Ross, Computer Networking: A Top-Down Approach, 2008, ISBN 0-321-49770-8]</ref> Forouzan <ref name=Forouzan>{{cite web|url=https://books.google.com/books?id=U3Gcf65Pu9IC|title=Data Communications and Networking|first1=Behrouz A.|last1=Forouzan|first2=Sophia Chung|last2=Fegan|date=1 August 2003|publisher=McGraw-Hill Higher Education|isbn=9780072923544|accessdate=12 September 2016|via=Google Books}}</ref>\n! style=\"background:#adb\" | Comer,<ref name=Comer>{{cite web|url=https://books.google.com/books?id=jonyuTASbWAC|title=Internetworking with TCP/IP: Principles, protocols, and architecture|first=Douglas|last=Comer|date=1 January 2006|publisher=Prentice Hall|isbn=0-13-187671-6|accessdate=12 September 2016|via=Google Books}}</ref> Kozierok<ref>{{cite web|url=https://books.google.com/books?id=Pm4RgYV2w4YC|title=The TCP/IP Guide: A Comprehensive, Illustrated Internet Protocols Reference|first=Charles M.|last=Kozierok|date=1 January 2005|publisher=No Starch Press|isbn=9781593270476|accessdate=12 September 2016|via=Google Books}}</ref>\n! style=\"background:#adb\" | Stallings<ref name=Stallings>{{cite web|url=https://books.google.com/books?id=c_AWmhkovR0C|title=Data and Computer Communications|first=William|last=Stallings|date=1 January 2007|publisher=Prentice Hall|isbn=0-13-243310-9|accessdate=12 September 2016|via=Google Books}}</ref>\n! style=\"background:#adb\" | Tanenbaum<ref>{{cite web|url=https://books.google.com/books?id=Pd-z64SJRBAC&pg=PA42&vq=internet%20layer&dq=networks&hl=sv&source=gbs_search_s&sig=ACfU3U3DHANeIz0sOsd5NK4VXSrgNFYVAw#PPA42,M1|title=Computer Networks|first=Andrew S.|last=Tanenbaum|date=1 January 2003|publisher=Prentice Hall PTR|isbn=0-13-066102-3|accessdate=12 September 2016|via=Google Books}}</ref>\n! style=\"background:#adb\" | [[Michael A. Padlipsky|Mike Padlipsky]]'s 1982 \"Arpanet Reference Model\" (RFC 871)\n! style=\"background:#adb\" | [[OSI model]]\n|-\n| style=\"background:#cfc\" | ''Four layers''\n| style=\"background:#cfc\" | ''Four layers''\n| style=\"background:#cfc\" | ''Five layers''\n| style=\"background:#cfc\" | ''Four+one layers''\n| style=\"background:#cfc\" | ''Five layers''\n| style=\"background:#cfc\" | ''Five layers''\n| style=\"background:#cfc\" | ''Three layers''\n| style=\"background:#cfc\" | ''Seven layers''\n|-\n| style=\"background:#cfc\" | \"Internet model\"\n| style=\"background:#cfc\" | \"Internet model\"\n| style=\"background:#cfc\" | \"Five-layer Internet model\" or \"TCP/IP protocol suite\"\n| style=\"background:#cfc\" | \"TCP/IP 5-layer reference model\"\n| style=\"background:#cfc\" | \"TCP/IP model\"\n| style=\"background:#cfc\" | \"TCP/IP 5-layer reference model\"\n| style=\"background:#cfc\" | \"Arpanet reference model\"\n| style=\"background:#cfc\" | OSI model\n|-\n| rowspan=\"3\"| Application\n| rowspan=\"3\"| Application\n| rowspan=\"3\"| Application\n| rowspan=\"3\"| Application\n| rowspan=\"3\"| Application\n| rowspan=\"3\"| Application\n| rowspan=\"3\"| Application/Process\n| Application\n|-\n| Presentation\n|-\n| Session\n|-\n| Transport\n| Transport\n| Transport\n| Transport\n| Host-to-host or transport\n| Transport\n| rowspan=\"2\"| Host-to-host\n| Transport\n|-\n| Internet\n| Internetwork\n| Network\n| Internet\n| Internet\n| Internet\n| Network\n|-\n|| Link\n|| Network interface\n| Data link\n| Data link (Network interface)\n| Network access\n|| Data link\n|| Network interface\n| Data link\n|-\n| '''\n|\n| Physical\n| (Hardware)\n| Physical\n| Physical\n|\n| Physical\n|}\n\nSome of the networking models are from textbooks, which are secondary sources that may conflict with the intent of RFC 1122 and other [[IETF]] primary sources.<ref name=R3439 />\n\n==Comparison of TCP/IP and OSI layering==\nThe three top layers in the OSI model, i.e. the application layer, the presentation layer and the session layer, are not distinguished separately in the TCP/IP model which only has an application layer above the transport layer. While some pure OSI protocol applications, such as [[X.400]], also combined them, there is no requirement that a TCP/IP protocol stack must impose monolithic architecture above the transport layer. For example, the NFS application protocol runs over the [[External Data Representation|eXternal Data Representation]] (XDR) presentation protocol, which, in turn, runs over a protocol called [[Remote Procedure Call]] (RPC). RPC provides reliable record transmission, so it can safely use the best-effort UDP transport.\n\nDifferent authors have interpreted the TCP/IP model differently, and disagree whether the link layer, or the entire TCP/IP model, covers OSI layer 1 ([[physical layer]]) issues, or whether a hardware layer is assumed below the link layer.\n\nSeveral authors have attempted to incorporate the OSI model's layers 1 and 2 into the TCP/IP model, since these are commonly referred to in modern standards (for example, by [[IEEE]] and [[ITU]]). This often results in a model with five layers, where the link layer or network access layer is split into the OSI model's layers 1 and 2.\n\nThe IETF protocol development effort is not concerned with strict layering. Some of its protocols may not fit cleanly into the OSI model, although RFCs sometimes refer to it and often use the old OSI layer numbers. The IETF has repeatedly stated{{citation needed|date=April 2009}} that Internet protocol and architecture development is not intended to be OSI-compliant. RFC 3439, addressing Internet architecture, contains a section entitled: \"Layering Considered Harmful\".<ref name=R3439>{{citation |url=http://www.ietf.org/rfc/rfc3439.txt |title=Some Internet Architectural Guidelines and Philosophy |author1=R. Bush |author2=D. Meyer |publisher=Internet Engineering Task Force |date=December 2002 |ref=harv}}</ref>\n\nFor example, the session and presentation layers of the OSI suite are considered to be included to the application layer of the TCP/IP suite. The functionality of the session layer can be found in protocols like [[HTTP]] and [[SMTP]] and is more evident in protocols like [[Telnet]] and the [[Session Initiation Protocol]] (SIP). Session layer functionality is also realized with the port numbering of the TCP and UDP protocols, which cover the transport layer in the TCP/IP suite. Functions of the presentation layer are realized in the TCP/IP applications with the [[MIME]] standard in data exchange.\n\nConflicts are apparent also in the original OSI model, ISO 7498, when not considering the annexes to this model, e.g., the ISO 7498/4 Management Framework, or the ISO 8648 Internal Organization of the Network layer (IONL). When the IONL and Management Framework documents are considered, the ICMP and IGMP are defined as layer management protocols for the network layer. In like manner, the IONL provides a structure for \"subnetwork dependent convergence facilities\" such as [[Address Resolution Protocol|ARP]] and [[Reverse Address Resolution Protocol|RARP]].\n\nIETF protocols can be encapsulated recursively, as demonstrated by tunneling protocols such as [[Generic Routing Encapsulation]] (GRE). GRE uses the same mechanism that OSI uses for tunneling at the network layer.\n\n==Implementations==\n{{unreferenced section|date=March 2014}}\nThe Internet protocol suite does not presume any specific hardware or software environment.  It only requires that hardware and a software layer exists that is capable of sending and receiving packets on a computer network. As a result, the suite has been implemented on essentially every computing platform. A minimal implementation of TCP/IP includes the following: [[Internet Protocol]] (IP), [[Address Resolution Protocol]] (ARP), [[Internet Control Message Protocol]] (ICMP), [[Transmission Control Protocol]] (TCP), [[User Datagram Protocol]] (UDP), and [[IGMP]]. In addition to IP, ICMP, TCP, UDP, Internet Protocol version 6 requires [[Neighbor Discovery Protocol]] (NDP), ICMPv6, and IGMPv6 and is often accompanied by an integrated [[IPSec]] security layer.\n\nApplication programmers are typically concerned only with interfaces in the application layer and often also in the transport layer, while the layers below are services provided by the TCP/IP stack in the operating system. Most IP implementations are accessible to programmers through [[Internet socket|sockets]] and [[Application programming interface|APIs]].\n\nUnique implementations include [[lwIP|Lightweight TCP/IP]], an [[open source]] stack designed for [[embedded system]]s, and [[KA9Q|KA9Q NOS]], a stack and associated protocols for amateur [[packet radio]] systems and [[personal computer]]s connected via serial lines.\n\nMicrocontroller firmware in the network adapter typically handles link issues, supported by driver software in the operating system. Non-programmable analog and digital electronics are normally in charge of the physical components below the link layer, typically using an [[application-specific integrated circuit]] (ASIC) chipset for each network interface or other physical standard. High-performance routers are to a large extent based on fast non-programmable digital electronics, carrying out link level switching.\n\n==See also==\n{{portal|Computer networking|Computer Science}}\n* [[BBN Report 1822]]\n* [[FLIP (protocol)]] (fast local Internet protocol stack)\n* [[List of automation protocols]]\n* [[List of information technology acronyms]]\n* [[List of network protocols]]\n* [[List of TCP and UDP port numbers]]\n\n==Bibliography==\n* [[Douglas E. Comer]]. ''Internetworking with TCP/IP - Principles, Protocols and Architecture''. ISBN 86-7991-142-9\n* Joseph G. Davies and Thomas F. Lee. ''Microsoft Windows Server 2003 TCP/IP Protocols and Services''. ISBN 0-7356-1291-9\n* {{cite book| last=Forouzan| first=Behrouz A.| year=2003| title=TCP/IP Protocol Suite| edition=2nd| publisher=McGraw-Hill| isbn=0-07-246060-1 }}\n* Craig Hunt ''TCP/IP Network Administration''. O'Reilly (1998) ISBN 1-56592-322-7\n* {{cite book| last=Maufer| first=Thomas A.| year=1999| title=IP Fundamentals| publisher=Prentice Hall | isbn=0-13-975483-0 }}\n* Ian McLean. ''Windows(R) 2000 TCP/IP Black Book''. ISBN 1-57610-687-X\n* Ajit Mungale ''Pro .NET 1.1 Network Programming''. ISBN 1-59059-345-6\n* [[W. Richard Stevens]]. ''TCP/IP Illustrated, Volume 1: The Protocols''. ISBN 0-201-63346-9\n* [[W. Richard Stevens]] and Gary R. Wright. ''TCP/IP Illustrated, Volume 2: The Implementation''. ISBN 0-201-63354-X\n* [[W. Richard Stevens]]. ''TCP/IP Illustrated, Volume 3: [[T/TCP|TCP for Transactions]], [[HTTP]], [[Network News Transfer Protocol|NNTP]], and the [[unix domain sockets|UNIX Domain]] Protocols''. ISBN 0-201-63495-3\n* [[Andrew S. Tanenbaum]]. ''Computer Networks''. ISBN 0-13-066102-3\n* {{cite journal|last=Clark|first=D.|authorlink=David D. Clark|year=1988|title=The Design Philosophy of the DARPA Internet Protocols|journal=SIGCOMM '88 Symposium proceedings on Communications architectures and protocols|publisher=[[Association for Computing Machinery|ACM]] |pages=106\u2013114|doi=10.1145/52324.52336|url=http://www.cs.princeton.edu/~jrex/teaching/spring2005/reading/clark88.pdf|accessdate=2011-10-16|isbn=0897912799}}\n\n==References==\n{{Reflist|30em}}\n\n==External links==\n{{Wikiversity | Internet protocol suite}}\n*[http://www.livinginternet.com/i/ii.htm Internet History]\u2014Pages on Robert Kahn, Vinton Cerf, and TCP/IP (reviewed by Cerf and Kahn).\n* [http://www.ietf.org/rfc/rfc0675.txt RFC 675] - Specification of Internet Transmission Control Program, December 1974 Version\n* RFC 1180 A TCP/IP Tutorial - from the Internet Engineering Task Force (January 1991)\n* [http://www.itprc.com/tcpipfaq/ TCP/IP FAQ]\n* [http://www.tcpipguide.com/free/ The TCP/IP Guide] - A comprehensive look at the protocols and the procedures/processes involved\n* [http://www.columbia.edu/~rh120/other/tcpdigest_paper.txt A Study of the ARPANET TCP/IP Digest]\n* [http://www.eventhelix.com/RealtimeMantra/Networking/ TCP/IP Sequence Diagrams]\n* [http://www.ipprimer.com/ Daryl's TCP/IP Primer] - Intro to TCP/IP LAN administration, conversational style\n* [http://www.linux-tutorial.info/MContent-142 Introduction to TCP/IP]\n* [https://www.cs.princeton.edu/courses/archive/fall06/cos561/papers/cerf74.pdf A Protocol for Packet Network Intercommunication, Cerf & Kahn, IEEE Trans on Comms, Vol Com-22, No 5 May 1974]\n\n[[Category:Internet protocols| ]]\n[[Category:History of the Internet]]\n[[Category:Network architecture]]\n[[Category:Reference models]]"}]}}}}