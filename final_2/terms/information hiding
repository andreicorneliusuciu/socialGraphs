{"batchcomplete":"","query":{"normalized":[{"from":"information_hiding","to":"Information hiding"}],"pages":{"23292380":{"pageid":23292380,"ns":0,"title":"Information hiding","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{Refimprove|date=November 2008}}\n{{about|the computer programming concept|the practice of hiding data in a message or file|Steganography|data encryption|Cryptography}}\nIn [[computer science]], '''information hiding''' is the principle of segregation of the ''design decisions'' in a [[computer program]] that are most likely to change, thus protecting other parts of the program from extensive modification if the design decision is changed. The protection involves providing a stable [[Interface (computer science)|interface]] which protects the remainder of the program from the implementation (the details that are most likely to change).\n\nWritten another way, information hiding is the ability to prevent certain aspects of a [[Class (computer science)|class]] or [[software component]] from being accessible to its [[Client (computing)|client]]s, using either programming language features (like private variables) or an explicit exporting policy.\n\n== Overview ==\n\nThe term ''encapsulation'' is often used interchangeably with information hiding. Not all agree on the distinctions between the two though; one may think of information hiding as being the principle and encapsulation being the technique.  A software module hides information by encapsulating the information into a module or other construct which presents an interface.<ref name=\"not_encaps\">\n{{cite web\n| url = http://www.javaworld.com/javaworld/jw-05-2001/jw-0518-encapsulation.html\n| title = Encapsulation is not information hiding \n| publisher=[[JavaWorld]]\n}}\n</ref>\n\nA common use of information hiding is to hide the physical storage layout for data so that if it is changed, the change is restricted to a small subset of the total program.  For example, if a three-dimensional point (''x'',''y'',''z'') is represented in a program with three [[floating point]] [[scalar (computing)|scalar]] variables and later, the representation is changed to a single [[Array data structure|array]] variable of size three, a module designed with information hiding in mind would protect the remainder of the program from such a change.\n\nIn [[object-oriented programming]], information hiding (by way of [[Nesting (computing)|nesting]] of types) reduces software development risk by shifting the code's [[Dependency (computer science)|dependency]] on an uncertain implementation (design decision) onto a well-defined [[Interface (computer science)|interface]].  Clients of the interface perform operations purely through it so if the implementation changes, the clients do not have to change.\n\n== Encapsulation ==\n{{see also|Encapsulation (object-oriented programming)}}\n\nIn his book on [[object-oriented design]], [[Grady Booch]] defined encapsulation as \"the process of compartmentalizing the elements of an abstraction that constitute its structure and behavior; encapsulation serves to separate the contractual interface of an abstraction and its implementation.\"<ref name=Booch>Grady Booch, ''Object-Oriented Analysis and Design with Applications'', . Addison-Wesley, 2007, ISBN 0-201-89551-X, p. 51-52</ref>\n\nThe purpose is to achieve potential for change: the internal mechanisms of the component can be improved without impact on other components, or the component can be replaced with a different one that supports the same public interface. Encapsulation also protects the integrity of the component, by preventing users from setting the internal data of the component into an invalid or inconsistent state. Another benefit of encapsulation is that it reduces system complexity and thus increases robustness, by limiting the interdependencies between software components.<ref name=Booch/>\n\nIn this sense, the idea of encapsulation is more general than how it is applied in OOP: for example, a relational database is encapsulated in the sense that its only public interface is a [[Query language]] ([[SQL]] for example), which hides all the internal machinery and data structures of the database management system. As such, encapsulation is a core principle of good software architecture, at every level of granularity.\n\nEncapsulating software behind an interface allows the construction of objects that mimic the behavior and interactions of objects in the real world. For example, a simple digital alarm clock is a real-world object that a [[lay person]] can use and understand.  They can understand what the alarm clock does, and how to use it through the provided interface (buttons and screen), without having to understand every part inside of the clock.  Similarly, if the clock were replaced by a different model, the lay person could continue to use it in the same way, provided that the interface works the same.\n\nIn the more concrete setting of an object-oriented programming language, the notion is used to mean either an information hiding mechanism, a bundling mechanism, or the combination of the two. (See [[Encapsulation (object-oriented programming)]] for details.)\n\n==History==\nThe concept of information hiding was first described by [[David Parnas]] in {{harvtxt|Parnas|1972}}.{{sfn|Scott|2009|p=173}} Before then, modularity was discussed by Richard Gauthier and Stephen Pont in their 1970 book ''Designing Systems Programs'' although [[modular programming]] itself had been used at many commercial sites for many years previously \u2013 especially in [[I/O]] [[sub-system]]s and [[software library|software libraries]] \u2013 without acquiring the 'information hiding' tag \u2013 but for similar reasons, as well as the more obvious [[code reuse]] reason.\n\n== Example of information hiding ==\nInformation hiding serves as an effective criterion for dividing any piece of equipment, software or hardware, into modules of functionality.  For instance a car is a complex piece of equipment.  In order to make the design, manufacturing, and maintenance of a car reasonable, the complex piece of equipment is divided into [[module (programming)|modules]] with particular interfaces hiding design decisions.  By designing a car in this fashion, a car manufacturer can also offer various options while still having a vehicle which is economical to manufacture.\n\nFor instance, a car manufacturer may have a luxury version of the car as well as a standard version.  The luxury version comes with a more powerful engine than the standard version.  The [[engineer]]s designing the two different car engines, one for the luxury version and one for the standard version, provide the same interface for both engines.  Both engines fit into the engine bay of the car which is the same between both versions.  Both engines fit the same transmission, the same engine mounts, and the same controls.  The differences in the engines are that the more powerful luxury version has a larger displacement with a fuel injection system that is programmed to provide the fuel air mixture that the larger displacement engine requires.\n\nIn addition to the more powerful engine, the luxury version may also offer other options such as a better radio with CD player, more comfortable seats, a better suspension system with wider tires, and different paint colors.  With all of these changes, most of the car is the same between the standard version and the luxury version.  The radio with CD player is a module which replaces the standard radio, also a module, in the luxury model.  The more comfortable seats are installed into the same seat mounts as the standard types of seats.  Whether the seats are leather or plastic, or offer lumbar support or not, doesn't matter.\n\nThe engineers design the car by dividing the task up into pieces of work which are assigned to teams.  Each team then designs their [[software componentry|component]] to a particular standard or interface which allows the team flexibility in the design of the component while at the same time ensuring that all of the components will fit together.\n\nMotor vehicle manufacturers frequently use the same core structure for several different models, in part as a cost-control measure. Such a \"[[automobile platform|platform]]\" also provides an example of information hiding, since the floorpan can be built without knowing whether it is to be used in a sedan or a hatchback.\n\nAs can be seen by this example, information hiding provides flexibility. This flexibility allows a programmer to modify functionality of a computer program during normal evolution as the computer program is changed to better fit the needs of users.  When a computer program is well designed decomposing the source code solution into modules using the principle of information hiding, evolutionary changes are much easier because the changes typically are local rather than global changes.\n\nCars provide another example of this in how they interface with drivers. They present a standard interface (pedals, wheel, shifter, signals, gauges, etc.) on which people are trained and licensed. Thus, people only have to learn to drive a car; they don't need to learn a completely different way of driving every time they drive a new model. (Granted, there are manual and automatic transmissions and other such differences, but on the whole cars maintain a unified interface.)\n\n==See also==\n* [[Implementation inheritance]]\n* [[Inheritance semantics]]\n* [[Modularity (programming)]]\n* [[Opaque data type]]\n* [[Virtual inheritance]]\n* [[Transparency (human\u2013computer interaction)]]\n* [[Scope (programming)]]\n* [[Compartmentalization (information security)]]\n* [[Law of Demeter]]\n\n==References==\n{{reflist}}\n{{refbegin}}\n* {{Cite journal| doi = 10.1145/361598.361623| title = On the Criteria To Be Used in Decomposing Systems into Modules| url = http://www.cs.umd.edu/class/spring2003/cmsc838p/Design/criteria.pdf| journal = [[Communications of the ACM]]| volume = 15| issue = 12| pages = 1053\u201358| date=December 1972 | last = Parnas | first = D.L.<!-- [sic]: given this way in paper -->| authorlink = David Parnas| ref = harv}}\n* {{Cite book | isbn = 978-0-12-374514-9 | title = Programming Language Pragmatics | last = Scott | first = Michael L. | authorlink = Michael L. Scott | year = 2009 | origyear = 2000 | publisher = Morgan Kaufmann Publishers | url = https://www.cs.rochester.edu/~scott/pragmatics/ | edition = Third  | pages =  }}\n{{refend}}\n\n{{DEFAULTSORT:Information Hiding}}\n[[Category:Object-oriented programming]]\n[[Category:Programming principles]]\n\n[[bs:Zatvorenost]]\n[[fr:Encapsulation (programmation)]]\n[[it:Incapsulamento (informatica)]]\n[[he:\u05db\u05d9\u05de\u05d5\u05e1]]\n[[lt:Inkapsuliacija]]\n[[nl:Inkapseling]]\n[[ja:\u30ab\u30d7\u30bb\u30eb\u5316]]\n[[pa:Punjabi]]\n[[pl:Enkapsulacja]]\n[[sv:Inkapsling (Information Hiding)]]\n[[uk:\u0406\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0456\u044f]]\n[[ur:Urdu]]"}]}}}}